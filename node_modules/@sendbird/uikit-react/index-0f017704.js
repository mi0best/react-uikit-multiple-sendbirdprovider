import { _ as _extends } from './_rollupPluginBabelHelpers-e92eb032.js';
import React__default, { useLayoutEffect, useCallback, useRef, useContext } from 'react';
import { createPortal } from 'react-dom';
import { a as LocalizationContext } from './LocalizationContext-287ee149.js';
import { _ as __assign } from './tslib.es6-c2fb729e.js';
import './index-09847c0f.js';
import { n as noop } from './utils-6c50a6d1.js';
import { L as Label, a as LabelTypography, b as LabelColors } from './index-92741c7e.js';
import './types-9d43ac6e.js';
import Icon, { IconTypes, IconColors } from './ui/Icon.js';
import { M as MODAL_ROOT } from './index-04bd1a59.js';
import { c as isMultipleFilesMessage, r as isFileMessage, E as isSupportedFileView, k as isVideo$1, h as isImage$1 } from './index-776554c0.js';
import Avatar from './ui/Avatar.js';
import { k as SLIDER_BUTTON_ICON_SIDE_LENGTH } from './consts-d9c5f25a.js';

// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types
var SUPPORTED_MIMES = {
  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/svg+xml', 'image/webp'],
  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']
};
var isImage = function (type) {
  return SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;
};
var isVideo = function (type) {
  return SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;
};
__assign({}, SUPPORTED_MIMES);
var ViewerTypes = {
  SINGLE: 'SINGLE',
  MULTI: 'MULTI'
};

function useKeyDown(_a) {
  var props = _a.props,
    ref = _a.ref;
  var onClose = props.onClose;
  var onClickLeft = noop;
  var onClickRight = noop;
  if (props.viewerType === ViewerTypes.MULTI) {
    onClickLeft = props.onClickLeft;
    onClickRight = props.onClickRight;
  }
  useLayoutEffect(function () {
    var _a;
    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();
  }, [ref.current]);
  // this usecallback is not super necessary
  // discuss with others and remove it if it's not needed
  var onKeyDown = useCallback(function (event) {
    switch (event.key) {
      case 'Escape':
        // @ts-ignore
        onClose(event);
        break;
      case 'ArrowLeft':
        onClickLeft();
        break;
      case 'ArrowRight':
        onClickRight();
        break;
    }
    event.stopPropagation();
  }, [onClose, onClickLeft, onClickRight]);
  return {
    onKeyDown: onKeyDown
  };
}

function mapFileViewerComponentProps(_a) {
  var props = _a.props;
  if (props.viewerType === ViewerTypes.MULTI) {
    var _b = props,
      fileInfoList = _b.fileInfoList,
      currentIndex = _b.currentIndex;
    return fileInfoList[currentIndex];
  }
  var fileInfo = props;
  return {
    name: fileInfo.name,
    type: fileInfo.type,
    url: fileInfo.url
  };
}

function DeleteButton(props) {
  if (props.viewerType !== ViewerTypes.MULTI) {
    var onDelete_1 = props.onDelete,
      isByMe = props.isByMe,
      disableDelete_1 = props.disableDelete,
      className = props.className;
    return isByMe ? /*#__PURE__*/React__default.createElement("div", {
      className: "sendbird-fileviewer__header__right__actions__delete ".concat(className)
    }, /*#__PURE__*/React__default.createElement(Icon, {
      className: disableDelete_1 ? 'disabled' : '',
      type: IconTypes.DELETE,
      fillColor: disableDelete_1 ? IconColors.GRAY : IconColors.ON_BACKGROUND_1,
      height: "24px",
      width: "24px",
      onClick: function (e) {
        if (!disableDelete_1) {
          onDelete_1 === null || onDelete_1 === void 0 ? void 0 : onDelete_1(e);
        }
      }
    })) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null);
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null);
}

// this is a slider component that is used to navigate between images
function Slider(props) {
  if (props.viewerType === ViewerTypes.MULTI) {
    var onClickLeft_1 = props.onClickLeft,
      onClickRight_1 = props.onClickRight;
    return /*#__PURE__*/React__default.createElement("div", {
      className: "sendbird-file-viewer-slider"
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "sendbird-file-viewer-arrow--left"
    }, /*#__PURE__*/React__default.createElement(Icon, {
      type: IconTypes.SLIDE_LEFT,
      fillColor: IconColors.ON_BACKGROUND_1,
      height: SLIDER_BUTTON_ICON_SIDE_LENGTH,
      width: SLIDER_BUTTON_ICON_SIDE_LENGTH,
      onClick: function (e) {
        onClickLeft_1 === null || onClickLeft_1 === void 0 ? void 0 : onClickLeft_1();
        e.stopPropagation();
      }
    })), /*#__PURE__*/React__default.createElement("div", {
      className: "sendbird-file-viewer-arrow--right"
    }, /*#__PURE__*/React__default.createElement(Icon, {
      type: IconTypes.SLIDE_LEFT,
      fillColor: IconColors.ON_BACKGROUND_1,
      height: SLIDER_BUTTON_ICON_SIDE_LENGTH,
      width: SLIDER_BUTTON_ICON_SIDE_LENGTH,
      onClick: function (e) {
        e.stopPropagation();
        onClickRight_1 === null || onClickRight_1 === void 0 ? void 0 : onClickRight_1();
      }
    })));
  }
  // return empty fragment if viewerType is not ViewerTypes.MULTI
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null);
}

var FileViewerComponent = function (props) {
  var ref = useRef(null);
  var profileUrl = props.profileUrl,
    nickname = props.nickname,
    onClose = props.onClose;
  var onKeyDown = useKeyDown({
    props: props,
    ref: ref
  }).onKeyDown;
  var _a = mapFileViewerComponentProps({
      props: props
    }),
    name = _a.name,
    type = _a.type,
    url = _a.url;
  var stringSet = useContext(LocalizationContext).stringSet;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer",
    onKeyDown: onKeyDown
    // to focus
    ,
    tabIndex: 1,
    ref: ref
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer__header"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer__header__left"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer__header__left__avatar"
  }, /*#__PURE__*/React__default.createElement(Avatar, {
    height: "32px",
    width: "32px",
    src: profileUrl
  })), /*#__PURE__*/React__default.createElement(Label, {
    className: "sendbird-fileviewer__header__left__filename",
    type: LabelTypography.H_2,
    color: LabelColors.ONBACKGROUND_1
  }, name), /*#__PURE__*/React__default.createElement(Label, {
    className: "sendbird-fileviewer__header__left__sender-name",
    type: LabelTypography.BODY_1,
    color: LabelColors.ONBACKGROUND_2
  }, nickname)), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer__header__right"
  }, isSupportedFileView(type) && /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer__header__right__actions"
  }, /*#__PURE__*/React__default.createElement("a", {
    className: "sendbird-fileviewer__header__right__actions__download",
    rel: "noopener noreferrer",
    href: url,
    target: "_blank"
  }, /*#__PURE__*/React__default.createElement(Icon, {
    type: IconTypes.DOWNLOAD,
    fillColor: IconColors.ON_BACKGROUND_1,
    height: "24px",
    width: "24px"
  })), /*#__PURE__*/React__default.createElement(DeleteButton, _extends({
    className: "sendbird-fileviewer__header__right__actions__delete"
  }, props))), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer__header__right__actions__close"
  }, /*#__PURE__*/React__default.createElement(Icon, {
    type: IconTypes.CLOSE,
    fillColor: IconColors.ON_BACKGROUND_1,
    height: "24px",
    width: "24px",
    onClick: function (e) {
      return onClose === null || onClose === void 0 ? void 0 : onClose(e);
    }
  })))), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer__content"
  }, isVideo$1(type) && /*#__PURE__*/React__default.createElement("video", {
    controls: true,
    className: "sendbird-fileviewer__content__video"
  }, /*#__PURE__*/React__default.createElement("source", {
    src: url,
    type: type
  })), isImage$1(type) && /*#__PURE__*/React__default.createElement("img", {
    src: url,
    alt: name,
    className: props.viewerType === ViewerTypes.MULTI ? 'sendbird-fileviewer__content__img__multi' : 'sendbird-fileviewer__content__img'
  }), !isSupportedFileView(type) && /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-fileviewer__content__unsupported"
  }, /*#__PURE__*/React__default.createElement(Label, {
    type: LabelTypography.H_1,
    color: LabelColors.ONBACKGROUND_1
  }, (stringSet === null || stringSet === void 0 ? void 0 : stringSet.UI__FILE_VIEWER__UNSUPPORT) || 'Unsupported message')), /*#__PURE__*/React__default.createElement(Slider, props)));
};
function FileViewer(_a) {
  var _b, _c, _d;
  var message = _a.message,
    _e = _a.statefulFileInfoList,
    statefulFileInfoList = _e === void 0 ? [] : _e,
    onClose = _a.onClose,
    _f = _a.isByMe,
    isByMe = _f === void 0 ? false : _f,
    onDelete = _a.onDelete,
    currentIndex = _a.currentIndex,
    onClickLeft = _a.onClickLeft,
    onClickRight = _a.onClickRight;
  if (isMultipleFilesMessage(message)) {
    var castedMessage = message;
    return /*#__PURE__*/React__default.createElement(FileViewerComponent, {
      profileUrl: castedMessage.sender.profileUrl,
      nickname: castedMessage.sender.nickname,
      viewerType: ViewerTypes.MULTI,
      fileInfoList: statefulFileInfoList.filter(function (fileInfo) {
        return fileInfo.url; // Caution: This assumes that defined url means file upload has completed.
      }).map(function (fileInfo) {
        return {
          name: fileInfo.fileName || '',
          type: fileInfo.mimeType || '',
          url: fileInfo.url
        };
      }),
      currentIndex: currentIndex || 0,
      onClickLeft: onClickLeft || noop,
      onClickRight: onClickRight || noop,
      onClose: onClose
    });
  } else if (isFileMessage(message)) {
    var castedMessage = message;
    return /*#__PURE__*/createPortal( /*#__PURE__*/React__default.createElement(FileViewerComponent, {
      profileUrl: (_b = castedMessage.sender) === null || _b === void 0 ? void 0 : _b.profileUrl,
      nickname: (_c = castedMessage.sender) === null || _c === void 0 ? void 0 : _c.nickname,
      name: castedMessage.name,
      type: castedMessage.type,
      url: castedMessage === null || castedMessage === void 0 ? void 0 : castedMessage.url,
      isByMe: isByMe,
      disableDelete: (((_d = castedMessage.threadInfo) === null || _d === void 0 ? void 0 : _d.replyCount) || 0) > 0,
      onClose: onClose,
      onDelete: onDelete || noop
    }), document.getElementById(MODAL_ROOT));
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null);
}

export { FileViewer as F, isVideo as a, FileViewerComponent as b, isImage as i };
//# sourceMappingURL=index-0f017704.js.map
