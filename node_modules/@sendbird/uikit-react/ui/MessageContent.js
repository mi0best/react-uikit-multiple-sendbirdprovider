import { _ as _extends } from '../_rollupPluginBabelHelpers-e92eb032.js';
import { _ as __assign } from '../tslib.es6-c2fb729e.js';
import React__default, { useContext, useRef, useState } from 'react';
import { f as format } from '../index-2d27aeef.js';
import Avatar from './Avatar.js';
import UserProfile from './UserProfile.js';
import { M as MessageStatus } from '../index-4b4e9682.js';
import MessageItemMenu from './MessageItemMenu.js';
import MessageItemReactionMenu from './MessageItemReactionMenu.js';
import ContextMenu, { MenuItems } from './ContextMenu.js';
import { L as Label, a as LabelTypography, b as LabelColors } from '../index-92741c7e.js';
import EmojiReactions from './EmojiReactions.js';
import AdminMessage from './AdminMessage.js';
import TextMessageItemBody from './TextMessageItemBody.js';
import FileMessageItemBody from './FileMessageItemBody.js';
import ThumbnailMessageItemBody from './ThumbnailMessageItemBody.js';
import OGMessageItemBody from './OGMessageItemBody.js';
import UnknownMessageItemBody from './UnknownMessageItemBody.js';
import QuoteMessage from './QuoteMessage.js';
import { A as getUIKitMessageTypes, o as getClassName, a as isSendableMessage, B as getSenderName, C as isOGMessage, D as isTextMessage, z as getUIKitMessageType, c as isMultipleFilesMessage, d as isVoiceMessage, v as isThumbnailMessage } from '../index-776554c0.js';
import { a as UserProfileContext } from '../UserProfileContext-2001a468.js';
import { u as useLocalization } from '../LocalizationContext-287ee149.js';
import { useSendbirdStateContext } from '../useSendbirdStateContext.js';
import { u as useLongPress } from '../useLongPress-f8655a14.js';
import { M as MobileMenu } from '../index-c22e4772.js';
import { u as useMediaQueryContext } from '../MediaQueryContext-114ca049.js';
import ThreadReplies from './ThreadReplies.js';
import { T as ThreadReplySelectType } from '../const-73db0277.js';
import { VoiceMessageItemBody } from './VoiceMessageItemBody.js';
import { n as noop } from '../utils-6c50a6d1.js';
import { u as useThreadMessageKindKeySelector, a as useStatefulFileInfoList, M as MultipleFilesMessageItemBody } from '../useStatefulFileInfoList-5e68b93f.js';
import '../index-e4277f9c.js';
import './ImageRenderer.js';
import './Icon.js';
import 'prop-types';
import '../uuid-c15b8b3b.js';
import '../sendbirdSelectors.js';
import '../pubSub/topics.js';
import './Button.js';
import '../types-9d43ac6e.js';
import '../stringSet-6422c6b9.js';
import './Loader.js';
import '../utils/message/getOutgoingMessageState.js';
import '../index-f8a9cb51.js';
import '../index-682a192c.js';
import './IconButton.js';
import '../types-781e0bab.js';
import '../ChannelProvider-9ba5893a.js';
import '../utils-aa4086dc.js';
import '@sendbird/chat/message';
import '../index-09847c0f.js';
import '../useSendMultipleFilesMessage-b8256698.js';
import '../compareIds-7e517404.js';
import '@sendbird/chat/groupChannel';
import '../consts-d9c5f25a.js';
import '../resolvedReplyType-fb987595.js';
import './ReactionButton.js';
import 'react-dom';
import './SortByRow.js';
import './ReactionBadge.js';
import './BottomSheet.js';
import '../index-04bd1a59.js';
import './UserListItem.js';
import './MutedAvatarOverlay.js';
import './Checkbox.js';
import './Tooltip.js';
import './TooltipWrapper.js';
import '../Message/context.js';
import '../tokenize-eae44765.js';
import '../index-a0638563.js';
import './MentionLabel.js';
import './LinkLabel.js';
import '../consts-4ec7d640.js';
import './TextButton.js';
import '../color-57373b4c.js';
import '../utils-bfc0ab3b.js';
import '../consts-be37687e.js';
import '../withSendbird.js';
import './ProgressBar.js';
import '../VoicePlayer/useVoicePlayer.js';
import '../index-e04159fe.js';
import '../VoiceRecorder/context.js';
import './Modal.js';
import './PlaybackTime.js';
import '../index-0f017704.js';

function MessageContent(_a) {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
  var className = _a.className,
    userId = _a.userId,
    channel = _a.channel,
    message = _a.message,
    _r = _a.disabled,
    disabled = _r === void 0 ? false : _r,
    _s = _a.chainTop,
    chainTop = _s === void 0 ? false : _s,
    _t = _a.chainBottom,
    chainBottom = _t === void 0 ? false : _t,
    _u = _a.isReactionEnabled,
    isReactionEnabled = _u === void 0 ? false : _u,
    _v = _a.disableQuoteMessage,
    disableQuoteMessage = _v === void 0 ? false : _v,
    replyType = _a.replyType,
    threadReplySelectType = _a.threadReplySelectType,
    nicknamesMap = _a.nicknamesMap,
    emojiContainer = _a.emojiContainer,
    scrollToMessage = _a.scrollToMessage,
    showEdit = _a.showEdit,
    showRemove = _a.showRemove,
    showFileViewer = _a.showFileViewer,
    resendMessage = _a.resendMessage,
    deleteMessage = _a.deleteMessage,
    toggleReaction = _a.toggleReaction,
    setQuoteMessage = _a.setQuoteMessage,
    onReplyInThread = _a.onReplyInThread,
    onQuoteMessageClick = _a.onQuoteMessageClick,
    onMessageHeightChange = _a.onMessageHeightChange;
  var messageTypes = getUIKitMessageTypes();
  var dateLocale = useLocalization().dateLocale;
  var _w = (useSendbirdStateContext === null || useSendbirdStateContext === void 0 ? void 0 : useSendbirdStateContext()) || {},
    config = _w.config,
    eventHandlers = _w.eventHandlers;
  var onPressUserProfileHandler = (_b = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _b === void 0 ? void 0 : _b.onPressUserProfile;
  var _x = useContext(UserProfileContext),
    disableUserProfile = _x.disableUserProfile,
    renderUserProfile = _x.renderUserProfile;
  var avatarRef = useRef(null);
  var contentRef = useRef(null);
  var isMobile = useMediaQueryContext().isMobile;
  var _y = useState(false),
    showMenu = _y[0],
    setShowMenu = _y[1];
  var _z = useState(false),
    mouseHover = _z[0],
    setMouseHover = _z[1];
  var _0 = useState(false),
    supposedHover = _0[0],
    setSupposedHover = _0[1];
  var isByMe = userId === ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) || (message === null || message === void 0 ? void 0 : message.sendingStatus) === 'pending' || (message === null || message === void 0 ? void 0 : message.sendingStatus) === 'failed';
  var isByMeClassName = isByMe ? 'outgoing' : 'incoming';
  var chainTopClassName = chainTop ? 'chain-top' : '';
  var isReactionEnabledInChannel = isReactionEnabled && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral);
  var isReactionEnabledClassName = isReactionEnabledInChannel ? 'use-reactions' : '';
  var supposedHoverClassName = supposedHover ? 'sendbird-mouse-hover' : '';
  var useReplying = !!((replyType === 'QUOTE_REPLY' || replyType === 'THREAD') && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage) && !disableQuoteMessage);
  var useReplyingClassName = useReplying ? 'use-quote' : '';
  var isOgMessageEnabledInGroupChannel = (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && config.groupChannel.enableOgtag;
  // Thread replies
  var displayThreadReplies = ((_d = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _d === void 0 ? void 0 : _d.replyCount) > 0 && replyType === 'THREAD';
  // onMouseDown: (e: React.MouseEvent<T>) => void;
  // onTouchStart: (e: React.TouchEvent<T>) => void;
  // onMouseUp: (e: React.MouseEvent<T>) => void;
  // onMouseLeave: (e: React.MouseEvent<T>) => void;
  // onTouchEnd: (e: React.TouchEvent<T>) => void;
  var longPress = useLongPress({
    onLongPress: function () {
      if (isMobile) {
        setShowMenu(true);
      }
    },
    onClick: noop
  }, {
    delay: 300,
    shouldPreventDefault: false
  });
  var threadMessageKindKey = useThreadMessageKindKeySelector({
    isMobile: isMobile
  });
  // For MultipleFilesMessage only.
  var statefulFileInfoList = useStatefulFileInfoList(message);
  if (((_e = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _e === void 0 ? void 0 : _e.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) === 'admin') {
    return /*#__PURE__*/React__default.createElement(AdminMessage, {
      message: message
    });
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: getClassName([className, 'sendbird-message-content', isByMeClassName]),
    onMouseOver: function () {
      return setMouseHover(true);
    },
    onMouseLeave: function () {
      return setMouseHover(false);
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-message-content__left', isReactionEnabledClassName, isByMeClassName, useReplyingClassName])
  }, !isByMe && !chainBottom && isSendableMessage(message) &&
  /*#__PURE__*/
  /** user profile */
  React__default.createElement(ContextMenu, {
    menuTrigger: function (toggleDropdown) {
      var _a, _b;
      return /*#__PURE__*/React__default.createElement(Avatar, {
        className: "sendbird-message-content__left__avatar ".concat(displayThreadReplies ? 'use-thread-replies' : '')
        // @ts-ignore
        ,
        src: ((_b = (_a = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a === void 0 ? void 0 : _a.find(function (member) {
          return (member === null || member === void 0 ? void 0 : member.userId) === message.sender.userId;
        })) === null || _b === void 0 ? void 0 : _b.profileUrl) || message.sender.profileUrl || ''
        // TODO: Divide getting profileUrl logic to utils
        ,
        ref: avatarRef,
        width: "28px",
        height: "28px",
        onClick: function () {
          if (!disableUserProfile) toggleDropdown();
        }
      });
    },
    menuItems: function (closeDropdown) {
      return /*#__PURE__*/React__default.createElement(MenuItems
      /**
      * parentRef: For catching location(x, y) of MenuItems
      * parentContainRef: For toggling more options(menus & reactions)
      */, {
        parentRef: avatarRef,
        parentContainRef: avatarRef,
        closeDropdown: closeDropdown,
        style: {
          paddingTop: '0px',
          paddingBottom: '0px'
        }
      }, renderUserProfile ? renderUserProfile({
        user: message.sender,
        close: closeDropdown,
        currentUserId: userId
      }) : /*#__PURE__*/React__default.createElement(UserProfile, {
        user: message.sender,
        onSuccess: closeDropdown
      }));
    }
  }), isByMe && !isMobile && /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-message-content-menu', isReactionEnabledClassName, supposedHoverClassName, isByMeClassName])
  }, /*#__PURE__*/React__default.createElement(MessageItemMenu, {
    className: "sendbird-message-content-menu__normal-menu",
    channel: channel,
    message: message,
    isByMe: isByMe,
    replyType: replyType,
    disabled: disabled,
    showEdit: showEdit,
    showRemove: showRemove,
    resendMessage: resendMessage,
    setQuoteMessage: setQuoteMessage,
    setSupposedHover: setSupposedHover,
    onReplyInThread: function (_a) {
      var _b;
      var message = _a.message;
      if (threadReplySelectType === ThreadReplySelectType.THREAD) {
        onReplyInThread({
          message: message
        });
      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
        scrollToMessage((_b = message.parentMessage) === null || _b === void 0 ? void 0 : _b.createdAt, message.parentMessageId);
      }
    }
  }), isReactionEnabledInChannel && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {
    className: "sendbird-message-content-menu__reaction-menu",
    message: message,
    userId: userId,
    emojiContainer: emojiContainer,
    toggleReaction: toggleReaction,
    setSupposedHover: setSupposedHover
  }))), /*#__PURE__*/React__default.createElement("div", _extends({
    className: 'sendbird-message-content__middle'
  }, isMobile ? __assign({}, longPress) : {}, {
    ref: contentRef
  }), !isByMe && !chainTop && !useReplying && /*#__PURE__*/React__default.createElement(Label, {
    className: "sendbird-message-content__middle__sender-name",
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_2
  },
  // @ts-ignore
  ((_g = (_f = channel === null || channel === void 0 ? void 0 : channel.members) === null || _f === void 0 ? void 0 : _f.find(function (member) {
    var _a;
    return (member === null || member === void 0 ? void 0 : member.userId) === ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId);
  })) === null || _g === void 0 ? void 0 : _g.nickname) || getSenderName(message)
  // TODO: Divide getting profileUrl logic to utils
  ), useReplying ? /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-message-content__middle__quote-message', isByMe ? 'outgoing' : 'incoming', useReplyingClassName])
  }, /*#__PURE__*/React__default.createElement(QuoteMessage, {
    className: "sendbird-message-content__middle__quote-message__quote",
    message: message,
    userId: userId,
    isByMe: isByMe,
    isUnavailable: ((_h = channel === null || channel === void 0 ? void 0 : channel.messageOffsetTimestamp) !== null && _h !== void 0 ? _h : 0) > ((_k = (_j = message.parentMessage) === null || _j === void 0 ? void 0 : _j.createdAt) !== null && _k !== void 0 ? _k : 0),
    onClick: function () {
      var _a;
      if (replyType === 'THREAD' && threadReplySelectType === ThreadReplySelectType.THREAD) {
        onQuoteMessageClick === null || onQuoteMessageClick === void 0 ? void 0 : onQuoteMessageClick({
          message: message
        });
      }
      if ((replyType === 'QUOTE_REPLY' || replyType === 'THREAD' && threadReplySelectType === ThreadReplySelectType.PARENT) && ((_a = message === null || message === void 0 ? void 0 : message.parentMessage) === null || _a === void 0 ? void 0 : _a.createdAt) && (message === null || message === void 0 ? void 0 : message.parentMessageId)) {
        scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);
      }
    }
  })) : null, /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-message-content__middle__body-container'])
  }, isByMe && !chainBottom && /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-message-content__middle__body-container__created-at', 'left', supposedHoverClassName])
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-message-content__middle__body-container__created-at__component-container"
  }, /*#__PURE__*/React__default.createElement(MessageStatus, {
    message: message,
    channel: channel
  }))), isOgMessageEnabledInGroupChannel && isOGMessage(message) ? /*#__PURE__*/React__default.createElement(OGMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message: message,
    isByMe: isByMe,
    mouseHover: mouseHover,
    isMentionEnabled: (config === null || config === void 0 ? void 0 : config.isMentionEnabled) || false,
    isReactionEnabled: isReactionEnabledInChannel,
    onMessageHeightChange: onMessageHeightChange
  }) : isTextMessage(message) && /*#__PURE__*/React__default.createElement(TextMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message: message,
    isByMe: isByMe,
    mouseHover: mouseHover,
    isMentionEnabled: (config === null || config === void 0 ? void 0 : config.isMentionEnabled) || false,
    isReactionEnabled: isReactionEnabledInChannel
  }), getUIKitMessageType(message) === messageTypes.FILE && /*#__PURE__*/React__default.createElement(FileMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message: message,
    isByMe: isByMe,
    mouseHover: mouseHover,
    isReactionEnabled: isReactionEnabledInChannel
  }), isMultipleFilesMessage(message) && /*#__PURE__*/React__default.createElement(MultipleFilesMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message: message,
    isByMe: isByMe,
    mouseHover: mouseHover,
    isReactionEnabled: isReactionEnabledInChannel,
    threadMessageKindKey: threadMessageKindKey,
    statefulFileInfoList: statefulFileInfoList
  }), isVoiceMessage(message) && /*#__PURE__*/React__default.createElement(VoiceMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message: message,
    channelUrl: (_l = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _l !== void 0 ? _l : '',
    isByMe: isByMe,
    isReactionEnabled: isReactionEnabledInChannel
  }), isThumbnailMessage(message) && /*#__PURE__*/React__default.createElement(ThumbnailMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message: message,
    isByMe: isByMe,
    mouseHover: mouseHover,
    isReactionEnabled: isReactionEnabledInChannel,
    showFileViewer: showFileViewer,
    style: isMobile ? {
      width: '100%'
    } : {}
  }), getUIKitMessageType(message) === messageTypes.UNKNOWN && /*#__PURE__*/React__default.createElement(UnknownMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message: message,
    isByMe: isByMe,
    mouseHover: mouseHover,
    isReactionEnabled: isReactionEnabledInChannel
  }), isReactionEnabledInChannel && ((_m = message === null || message === void 0 ? void 0 : message.reactions) === null || _m === void 0 ? void 0 : _m.length) > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-message-content-reactions', isMultipleFilesMessage(message) ? 'image-grid' : !isByMe || isThumbnailMessage(message) || isOGMessage(message) ? '' : 'primary', mouseHover ? 'mouse-hover' : ''])
  }, /*#__PURE__*/React__default.createElement(EmojiReactions, {
    userId: userId,
    message: message,
    channel: channel,
    isByMe: isByMe,
    emojiContainer: emojiContainer,
    memberNicknamesMap: nicknamesMap,
    toggleReaction: toggleReaction,
    onPressUserProfile: onPressUserProfileHandler
  })), !isByMe && !chainBottom && /*#__PURE__*/React__default.createElement(Label, {
    className: getClassName(['sendbird-message-content__middle__body-container__created-at', 'right', supposedHoverClassName]),
    type: LabelTypography.CAPTION_3,
    color: LabelColors.ONBACKGROUND_2
  }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, 'p', {
    locale: dateLocale
  }))), displayThreadReplies && /*#__PURE__*/React__default.createElement(ThreadReplies, {
    className: "sendbird-message-content__middle__thread-replies",
    threadInfo: message === null || message === void 0 ? void 0 : message.threadInfo,
    onClick: function () {
      return onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({
        message: message
      });
    }
  })), /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-message-content__right', chainTopClassName, isReactionEnabledClassName, useReplyingClassName])
  }, !isByMe && !isMobile && /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-message-content-menu', chainTopClassName, supposedHoverClassName, isByMeClassName])
  }, isReactionEnabledInChannel && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {
    className: "sendbird-message-content-menu__reaction-menu",
    message: message,
    userId: userId,
    emojiContainer: emojiContainer,
    toggleReaction: toggleReaction,
    setSupposedHover: setSupposedHover
  }), /*#__PURE__*/React__default.createElement(MessageItemMenu, {
    className: "sendbird-message-content-menu__normal-menu",
    channel: channel,
    message: message,
    isByMe: isByMe,
    replyType: replyType,
    disabled: disabled,
    showRemove: showRemove,
    resendMessage: resendMessage,
    setQuoteMessage: setQuoteMessage,
    setSupposedHover: setSupposedHover,
    onReplyInThread: function (_a) {
      var _b;
      var message = _a.message;
      if (threadReplySelectType === ThreadReplySelectType.THREAD) {
        onReplyInThread({
          message: message
        });
      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
        scrollToMessage((_b = message.parentMessage) === null || _b === void 0 ? void 0 : _b.createdAt, message.parentMessageId);
      }
    }
  }))), showMenu && (((_o = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _o === void 0 ? void 0 : _o.call(message)) || ((_p = message === null || message === void 0 ? void 0 : message.isFileMessage) === null || _p === void 0 ? void 0 : _p.call(message)) || ((_q = message === null || message === void 0 ? void 0 : message.isMultipleFilesMessage) === null || _q === void 0 ? void 0 : _q.call(message))) && /*#__PURE__*/React__default.createElement(MobileMenu, {
    parentRef: contentRef,
    channel: channel,
    hideMenu: function () {
      setShowMenu(false);
    },
    message: message,
    isReactionEnabled: isReactionEnabledInChannel,
    isByMe: isByMe,
    userId: userId,
    replyType: replyType,
    disabled: disabled,
    showRemove: showRemove,
    emojiContainer: emojiContainer,
    resendMessage: resendMessage,
    deleteMessage: deleteMessage,
    setQuoteMessage: setQuoteMessage,
    toggleReaction: toggleReaction,
    showEdit: showEdit,
    onReplyInThread: function (_a) {
      var _b;
      var message = _a.message;
      if (threadReplySelectType === ThreadReplySelectType.THREAD) {
        onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({
          message: message
        });
      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
        scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage(((_b = message === null || message === void 0 ? void 0 : message.parentMessage) === null || _b === void 0 ? void 0 : _b.createdAt) || 0, (message === null || message === void 0 ? void 0 : message.parentMessageId) || 0);
      }
    }
  }));
}

export { MessageContent as default };
//# sourceMappingURL=MessageContent.js.map
