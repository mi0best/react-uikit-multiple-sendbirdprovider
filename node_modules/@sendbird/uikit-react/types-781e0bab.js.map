{"version":3,"file":"types-781e0bab.js","sources":["../src/lib/types.ts"],"sourcesContent":["import React from 'react';\nimport type SendbirdChat from '@sendbird/chat';\nimport type { User, SendbirdChatParams } from '@sendbird/chat';\nimport type {\n  GroupChannel,\n  GroupChannelCreateParams,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\nimport type {\n  OpenChannel,\n  OpenChannelCreateParams,\n  SendbirdOpenChat,\n} from '@sendbird/chat/openChannel';\nimport type {\n  FileMessage,\n  FileMessageCreateParams,\n  UserMessage,\n  UserMessageCreateParams,\n  UserMessageUpdateParams,\n} from '@sendbird/chat/message';\nimport { SBUConfig } from '@sendbird/uikit-tools';\nimport { Module } from '@sendbird/chat/lib/__definition';\n\nimport type {\n  RenderUserProfileProps,\n  ReplyType,\n  UserListQuery,\n} from '../types';\nimport { UikitMessageHandler } from './selectors';\nimport { Logger } from './SendbirdState';\nimport { MarkAsReadSchedulerType } from './hooks/useMarkAsReadScheduler';\nimport { MarkAsDeliveredSchedulerType } from './hooks/useMarkAsDeliveredScheduler';\nimport { PartialDeep } from '../utils/typeHelpers/partialDeep';\nimport { CoreMessageType } from '../utils';\nimport { UserActionTypes } from './dux/user/actionTypes';\nimport { SdkActionTypes } from './dux/sdk/actionTypes';\nimport { ReconnectType } from './hooks/useConnect/types';\n\n// note to SDK team:\n// using enum inside .d.ts wonâ€™t work for jest, but const enum will work.\nexport const Role = {\n  OPERATOR: 'operator',\n  NONE: 'none',\n} as const;\n\nexport interface SBUEventHandlers {\n  reaction?: {\n    onPressUserProfile?(member: User): void;\n  },\n}\n\nexport interface SendBirdStateConfig {\n  disableUserProfile: boolean;\n  disableMarkAsDelivered: boolean;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  onUserProfileMessage?: (props: GroupChannel) => void;\n  allowProfileEdit: boolean;\n  isOnline: boolean;\n  userId: string;\n  appId: string;\n  accessToken: string;\n  theme: string;\n  pubSub: any;\n  logger: Logger;\n  setCurrentTheme: (theme: 'light' | 'dark') => void;\n  /** @deprecated Please use setCurrentTheme instead * */\n  setCurrenttheme: (theme: 'light' | 'dark') => void;\n  userListQuery?(): UserListQuery;\n  isReactionEnabled: boolean;\n  isMentionEnabled: boolean;\n  isMultipleFilesMessageEnabled: boolean;\n  isVoiceMessageEnabled?: boolean;\n  uikitUploadSizeLimit: number;\n  uikitMultipleFilesMessageLimit: number;\n  voiceRecord?: {\n    maxRecordingTime: number;\n    minRecordingTime: number;\n  };\n  userMention: {\n    maxMentionCount: number,\n    maxSuggestionCount: number,\n  };\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n  markAsReadScheduler: MarkAsReadSchedulerType;\n  markAsDeliveredScheduler: MarkAsDeliveredSchedulerType;\n  isTypingIndicatorEnabledOnChannelList?: boolean;\n  isMessageReceiptStatusEnabledOnChannelList?: boolean;\n  replyType: ReplyType;\n  showSearchIcon?: boolean;\n  // Remote configs set from dashboard by UIKit feature configuration\n  groupChannel: {\n    enableOgtag: SBUConfig['groupChannel']['channel']['enableOgtag'];\n    enableTypingIndicator: SBUConfig['groupChannel']['channel']['enableTypingIndicator'];\n    enableDocument: SBUConfig['groupChannel']['channel']['input']['enableDocument'];\n    threadReplySelectType: SBUConfig['groupChannel']['channel']['threadReplySelectType'];\n  },\n  openChannel: {\n    enableOgtag: SBUConfig['openChannel']['channel']['enableOgtag'];\n    enableDocument: SBUConfig['openChannel']['channel']['input']['enableDocument'];\n  },\n}\nexport interface SdkStore {\n  error: boolean;\n  initialized: boolean;\n  loading: boolean;\n  sdk: SendbirdChat & SendbirdGroupChat & SendbirdOpenChat;\n}\nexport interface UserStore {\n  initialized: boolean;\n  loading: boolean;\n  user: User;\n}\nexport interface SendBirdStateStore {\n  sdkStore: SdkStore;\n  userStore: UserStore;\n}\n\nexport type SendBirdState = {\n  config: SendBirdStateConfig;\n  stores: SendBirdStateStore;\n  dispatchers: {\n    sdkDispatcher: React.Dispatch<SdkActionTypes>,\n    userDispatcher: React.Dispatch<UserActionTypes>,\n    reconnect: ReconnectType,\n  },\n  // Customer provided callbacks\n  eventHandlers?: SBUEventHandlers;\n};\n\ntype GetSdk = SendbirdChat | undefined;\ntype GetConnect = (\n  userId: string,\n  accessToken?: string\n) => Promise<User>;\ntype GetDisconnect = () => Promise<void>;\ntype GetUpdateUserInfo = (\n  nickName: string,\n  profileUrl?: string\n) => Promise<User>;\ntype GetCreateGroupChannel = (channelParams: GroupChannelCreateParams) => Promise<GroupChannel>;\ntype GetCreateOpenChannel = (channelParams: OpenChannelCreateParams) => Promise<OpenChannel>;\ntype GetGetGroupChannel = (\n  channelUrl: string,\n  isSelected?: boolean,\n) => Promise<GroupChannel>;\ntype GetGetOpenChannel = (\n  channelUrl: string,\n) => Promise<OpenChannel>;\ntype GetLeaveGroupChannel = (channel: GroupChannel) => Promise<void>;\ntype GetEnterOpenChannel = (channel: OpenChannel) => Promise<OpenChannel>;\ntype GetExitOpenChannel = (channel: OpenChannel) => Promise<void>;\ntype GetFreezeChannel = (channel: GroupChannel | OpenChannel) => Promise<void>;\ntype GetUnFreezeChannel = (channel: GroupChannel | OpenChannel) => Promise<void>;\ntype GetSendUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  userMessageParams: UserMessageCreateParams,\n) => UikitMessageHandler;\ntype GetSendFileMessage = (\n  channel: GroupChannel | OpenChannel,\n  fileMessageParams: FileMessageCreateParams\n) => UikitMessageHandler;\ntype GetUpdateUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  messageId: string | number,\n  params: UserMessageUpdateParams\n) => Promise<UserMessage>;\n// type getUpdateFileMessage = (\n//   channel: GroupChannel | OpenChannel,\n//   messageId: string | number,\n//   params: FileMessageUpdateParams,\n// ) => Promise<FileMessage>;\ntype GetDeleteMessage = (\n  channel: GroupChannel | OpenChannel,\n  message: CoreMessageType\n) => Promise<void>;\ntype GetResendUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  failedMessage: UserMessage\n) => Promise<UserMessage>;\ntype GetResendFileMessage = (\n  channel: GroupChannel | OpenChannel,\n  failedMessage: FileMessage\n) => Promise<FileMessage>;\n\nexport interface sendbirdSelectorsInterface {\n  getSdk: (store: SendBirdState) => GetSdk;\n  getConnect: (store: SendBirdState) => GetConnect\n  getDisconnect: (store: SendBirdState) => GetDisconnect;\n  getUpdateUserInfo: (store: SendBirdState) => GetUpdateUserInfo;\n  getCreateGroupChannel: (store: SendBirdState) => GetCreateGroupChannel;\n  getCreateOpenChannel: (store: SendBirdState) => GetCreateOpenChannel;\n  getGetGroupChannel: (store: SendBirdState) => GetGetGroupChannel;\n  getGetOpenChannel: (store: SendBirdState) => GetGetOpenChannel;\n  getLeaveGroupChannel: (store: SendBirdState) => GetLeaveGroupChannel;\n  getEnterOpenChannel: (store: SendBirdState) => GetEnterOpenChannel;\n  getExitOpenChannel: (store: SendBirdState) => GetExitOpenChannel;\n  getFreezeChannel: (store: SendBirdState) => GetFreezeChannel;\n  getUnFreezeChannel: (store: SendBirdState) => GetUnFreezeChannel;\n  getSendUserMessage: (store: SendBirdState) => GetSendUserMessage;\n  getSendFileMessage: (store: SendBirdState) => GetSendFileMessage;\n  getUpdateUserMessage: (store: SendBirdState) => GetUpdateUserMessage;\n  // getUpdateFileMessage: (store: SendBirdState) => GetUpdateFileMessage;\n  getDeleteMessage: (store: SendBirdState) => GetDeleteMessage;\n  getResendUserMessage: (store: SendBirdState) => GetResendUserMessage;\n  getResendFileMessage: (store: SendBirdState) => GetResendFileMessage;\n}\n\nexport interface CommonUIKitConfigProps {\n  replyType?: 'NONE' | 'QUOTE_REPLY' | 'THREAD';\n  isMentionEnabled?: boolean;\n  isReactionEnabled?: boolean;\n  disableUserProfile?: boolean;\n  isVoiceMessageEnabled?: boolean;\n  isTypingIndicatorEnabledOnChannelList?: boolean;\n  isMessageReceiptStatusEnabledOnChannelList?: boolean;\n  showSearchIcon?: boolean;\n}\n\nexport type UIKitOptions = PartialDeep<{\n  common: SBUConfig['common'];\n  groupChannel: SBUConfig['groupChannel']['channel'];\n  groupChannelList: SBUConfig['groupChannel']['channelList'];\n  groupChannelSettings: SBUConfig['groupChannel']['setting'];\n  openChannel: SBUConfig['openChannel']['channel'];\n}>;\n\nexport type SendbirdChatInitParams = Omit<SendbirdChatParams<Module[]>, 'appId'>;\nexport type CustomExtensionParams = Record<string, string>;\n"],"names":["Role","OPERATOR","NONE"],"mappings":"AAsCA;AACA;AACO,IAAMA,IAAI,GAAG;AAClBC,EAAAA,QAAQ,EAAE,UAAU;AACpBC,EAAAA,IAAI,EAAE,MAAA;;;;;"}