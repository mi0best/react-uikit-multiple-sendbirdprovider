{"version":3,"file":"context.js","sources":["../../src/modules/CreateOpenChannel/context/CreateOpenChannelProvider.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { OpenChannel, OpenChannelCreateParams, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { Logger } from '../../../lib/SendbirdState';\n\nexport interface CreateNewOpenChannelCallbackProps {\n  name: string;\n  coverUrlOrImage?: string;\n}\nexport interface CreateOpenChannelContextInterface extends CreateOpenChannelProviderProps {\n  sdk: SendbirdOpenChat;\n  sdkInitialized: boolean;\n  logger: Logger;\n  createNewOpenChannel: (props: CreateNewOpenChannelCallbackProps) => void;\n}\n\nconst CreateOpenChannelContext = React.createContext<CreateOpenChannelContextInterface>({\n  sdk: null,\n  sdkInitialized: false,\n  logger: null,\n  createNewOpenChannel: null,\n});\n\nexport interface CreateOpenChannelProviderProps {\n  className?: string;\n  children?: React.ReactElement;\n  onCreateChannel?: (channel: OpenChannel) => void;\n  onBeforeCreateChannel?: (params: OpenChannelCreateParams) => OpenChannelCreateParams;\n}\n\nexport const CreateOpenChannelProvider: React.FC<CreateOpenChannelProviderProps> = ({\n  className,\n  children,\n  onCreateChannel,\n  onBeforeCreateChannel,\n}: CreateOpenChannelProviderProps): React.ReactElement => {\n  const { stores, config } = useSendbirdStateContext();\n  const { logger } = config;\n  const sdk = stores?.sdkStore?.sdk || null;\n  const sdkInitialized = stores?.sdkStore?.initialized || false;\n\n  const createNewOpenChannel = useCallback((params: CreateNewOpenChannelCallbackProps): void => {\n    const { name, coverUrlOrImage } = params;\n    if (sdkInitialized) {\n      const params = {} as OpenChannelCreateParams;\n      params.operatorUserIds = [sdk?.currentUser?.userId];\n      params.name = name;\n      params.coverUrlOrImage = coverUrlOrImage;\n      sdk.openChannel.createChannel(onBeforeCreateChannel?.(params) || params)\n        .then((openChannel) => {\n          logger.info('CreateOpenChannel: Succeeded creating openChannel', openChannel);\n          onCreateChannel(openChannel);\n        })\n        .catch((err) => {\n          logger.warning('CreateOpenChannel: Failed creating openChannel', err);\n        });\n    }\n  }, [sdkInitialized, onBeforeCreateChannel, onCreateChannel]);\n\n  return (\n    <CreateOpenChannelContext.Provider\n      value={{\n        // interface\n        sdk: sdk,\n        sdkInitialized: sdkInitialized,\n        logger: logger,\n        createNewOpenChannel: createNewOpenChannel,\n      }}\n    >\n      <div className={`sendbird-create-open-channel ${className}`}>\n        {children}\n      </div>\n    </CreateOpenChannelContext.Provider>\n  );\n};\n\nexport const useCreateOpenChannelContext = (): CreateOpenChannelContextInterface => (\n  React.useContext(CreateOpenChannelContext)\n);\n"],"names":["CreateOpenChannelContext","React","createContext","sdk","sdkInitialized","logger","createNewOpenChannel","CreateOpenChannelProvider","_a","className","children","onCreateChannel","onBeforeCreateChannel","_d","useSendbirdStateContext","stores","config","_b","sdkStore","_c","initialized","useCallback","params","name","coverUrlOrImage","params_1","operatorUserIds","currentUser","userId","openChannel","createChannel","then","info","catch","err","warning","createElement","Provider","value","concat","useCreateOpenChannelContext","useContext"],"mappings":"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"}