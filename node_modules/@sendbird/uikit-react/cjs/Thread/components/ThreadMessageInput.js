'use strict';

var tslib_es6 = require('../../tslib.es6-c74b513f.js');
var React = require('react');
var groupChannel = require('@sendbird/chat/groupChannel');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
var ui_MessageInput = require('../../ui/MessageInput.js');
var _const = require('../../const-876980e8.js');
var Channel_components_SuggestedMentionList = require('../../Channel/components/SuggestedMentionList.js');
var Thread_context = require('../context.js');
var LocalizationContext = require('../../LocalizationContext-58b6ed7c.js');
var useHandleUploadFiles = require('../../useHandleUploadFiles-39e8d107.js');
var types = require('../../types-feda9656.js');
var Message_hooks_useDirtyGetMentions = require('../../Message/hooks/useDirtyGetMentions.js');
var utils = require('../../utils-9193a195.js');
require('../../withSendbird.js');
require('../../_rollupPluginBabelHelpers-f5b0dfb9.js');
require('prop-types');
require('../../const-c9e7a340.js');
require('../../ui/IconButton.js');
require('../../ui/Button.js');
require('../../index-b5a9b4b7.js');
require('../../stringSet-1539ac47.js');
require('../../types-d0d770c3.js');
require('../../index-cc2e05a4.js');
require('dompurify');
require('../../consts-b3c4f548.js');
require('../../consts-61d83828.js');
require('../../consts-b711321c.js');
require('../../ui/Icon.js');
require('../../index-dbe8dd84.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../index-54279ec2.js');
require('../../tokenize-d5286fa8.js');
require('../../index-e8928da6.js');
require('../../ui/Avatar.js');
require('../../ui/ImageRenderer.js');
require('../../uuid-9a117e16.js');
require('../../ChannelProvider-fc111e5f.js');
require('../../UserProfileContext-c6d7abb7.js');
require('../../index-3448df64.js');
require('@sendbird/chat/message');
require('../../useSendMultipleFilesMessage-d6a3d5cf.js');
require('../../pubSub/topics.js');
require('../../compareIds-28c6af62.js');
require('../../consts-f54b15c2.js');
require('../../resolvedReplyType-c4564ebe.js');
require('../context/types.js');
require('@sendbird/chat');
require('../../VoicePlayer/useVoicePlayer.js');
require('../../index-a95c4ab4.js');
require('../../VoiceRecorder/context.js');
require('../../ui/Modal.js');
require('react-dom');
require('../../utils-eb6d90e0.js');
require('../../index-b8ba4548.js');
require('../../MediaQueryContext-6141d955.js');
require('../../VoiceRecorder/useVoiceRecorder.js');
require('../../index-4c378655.js');
require('../../ui/PlaybackTime.js');
require('../../ui/ProgressBar.js');
require('../../ui/TextButton.js');
require('../../color-5bf5a8f5.js');
require('../../hooks/useModal.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var ThreadMessageInput = function (props, ref) {
  var _a;
  var className = props.className,
    renderFileUploadIcon = props.renderFileUploadIcon,
    renderVoiceMessageIcon = props.renderVoiceMessageIcon,
    renderSendMessageIcon = props.renderSendMessageIcon;
  var propsDisabled = props.disabled;
  var config = useSendbirdStateContext.useSendbirdStateContext().config;
  var stringSet = LocalizationContext.useLocalization().stringSet;
  var isMentionEnabled = config.isMentionEnabled,
    isOnline = config.isOnline,
    userMention = config.userMention,
    isVoiceMessageEnabled = config.isVoiceMessageEnabled,
    logger = config.logger;
  var threadContext = Thread_context.useThreadContext();
  var currentChannel = threadContext.currentChannel,
    parentMessage = threadContext.parentMessage,
    sendMessage = threadContext.sendMessage,
    sendFileMessage = threadContext.sendFileMessage,
    sendVoiceMessage = threadContext.sendVoiceMessage,
    sendMultipleFilesMessage = threadContext.sendMultipleFilesMessage,
    isMuted = threadContext.isMuted,
    isChannelFrozen = threadContext.isChannelFrozen,
    allThreadMessages = threadContext.allThreadMessages;
  var messageInputRef = React.useRef();
  var isMultipleFilesMessageEnabled = (_a = threadContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : config.isMultipleFilesMessageEnabled;
  var disabled = propsDisabled || isMuted || !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === types.Role.OPERATOR) && isChannelFrozen || parentMessage === null;
  // MFM
  var handleUploadFiles = useHandleUploadFiles.useHandleUploadFiles({
    sendFileMessage: sendFileMessage,
    sendMultipleFilesMessage: sendMultipleFilesMessage,
    quoteMessage: parentMessage
  }, {
    logger: logger
  })[0];
  // mention
  var _b = React.useState(''),
    mentionNickname = _b[0],
    setMentionNickname = _b[1];
  var _c = React.useState([]),
    mentionedUsers = _c[0],
    setMentionedUsers = _c[1];
  var _d = React.useState([]),
    mentionedUserIds = _d[0],
    setMentionedUserIds = _d[1];
  var _e = React.useState(null),
    selectedUser = _e[0],
    setSelectedUser = _e[1];
  var _f = React.useState([]),
    mentionSuggestedUsers = _f[0],
    setMentionSuggestedUsers = _f[1];
  var _g = React.useState(null),
    messageInputEvent = _g[0],
    setMessageInputEvent = _g[1];
  var _h = React.useState(false),
    showVoiceMessageInput = _h[0],
    setShowVoiceMessageInput = _h[1];
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !utils.isDisabledBecauseFrozen(currentChannel) && !utils.isDisabledBecauseMuted(currentChannel) && !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast);
  // Reset when changing channel
  React.useEffect(function () {
    setShowVoiceMessageInput(false);
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  var mentionNodes = Message_hooks_useDirtyGetMentions.useDirtyGetMentions({
    ref: ref || messageInputRef
  }, {
    logger: logger
  });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);
  React.useEffect(function () {
    setMentionedUsers(mentionedUsers.filter(function (_a) {
      var userId = _a.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast) && (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) !== types.Role.OPERATOR) {
    return null;
  }
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: "sendbird-thread-message-input".concat(showVoiceMessageInput ? '--voice-message' : '', " ").concat(className)
  }, displaySuggestedMentionList && /*#__PURE__*/React__default["default"].createElement(Channel_components_SuggestedMentionList, {
    targetNickname: mentionNickname,
    inputEvent: messageInputEvent
    // renderUserMentionItem={renderUserMentionItem}
    ,
    onUserItemClick: function (user) {
      if (user) {
        setMentionedUsers(tslib_es6.__spreadArray(tslib_es6.__spreadArray([], mentionedUsers, true), [user], false));
      }
      setMentionNickname('');
      setSelectedUser(user);
      setMessageInputEvent(null);
    },
    onFocusItemChange: function () {
      setMessageInputEvent(null);
    },
    onFetchUsers: function (users) {
      setMentionSuggestedUsers(users);
    },
    ableAddMention: ableMention,
    maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,
    maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount
  }), showVoiceMessageInput ? /*#__PURE__*/React__default["default"].createElement(useHandleUploadFiles.VoiceMessageInputWrapper, {
    channel: currentChannel,
    onSubmitClick: function (recordedFile, duration) {
      sendVoiceMessage(recordedFile, duration, parentMessage);
      setShowVoiceMessageInput(false);
    },
    onCancelClick: function () {
      setShowVoiceMessageInput(false);
    }
  }) : /*#__PURE__*/React__default["default"].createElement(ui_MessageInput, {
    className: "sendbird-thread-message-input__message-input",
    messageFieldId: "sendbird-message-input-text-field--thread",
    disabled: disabled,
    channel: currentChannel,
    setMentionedUsers: setMentionedUsers,
    channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,
    mentionSelectedUser: selectedUser,
    isMentionEnabled: isMentionEnabled,
    isVoiceMessageEnabled: isVoiceMessageEnabled,
    isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled,
    onVoiceMessageIconClick: function () {
      setShowVoiceMessageInput(true);
    },
    renderFileUploadIcon: renderFileUploadIcon,
    renderVoiceMessageIcon: renderVoiceMessageIcon,
    renderSendMessageIcon: renderSendMessageIcon,
    ref: ref || messageInputRef,
    placeholder: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isFrozen) && !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === types.Role.OPERATOR) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myMutedState) === groupChannel.MutedState.MUTED && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT || (allThreadMessages.length > 0 ? stringSet.THREAD__INPUT__REPLY_TO_THREAD : stringSet.THREAD__INPUT__REPLY_IN_THREAD),
    onStartTyping: function () {
      var _a;
      (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);
    },
    onSendMessage: function (_a) {
      var _b;
      var message = _a.message,
        mentionTemplate = _a.mentionTemplate;
      sendMessage({
        message: message,
        mentionedUsers: mentionedUsers,
        mentionTemplate: mentionTemplate,
        quoteMessage: parentMessage
      });
      setMentionNickname('');
      setMentionedUsers([]);
      (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);
    },
    onFileUpload: handleUploadFiles,
    onUserMentioned: function (user) {
      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
        setSelectedUser(null);
        setMentionNickname('');
      }
    },
    onMentionStringChange: function (mentionText) {
      setMentionNickname(mentionText);
    },
    onMentionedUserIdsUpdated: function (userIds) {
      setMentionedUserIds(userIds);
    },
    onKeyDown: function (e) {
      if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === _const.MessageInputKeys.Enter && ableMention || e.key === _const.MessageInputKeys.ArrowUp || e.key === _const.MessageInputKeys.ArrowDown)) {
        setMessageInputEvent(e);
        return true;
      }
      return false;
    }
  }));
};
var ThreadMessageInput$1 = /*#__PURE__*/React__default["default"].forwardRef(ThreadMessageInput);

module.exports = ThreadMessageInput$1;
//# sourceMappingURL=ThreadMessageInput.js.map
