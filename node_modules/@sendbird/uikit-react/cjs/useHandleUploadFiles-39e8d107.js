'use strict';

var React = require('react');
var LocalizationContext = require('./LocalizationContext-58b6ed7c.js');
var VoicePlayer_useVoicePlayer = require('./VoicePlayer/useVoicePlayer.js');
var VoiceRecorder_useVoiceRecorder = require('./VoiceRecorder/useVoiceRecorder.js');
var utils = require('./utils-9193a195.js');
var ui_VoiceMessgeInput = require('./index-4c378655.js');
var ui_Modal = require('./ui/Modal.js');
var ui_Button = require('./ui/Button.js');
var useSendbirdStateContext = require('./useSendbirdStateContext.js');
var consts = require('./consts-f54b15c2.js');
var VoicePlayer_context = require('./index-a95c4ab4.js');
var uuid = require('./uuid-9a117e16.js');
var types = require('./types-d0d770c3.js');
var index = require('./index-dbe8dd84.js');
var hooks_useModal = require('./hooks/useModal.js');
require('./tslib.es6-c74b513f.js');
require('./index-b5a9b4b7.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var VoiceMessageInputWrapper = function (_a) {
  var _b;
  var channel = _a.channel,
    onCancelClick = _a.onCancelClick,
    onSubmitClick = _a.onSubmitClick;
  var uuid$1 = React.useRef(uuid.uuidv4()).current;
  var _c = React.useState(null),
    audioFile = _c[0],
    setAudioFile = _c[1];
  var _d = React.useState(ui_VoiceMessgeInput.VoiceMessageInputStatus.READY_TO_RECORD),
    voiceInputState = _d[0],
    setVoiceInputState = _d[1];
  var _e = React.useState(false),
    isSubmitted = _e[0],
    setSubmit = _e[1];
  var _f = React.useState(false),
    isDisabled = _f[0],
    setDisabled = _f[1];
  var _g = React.useState(false),
    showModal = _g[0],
    setShowModal = _g[1];
  var stringSet = LocalizationContext.useLocalization().stringSet;
  var config = useSendbirdStateContext.useSendbirdStateContext().config;
  var minRecordingTime = ((_b = config === null || config === void 0 ? void 0 : config.voiceRecord) === null || _b === void 0 ? void 0 : _b.minRecordingTime) || consts.VOICE_RECORDER_DEFAULT_MIN;
  var _h = VoiceRecorder_useVoiceRecorder.useVoiceRecorder({
      onRecordingStarted: function () {
        setVoiceInputState(ui_VoiceMessgeInput.VoiceMessageInputStatus.RECORDING);
      },
      onRecordingEnded: function (audioFile) {
        setAudioFile(audioFile);
      }
    }),
    start = _h.start,
    stop = _h.stop,
    cancel = _h.cancel,
    recordingTime = _h.recordingTime,
    recordingStatus = _h.recordingStatus,
    recordingLimit = _h.recordingLimit;
  var voicePlayer = VoicePlayer_useVoicePlayer.useVoicePlayer({
    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,
    key: uuid$1,
    audioFile: audioFile
  });
  var play = voicePlayer.play,
    pause = voicePlayer.pause,
    playbackTime = voicePlayer.playbackTime,
    playingStatus = voicePlayer.playingStatus;
  var stopVoicePlayer = voicePlayer.stop;
  // disabled state: muted & frozen
  React.useEffect(function () {
    if (utils.isDisabledBecauseFrozen(channel) || utils.isDisabledBecauseMuted(channel)) {
      setDisabled(true);
    } else {
      setDisabled(false);
    }
  }, [channel === null || channel === void 0 ? void 0 : channel.myRole, channel === null || channel === void 0 ? void 0 : channel.isFrozen, channel === null || channel === void 0 ? void 0 : channel.myMutedState]);
  // call onSubmitClick when submit button is clicked and recorded audio file is created
  React.useEffect(function () {
    if (isSubmitted && audioFile) {
      onSubmitClick(audioFile, recordingTime);
      setSubmit(false);
      setAudioFile(null);
    }
  }, [isSubmitted, audioFile, recordingTime]);
  // operate which control button should be displayed
  React.useEffect(function () {
    if (audioFile) {
      if (recordingTime < minRecordingTime) {
        setVoiceInputState(ui_VoiceMessgeInput.VoiceMessageInputStatus.READY_TO_RECORD);
        setAudioFile(null);
      } else if (playingStatus === VoicePlayer_context.VOICE_PLAYER_STATUS.PLAYING) {
        setVoiceInputState(ui_VoiceMessgeInput.VoiceMessageInputStatus.PLAYING);
      } else {
        setVoiceInputState(ui_VoiceMessgeInput.VoiceMessageInputStatus.READY_TO_PLAY);
      }
    }
  }, [audioFile, recordingTime, playingStatus]);
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: "sendbird-voice-message-input-wrapper"
  }, /*#__PURE__*/React__default["default"].createElement(ui_VoiceMessgeInput.VoiceMessageInput, {
    currentValue: recordingStatus === VoiceRecorder_useVoiceRecorder.VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime,
    maximumValue: recordingStatus === VoiceRecorder_useVoiceRecorder.VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit,
    currentType: voiceInputState,
    onCancelClick: function () {
      onCancelClick();
      cancel();
      stopVoicePlayer();
    },
    onSubmitClick: function () {
      if (isDisabled) {
        setShowModal(true);
        setVoiceInputState(ui_VoiceMessgeInput.VoiceMessageInputStatus.READY_TO_RECORD);
      } else {
        stop();
        pause();
        setSubmit(true);
      }
    },
    onControlClick: function (type) {
      switch (type) {
        case ui_VoiceMessgeInput.VoiceMessageInputStatus.READY_TO_RECORD:
          {
            stopVoicePlayer();
            start();
            break;
          }
        case ui_VoiceMessgeInput.VoiceMessageInputStatus.RECORDING:
          {
            if (recordingTime >= minRecordingTime && !isDisabled) {
              stop();
            } else if (isDisabled) {
              cancel();
              setShowModal(true);
              setVoiceInputState(ui_VoiceMessgeInput.VoiceMessageInputStatus.READY_TO_RECORD);
            } else {
              cancel();
              setVoiceInputState(ui_VoiceMessgeInput.VoiceMessageInputStatus.READY_TO_RECORD);
            }
            break;
          }
        case ui_VoiceMessgeInput.VoiceMessageInputStatus.READY_TO_PLAY:
          {
            play();
            break;
          }
        case ui_VoiceMessgeInput.VoiceMessageInputStatus.PLAYING:
          {
            pause();
            break;
          }
      }
    }
  }), showModal && /*#__PURE__*/React__default["default"].createElement(ui_Modal.Modal, {
    className: "sendbird-voice-message-input-wrapper-alert",
    titleText: utils.isDisabledBecauseMuted(channel) ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN,
    hideFooter: true,
    isCloseOnClickOutside: true,
    onCancel: function () {
      setShowModal(false);
      onCancelClick();
    }
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "sendbird-voice-message-input-wrapper-alert__body"
  }, /*#__PURE__*/React__default["default"].createElement(ui_Button["default"], {
    className: "sendbird-voice-message-input-wrapper-alert__body__ok-button",
    type: types.ButtonTypes.PRIMARY,
    size: types.ButtonSizes.BIG,
    onClick: function () {
      setShowModal(false);
      onCancelClick();
    }
  }, stringSet.BUTTON__OK))));
};

var useHandleUploadFiles = function (_a, _b) {
  var sendFileMessage = _a.sendFileMessage,
    sendMultipleFilesMessage = _a.sendMultipleFilesMessage,
    quoteMessage = _a.quoteMessage;
  var logger = _b.logger;
  var stringSet = LocalizationContext.useLocalization().stringSet;
  var config = useSendbirdStateContext.useSendbirdStateContext().config;
  var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;
  var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;
  var openModal = hooks_useModal.useGlobalModalContext().openModal;
  var handleUploadFiles = React.useCallback(function (fileList) {
    var files = Array.from(fileList);
    // Validate Paremeters
    if (!sendFileMessage || !sendMultipleFilesMessage) {
      logger.warning('Channel|useHandleUploadFiles: required functions are undefined', {
        sendFileMessage: sendFileMessage,
        sendMultipleFilesMessage: sendMultipleFilesMessage
      });
      return;
    }
    if (files.length === 0) {
      logger.warning('Channel|useHandleUploadFiles: given file list is empty.', {
        files: files
      });
      return;
    }
    if (files.length > uikitMultipleFilesMessageLimit) {
      logger.info("Channel|useHandleUploadFiles: Cannot upload files more than ".concat(uikitMultipleFilesMessageLimit));
      openModal({
        modalProps: {
          titleText: "Up to ".concat(uikitMultipleFilesMessageLimit, " files can be attached."),
          hideFooter: true
        },
        childElement: function (_a) {
          var closeModal = _a.closeModal;
          return /*#__PURE__*/React__default["default"].createElement(ui_Modal.ModalFooter, {
            type: types.ButtonTypes.PRIMARY,
            submitText: stringSet.BUTTON__OK,
            hideCancelButton: true,
            onCancel: closeModal,
            onSubmit: closeModal
          });
        }
      });
      return;
    }
    if (files.some(function (file) {
      return file.size > uikitUploadSizeLimit;
    })) {
      // The default value of uikitUploadSizeLimit is 26MB
      logger.info("Channel|useHandleUploadFiles: Cannot upload file size exceeding ".concat(uikitUploadSizeLimit));
      var ONE_MiB = 1024 * 1024;
      openModal({
        modalProps: {
          titleText: "The maximum size per file is ".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB), " MB."),
          hideFooter: true
        },
        childElement: function (_a) {
          var closeModal = _a.closeModal;
          return /*#__PURE__*/React__default["default"].createElement(ui_Modal.ModalFooter, {
            type: types.ButtonTypes.PRIMARY,
            submitText: stringSet.BUTTON__OK,
            hideCancelButton: true,
            onCancel: closeModal,
            onSubmit: closeModal
          });
        }
      });
      return;
    }
    if (files.length === 1) {
      logger.info('Channel|useHandleUploadFiles: sending one file.');
      var file = files[0];
      sendFileMessage(file, quoteMessage);
    } else if (files.length > 1) {
      logger.info('Channel|useHandleUploadFiles: sending multiple files.');
      var imageFiles_1 = [];
      var otherFiles_1 = [];
      files.forEach(function (file) {
        if (index.isImage(file.type)) {
          imageFiles_1.push(file);
        } else {
          otherFiles_1.push(file);
        }
      });
      return otherFiles_1.reduce(function (previousPromise, item) {
        return previousPromise.then(function () {
          return sendFileMessage(item, quoteMessage);
        });
      }, function () {
        if (imageFiles_1.length === 0) {
          return Promise.resolve();
        } else if (imageFiles_1.length === 1) {
          return sendFileMessage(imageFiles_1[0], quoteMessage);
        } else {
          return sendMultipleFilesMessage(imageFiles_1, quoteMessage);
        }
      }());
    }
  }, [sendFileMessage, sendMultipleFilesMessage, quoteMessage]);
  return [handleUploadFiles];
};

exports.VoiceMessageInputWrapper = VoiceMessageInputWrapper;
exports.useHandleUploadFiles = useHandleUploadFiles;
//# sourceMappingURL=useHandleUploadFiles-39e8d107.js.map
