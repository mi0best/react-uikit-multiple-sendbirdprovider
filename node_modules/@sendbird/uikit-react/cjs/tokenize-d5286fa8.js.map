{"version":3,"file":"tokenize-d5286fa8.js","sources":["../../src/modules/Message/consts.ts","../../src/modules/Message/utils/tokens/types.ts","../../src/modules/Message/utils/tokens/tokenize.ts"],"sourcesContent":["export const USER_MENTION_PREFIX = '@';\n","import { User } from '@sendbird/chat';\nimport { ObjectValues } from '../../../../utils/typeHelpers/objectValues';\n\nexport const TOKEN_TYPES = {\n  string: 'string',\n  mention: 'mention',\n  url: 'url',\n  undetermined: 'undetermined',\n} as const;\n\nexport type TokenType = ObjectValues<typeof TOKEN_TYPES>;\n\nexport type StringToken = {\n  type: typeof TOKEN_TYPES.string;\n  value: string;\n};\n\nexport type MentionToken = {\n  type: TokenType;\n  value: string;\n  userId: string;\n};\n\nexport type UrlToken = {\n  type: typeof TOKEN_TYPES.url;\n  value: string;\n};\n\nexport type UndeterminedToken = {\n  type: typeof TOKEN_TYPES.undetermined;\n  value: string;\n};\n\nexport type Token = StringToken | MentionToken | UrlToken | UndeterminedToken;\n\nexport type TokenParams = {\n  messageText: string;\n  mentionedUsers?: User[];\n  templatePrefix?: string;\n};\n\nexport type IdentifyMentionsType = {\n  tokens: UndeterminedToken[];\n  mentionedUsers: User[];\n  templatePrefix: string;\n};\n","import { User } from '@sendbird/chat';\nimport { USER_MENTION_PREFIX } from '../../consts';\nimport { IdentifyMentionsType, MentionToken, Token, TOKEN_TYPES, TokenParams, UndeterminedToken } from './types';\nimport { isUrl } from '../../../../utils';\n\nexport function getUserMentionRegex(mentionedUsers: User[], templatePrefix_: string): RegExp {\n  const templatePrefix = templatePrefix_ || USER_MENTION_PREFIX;\n\n  return RegExp(`(${mentionedUsers.map(u => {\n    const userId = u.userId.replace(\n      // If user.id includes these patterns, need to convert it into an escaped one\n      /([.*+?^${}()|[\\]\\\\])/g,\n      '\\\\$1');\n      /**\n       * //{ And //} are also for escaping\n       * because curly braces `{}` are metacharacters in regular expressions used to specify repetition\n       */\n    return `${templatePrefix}\\\\{${userId}\\\\}`;\n  }).join('|')})`, 'g');\n}\n\nexport function identifyMentions({\n  tokens,\n  mentionedUsers = [],\n  templatePrefix = USER_MENTION_PREFIX,\n}: IdentifyMentionsType): (MentionToken | UndeterminedToken)[] {\n  if (!mentionedUsers?.length) {\n    return tokens;\n  }\n  const userMentionRegex = getUserMentionRegex(mentionedUsers, templatePrefix);\n  const results: (UndeterminedToken | MentionToken)[] = tokens.map((token) => {\n    // if the token is not undetermined, return it as is\n    // is kinda unnecessary with TS, but just in case\n    if (token.type !== TOKEN_TYPES.undetermined) {\n      return token;\n    }\n    const { value } = token;\n    const parts = value.split(userMentionRegex);\n\n    const tokens = parts.map((part) => {\n      if (part.match(userMentionRegex)) {\n        const matchedUser = mentionedUsers.find((user) => `@{${user?.userId}}` === part);\n        const nickname = matchedUser?.nickname || '(No name)';\n        return { value: nickname, type: TOKEN_TYPES.mention, userId: matchedUser?.userId };\n      } else {\n        return { value: part, type: TOKEN_TYPES.undetermined };\n      }\n    });\n    return tokens;\n  }).flat();\n  return results;\n}\n\nexport function identifyUrlsAndStrings(token: Token[]): Token[] {\n  const results: Token[] = token.map((token) => {\n    if (token.type !== TOKEN_TYPES.undetermined) {\n      return token;\n    }\n    const { value = '' } = token;\n    const parts = value.split(' ');\n    const tokens = parts.map((part) => {\n      if (isUrl(part)) {\n        return { value: part, type: TOKEN_TYPES.url };\n      } else {\n        return { value: part, type: TOKEN_TYPES.string };\n      }\n    });\n    return tokens;\n  }).flat();\n\n  return results;\n}\n\nexport function combineNearbyStrings(tokens: Token[]): Token[] {\n  const results: Token[] = tokens.reduce((acc, token) => {\n    const lastToken = acc[acc.length - 1];\n    if (lastToken?.type === TOKEN_TYPES.string && token.type === TOKEN_TYPES.string) {\n      lastToken.value = `${lastToken.value} ${token.value}`;\n      return acc;\n    }\n    return [...acc, token];\n  }, []);\n  return results;\n}\n\n/**\n * Converts text into set of rich tokens\n */\nexport function tokenizeMessage({\n  messageText,\n  mentionedUsers = [],\n  templatePrefix = USER_MENTION_PREFIX,\n}: TokenParams): Token[] {\n  // mention can be squeezed-in(no-space-between) with other mentions and urls\n  // if no users are mentioned, return the messageText as a single token\n  const partialResult = [{\n    type: TOKEN_TYPES.undetermined,\n    value: messageText,\n  }];\n\n  // order is important because we want to identify mentions first\n  // identifyMentions will return a token with type mention or undetermined\n  const partialWithMentions = identifyMentions({\n    tokens: partialResult,\n    mentionedUsers,\n    templatePrefix,\n  });\n  const partialsWithUrlsAndMentions = identifyUrlsAndStrings(partialWithMentions);\n  const result = combineNearbyStrings(partialsWithUrlsAndMentions);\n\n  return result;\n}\n\n/**\n * Don't need to use this util in DOM element since the white spaces will be kept as is,\n * but will need if the text is wrapped \\w React.Fragement or </>\n * @link https://sendbird.slack.com/archives/GPGHESTL3/p1681180484341369\n * Or!!! -> convert any space or tab in leading/trailing to nbsp\n * to preserve the leading & trailing white spaces\n */\nexport function getWhiteSpacePreservedText(text: string): string {\n  const NON_BREAKING_SPACE = '\\u00A0';\n  // Split the input string into lines\n  const lines = text.split('\\n');\n\n  // Process each line and convert leading and trailing white spaces to \"\\u00A0\"\n  const processedLines = lines.map((line) => {\n    const leadingWhitespace = line.match(/^\\s*/)?.[0] || '';\n    const trailingWhitespace = line.match(/\\s*$/)?.[0] || '';\n\n    const convertedLeadingWhitespace = leadingWhitespace.replace(/ /g, NON_BREAKING_SPACE);\n    const convertedTrailingWhitespace = trailingWhitespace.replace(/ /g, NON_BREAKING_SPACE);\n\n    return convertedLeadingWhitespace + line.trim() + convertedTrailingWhitespace;\n  });\n\n  // Combine the processed lines into a new string with \"\\n\"\n  const result = processedLines.join('\\n');\n\n  return result;\n}\n"],"names":["USER_MENTION_PREFIX","TOKEN_TYPES","string","mention","url","undetermined","getUserMentionRegex","mentionedUsers","templatePrefix_","templatePrefix","RegExp","concat","map","u","userId","replace","join","identifyMentions","_a","tokens","_b","_c","length","userMentionRegex","results","token","type","value","parts","split","part","match","matchedUser","find","user","nickname","flat","identifyUrlsAndStrings","isUrl","combineNearbyStrings","reduce","acc","lastToken","__spreadArray","tokenizeMessage","messageText","partialResult","partialWithMentions","partialsWithUrlsAndMentions","result","getWhiteSpacePreservedText","text","NON_BREAKING_SPACE","lines","processedLines","line","leadingWhitespace","trailingWhitespace","convertedLeadingWhitespace","convertedTrailingWhitespace","trim"],"mappings":"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"}