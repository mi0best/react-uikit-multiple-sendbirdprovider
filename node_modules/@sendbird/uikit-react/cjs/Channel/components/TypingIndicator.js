'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var groupChannel = require('@sendbird/chat/groupChannel');
var LocalizationContext = require('../../LocalizationContext-58b6ed7c.js');
var uuid = require('../../uuid-9a117e16.js');
var ui_Label = require('../../index-b5a9b4b7.js');
var Channel_context = require('../../ChannelProvider-fc111e5f.js');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
require('../../stringSet-1539ac47.js');
require('../../index-e8928da6.js');
require('prop-types');
require('../../UserProfileContext-c6d7abb7.js');
require('../../const-c9e7a340.js');
require('../../utils-9193a195.js');
require('../../tslib.es6-c74b513f.js');
require('../../index-3448df64.js');
require('../../index-dbe8dd84.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../index-54279ec2.js');
require('@sendbird/chat/message');
require('../../useSendMultipleFilesMessage-d6a3d5cf.js');
require('../../pubSub/topics.js');
require('../../compareIds-28c6af62.js');
require('../../_rollupPluginBabelHelpers-f5b0dfb9.js');
require('../../consts-f54b15c2.js');
require('../../resolvedReplyType-c4564ebe.js');
require('../../withSendbird.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var TypingIndicatorText = function (_a) {
  var members = _a.members;
  var stringSet = React.useContext(LocalizationContext.LocalizationContext).stringSet;
  if (!members || members.length === 0) {
    return '';
  }
  if (members && members.length === 1) {
    return "".concat(members[0].nickname, " ").concat(stringSet.TYPING_INDICATOR__IS_TYPING);
  }
  if (members && members.length === 2) {
    return "".concat(members[0].nickname, " ").concat(stringSet.TYPING_INDICATOR__AND, " ").concat(members[1].nickname, " ").concat(stringSet.TYPING_INDICATOR__ARE_TYPING);
  }
  return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;
};
var TypingIndicator = function () {
  var _a, _b, _c;
  var channelUrl = Channel_context.useChannelContext().channelUrl;
  var globalStore = useSendbirdStateContext.useSendbirdStateContext();
  var sb = (_b = (_a = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;
  var logger = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _c === void 0 ? void 0 : _c.logger;
  var _d = React.useState(uuid.uuidv4()),
    handlerId = _d[0],
    setHandlerId = _d[1];
  var _e = React.useState([]),
    typingMembers = _e[0],
    setTypingMembers = _e[1];
  React.useEffect(function () {
    var _a;
    if ((_a = sb === null || sb === void 0 ? void 0 : sb.groupChannel) === null || _a === void 0 ? void 0 : _a.addGroupChannelHandler) {
      sb.groupChannel.removeGroupChannelHandler(handlerId);
      var newHandlerId = uuid.uuidv4();
      var handler = new groupChannel.GroupChannelHandler({
        onTypingStatusUpdated: function (groupChannel) {
          // there is a possible warning in here - setState called after unmount
          logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);
          if (groupChannel.url === channelUrl) {
            var members = groupChannel.getTypingUsers();
            setTypingMembers(members);
          }
        }
      });
      sb.groupChannel.addGroupChannelHandler(newHandlerId, handler);
      setHandlerId(newHandlerId);
    }
    return function () {
      var _a;
      setTypingMembers([]);
      if ((_a = sb === null || sb === void 0 ? void 0 : sb.groupChannel) === null || _a === void 0 ? void 0 : _a.removeGroupChannelHandler) {
        sb.groupChannel.removeGroupChannelHandler(handlerId);
      }
    };
  }, [channelUrl]);
  return /*#__PURE__*/React__default["default"].createElement(ui_Label.Label, {
    className: "sendbird-conversation__footer__typing-indicator__text",
    type: ui_Label.LabelTypography.CAPTION_2,
    color: ui_Label.LabelColors.ONBACKGROUND_2
  }, /*#__PURE__*/React__default["default"].createElement(TypingIndicatorText, {
    members: typingMembers
  }));
};

exports.TypingIndicatorText = TypingIndicatorText;
exports["default"] = TypingIndicator;
//# sourceMappingURL=TypingIndicator.js.map
