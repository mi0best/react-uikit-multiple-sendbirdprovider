'use strict';

var tslib_es6 = require('../../tslib.es6-c74b513f.js');
var React = require('react');
var utils = require('../../utils-9193a195.js');
var ui_MessageInput = require('../../ui/MessageInput.js');
var ui_QuoteMessageInput = require('../../ui/QuoteMessageInput.js');
var LocalizationContext = require('../../LocalizationContext-58b6ed7c.js');
var Channel_context = require('../../ChannelProvider-fc111e5f.js');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
var Channel_components_SuggestedMentionList = require('./SuggestedMentionList.js');
var _const = require('../../const-876980e8.js');
var useHandleUploadFiles = require('../../useHandleUploadFiles-39e8d107.js');
var Message_hooks_useDirtyGetMentions = require('../../Message/hooks/useDirtyGetMentions.js');
var MediaQueryContext = require('../../MediaQueryContext-6141d955.js');
require('../../index-3448df64.js');
require('../../index-e8928da6.js');
require('../../index-dbe8dd84.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../index-54279ec2.js');
require('@sendbird/chat/message');
require('../../_rollupPluginBabelHelpers-f5b0dfb9.js');
require('prop-types');
require('../../const-c9e7a340.js');
require('../../ui/IconButton.js');
require('../../ui/Button.js');
require('../../index-b5a9b4b7.js');
require('../../stringSet-1539ac47.js');
require('../../types-d0d770c3.js');
require('../../index-cc2e05a4.js');
require('dompurify');
require('../../consts-b3c4f548.js');
require('../../consts-61d83828.js');
require('../../consts-b711321c.js');
require('../../ui/Icon.js');
require('../../tokenize-d5286fa8.js');
require('../../ui/ImageRenderer.js');
require('../../utils-93ca9d57.js');
require('../../UserProfileContext-c6d7abb7.js');
require('../../useSendMultipleFilesMessage-d6a3d5cf.js');
require('../../pubSub/topics.js');
require('../../compareIds-28c6af62.js');
require('@sendbird/chat/groupChannel');
require('../../uuid-9a117e16.js');
require('../../consts-f54b15c2.js');
require('../../resolvedReplyType-c4564ebe.js');
require('../../withSendbird.js');
require('../../ui/Avatar.js');
require('../../Thread/context.js');
require('../../Thread/context/types.js');
require('@sendbird/chat');
require('../../VoicePlayer/useVoicePlayer.js');
require('../../index-a95c4ab4.js');
require('../../VoiceRecorder/context.js');
require('../../ui/Modal.js');
require('react-dom');
require('../../utils-eb6d90e0.js');
require('../../index-b8ba4548.js');
require('../../VoiceRecorder/useVoiceRecorder.js');
require('../../index-4c378655.js');
require('../../ui/PlaybackTime.js');
require('../../ui/ProgressBar.js');
require('../../ui/TextButton.js');
require('../../color-5bf5a8f5.js');
require('../../hooks/useModal.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var MessageInputWrapper = function (props, ref) {
  var _a;
  var value = props.value,
    renderFileUploadIcon = props.renderFileUploadIcon,
    renderVoiceMessageIcon = props.renderVoiceMessageIcon,
    renderSendMessageIcon = props.renderSendMessageIcon;
  var propDisabled = props.disabled;
  var channelContext = Channel_context.useChannelContext();
  var currentGroupChannel = channelContext.currentGroupChannel,
    initialized = channelContext.initialized,
    quoteMessage = channelContext.quoteMessage,
    sendMessage = channelContext.sendMessage,
    sendFileMessage = channelContext.sendFileMessage,
    sendVoiceMessage = channelContext.sendVoiceMessage,
    sendMultipleFilesMessage = channelContext.sendMultipleFilesMessage,
    setQuoteMessage = channelContext.setQuoteMessage,
    messageInputRef = channelContext.messageInputRef,
    renderUserMentionItem = channelContext.renderUserMentionItem;
  var globalStore = useSendbirdStateContext.useSendbirdStateContext();
  var isMobile = MediaQueryContext.useMediaQueryContext().isMobile;
  var channel = currentGroupChannel;
  var _b = globalStore.config,
    isOnline = _b.isOnline,
    isMentionEnabled = _b.isMentionEnabled,
    userMention = _b.userMention,
    isVoiceMessageEnabled = _b.isVoiceMessageEnabled,
    logger = _b.logger;
  var isMultipleFilesMessageEnabled = (_a = channelContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : globalStore.config.isMultipleFilesMessageEnabled;
  var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10;
  var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15;
  var stringSet = React.useContext(LocalizationContext.LocalizationContext).stringSet;
  var _c = React.useState(''),
    mentionNickname = _c[0],
    setMentionNickname = _c[1];
  // todo: set type
  var _d = React.useState([]),
    mentionedUsers = _d[0],
    setMentionedUsers = _d[1];
  var _e = React.useState([]),
    mentionedUserIds = _e[0],
    setMentionedUserIds = _e[1];
  var _f = React.useState(null),
    selectedUser = _f[0],
    setSelectedUser = _f[1];
  var _g = React.useState([]),
    mentionSuggestedUsers = _g[0],
    setMentionSuggestedUsers = _g[1];
  var _h = React.useState(null),
    messageInputEvent = _h[0],
    setMessageInputEvent = _h[1];
  var _j = React.useState(false),
    showVoiceMessageInput = _j[0],
    setShowVoiceMessageInput = _j[1];
  var disabled = propDisabled || !initialized || utils.isDisabledBecauseFrozen(channel) || utils.isDisabledBecauseMuted(channel) || !isOnline;
  var isOperator = utils.isOperator(channel);
  var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !utils.isDisabledBecauseFrozen(channel) && !utils.isDisabledBecauseMuted(channel) && !isBroadcast;
  // Reset when channel changes
  React.useEffect(function () {
    setMentionNickname('');
    setMentionedUsers([]);
    setMentionedUserIds([]);
    setSelectedUser(null);
    setMentionSuggestedUsers([]);
    setMessageInputEvent(null);
    setShowVoiceMessageInput(false);
  }, [channel === null || channel === void 0 ? void 0 : channel.url]);
  var mentionNodes = Message_hooks_useDirtyGetMentions.useDirtyGetMentions({
    ref: ref || messageInputRef
  }, {
    logger: logger
  });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
  React.useEffect(function () {
    setMentionedUsers(mentionedUsers.filter(function (_a) {
      var userId = _a.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  // MFM
  var handleUploadFiles = useHandleUploadFiles.useHandleUploadFiles({
    sendFileMessage: sendFileMessage,
    sendMultipleFilesMessage: sendMultipleFilesMessage,
    quoteMessage: quoteMessage
  }, {
    logger: logger
  })[0];
  // broadcast channel + not operator
  if (isBroadcast && !isOperator) {
    return null;
  }
  // other conditions
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: "sendbird-message-input-wrapper".concat(showVoiceMessageInput ? '--voice-message' : '')
  }, displaySuggestedMentionList && /*#__PURE__*/React__default["default"].createElement(Channel_components_SuggestedMentionList, {
    targetNickname: mentionNickname,
    inputEvent: messageInputEvent,
    renderUserMentionItem: renderUserMentionItem,
    onUserItemClick: function (user) {
      if (user) {
        setMentionedUsers(tslib_es6.__spreadArray(tslib_es6.__spreadArray([], mentionedUsers, true), [user], false));
      }
      setMentionNickname('');
      setSelectedUser(user);
      setMessageInputEvent(null);
    },
    onFocusItemChange: function () {
      setMessageInputEvent(null);
    },
    onFetchUsers: function (users) {
      setMentionSuggestedUsers(users);
    },
    ableAddMention: ableMention,
    maxMentionCount: maxUserMentionCount,
    maxSuggestionCount: maxUserSuggestionCount
  }), quoteMessage && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "sendbird-message-input-wrapper__quote-message-input"
  }, /*#__PURE__*/React__default["default"].createElement(ui_QuoteMessageInput, {
    replyingMessage: quoteMessage,
    onClose: function () {
      return setQuoteMessage(null);
    }
  })), showVoiceMessageInput ? /*#__PURE__*/React__default["default"].createElement(useHandleUploadFiles.VoiceMessageInputWrapper, {
    channel: channel,
    onSubmitClick: function (recordedFile, duration) {
      sendVoiceMessage(recordedFile, duration, quoteMessage);
      setQuoteMessage(null);
      setShowVoiceMessageInput(false);
    },
    onCancelClick: function () {
      setShowVoiceMessageInput(false);
    }
  }) : /*#__PURE__*/React__default["default"].createElement(ui_MessageInput, {
    className: "sendbird-message-input-wrapper__message-input",
    value: value,
    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,
    mentionSelectedUser: selectedUser,
    isMentionEnabled: isMentionEnabled,
    isVoiceMessageEnabled: isVoiceMessageEnabled,
    isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled,
    onVoiceMessageIconClick: function () {
      setShowVoiceMessageInput(true);
    },
    setMentionedUsers: setMentionedUsers,
    channel: channel,
    placeholder: quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER || utils.isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || utils.isDisabledBecauseMuted(channel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED),
    ref: ref || messageInputRef,
    disabled: disabled,
    renderFileUploadIcon: renderFileUploadIcon,
    renderSendMessageIcon: renderSendMessageIcon,
    renderVoiceMessageIcon: renderVoiceMessageIcon,
    onStartTyping: function () {
      channel === null || channel === void 0 ? void 0 : channel.startTyping();
    },
    onSendMessage: function (_a) {
      var _b;
      var message = _a.message,
        mentionTemplate = _a.mentionTemplate;
      sendMessage({
        message: message,
        quoteMessage: quoteMessage,
        mentionedUsers: mentionedUsers,
        mentionTemplate: mentionTemplate
      });
      setMentionNickname('');
      setMentionedUsers([]);
      setQuoteMessage(null);
      (_b = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b === void 0 ? void 0 : _b.call(channel);
    },
    onFileUpload: function (fileList) {
      handleUploadFiles(fileList);
      setQuoteMessage(null);
    },
    onUserMentioned: function (user) {
      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
        setSelectedUser(null);
        setMentionNickname('');
      }
    },
    onMentionStringChange: function (mentionText) {
      setMentionNickname(mentionText);
    },
    onMentionedUserIdsUpdated: function (userIds) {
      setMentionedUserIds(userIds);
    },
    onKeyDown: function (e) {
      if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === _const.MessageInputKeys.Enter && ableMention || e.key === _const.MessageInputKeys.ArrowUp || e.key === _const.MessageInputKeys.ArrowDown)) {
        setMessageInputEvent(e);
        return true;
      }
      return false;
    }
  }));
};
var MessageInputWrapper$1 = /*#__PURE__*/React__default["default"].forwardRef(MessageInputWrapper);

module.exports = MessageInputWrapper$1;
//# sourceMappingURL=MessageInput.js.map
