{"version":3,"file":"OpenChannelListProvider-a8560978.js","sources":["../../src/modules/OpenChannelList/context/OpenChannelListInterfaces.ts","../../src/modules/OpenChannelList/context/dux/actionTypes.ts","../../src/modules/OpenChannelList/context/dux/reducer.ts","../../src/modules/OpenChannelList/context/dux/initialState.ts","../../src/modules/OpenChannelList/context/hooks/useFetchNextCallback.ts","../../src/modules/OpenChannelList/context/hooks/createChannelListQuery.ts","../../src/modules/OpenChannelList/context/hooks/useSetupOpenChannelList.ts","../../src/modules/OpenChannelList/context/hooks/useRefreshOpenChannelList.ts","../../src/modules/OpenChannelList/context/OpenChannelListProvider.tsx"],"sourcesContent":["import { OpenChannel } from '@sendbird/chat/openChannel';\nimport { Dispatch } from 'react';\nimport { Logger } from '../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from './dux/actionTypes';\nimport { FetchNextCallbackType } from './hooks/useFetchNextCallback';\n\nexport interface UserFilledOpenChannelListQuery {\n  // https://sendbird.com/docs/chat/v4/javascript/ref/interfaces/_sendbird_chat_openChannel.OpenChannelListQueryParams.html\n  customTypes?: Array<string>;\n  includeFrozen?: boolean;\n  includeMetaData?: boolean;\n  limit?: number;\n  nameKeyword?: string;\n  urlKeyword?: string;\n}\n\nexport enum OpenChannelListFetchingStatus {\n  EMPTY = 'EMPTY',\n  FETCHING = 'FETCHING',\n  DONE = 'DONE',\n  ERROR = 'ERROR',\n}\n\nexport type OnOpenChannelSelected = (channel: OpenChannel, e?: React.MouseEvent<HTMLDivElement | unknown>) => void;\nexport type OpenChannelListDispatcherType = Dispatch<{ type: OpenChannelListActionTypes, payload: any }>;\n\nexport interface OpenChannelListProviderProps {\n  className?: string;\n  children?: React.ReactElement;\n  queries?: { openChannelListQuery?: UserFilledOpenChannelListQuery };\n  onChannelSelected?: OnOpenChannelSelected;\n}\n\nexport interface OpenChannelListProviderInterface extends OpenChannelListProviderProps {\n  logger: Logger;\n  currentChannel: OpenChannel;\n  allChannels: Array<OpenChannel>;\n  fetchingStatus: OpenChannelListFetchingStatus;\n  customOpenChannelListQuery?: UserFilledOpenChannelListQuery;\n  fetchNextChannels: FetchNextCallbackType;\n  refreshOpenChannelList: () => void;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n","enum OpenChannelListActionTypes {\n  // actions\n  INIT_OPEN_CHANNEL_LIST_START = 'INIT_OPEN_CHANNEL_LIST_START',\n  INIT_OPEN_CHANNEL_LIST_SUCCESS = 'INIT_OPEN_CHANNEL_LIST_SUCCESS',\n  INIT_OPEN_CHANNEL_LIST_FAILURE = 'INIT_OPEN_CHANNEL_LIST_FAILURE',\n  RESET_OPEN_CHANNEL_LIST = 'RESET_OPEN_CHANNEL_LIST',\n  FETCH_OPEN_CHANNEL_LIST_START = 'FETCH_OPEN_CHANNEL_LIST_START',\n  FETCH_OPEN_CHANNEL_LIST_SUCCESS = 'FETCH_OPEN_CHANNEL_LIST_SUCCESS',\n  FETCH_OPEN_CHANNEL_LIST_FAILURE = 'FETCH_OPEN_CHANNEL_LIST_FAILURE',\n  CREATE_OPEN_CHANNEL = 'CREATE_OPEN_CHANNEL',\n  SET_CURRENT_OPEN_CHANNEL = 'SET_CURRENT_OPEN_CHANNEL',\n  UPDATE_OPEN_CHANNEL_LIST_QUERY = 'UPDATE_OPEN_CHANNEL_LIST_QUERY',\n  UPDATE_OPEN_CHANNEL = 'UPDATE_OPEN_CHANNEL',\n}\n\nexport default OpenChannelListActionTypes;\n","import { OpenChannelListFetchingStatus } from '../OpenChannelListInterfaces';\nimport actionTypes from './actionTypes';\nimport { OpenChannelListInitialInterface } from './initialState';\n\nexport default function reducer(\n  state: OpenChannelListInitialInterface,\n  action: { type: actionTypes, payload: any },\n): OpenChannelListInitialInterface {\n  switch (action.type) {\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_START: {\n      return {\n        ...state,\n        fetchingStatus: OpenChannelListFetchingStatus.FETCHING,\n      };\n    }\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS: {\n      const channelList = action.payload;\n      return {\n        ...state,\n        allChannels: channelList,\n        fetchingStatus: channelList.length > 0\n          ? OpenChannelListFetchingStatus.DONE\n          : OpenChannelListFetchingStatus.EMPTY,\n      };\n    }\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE: {\n      return {\n        ...state,\n        allChannels: [],\n        fetchingStatus: OpenChannelListFetchingStatus.ERROR,\n      };\n    }\n    case actionTypes.RESET_OPEN_CHANNEL_LIST: {\n      return {\n        ...state,\n        allChannels: [],\n        fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n      };\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_START: {\n      return state;\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_SUCCESS: {\n      return {\n        ...state,\n        allChannels: [...state.allChannels, ...action.payload],\n      };\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_FAILURE: {\n      return state;\n    }\n    case actionTypes.CREATE_OPEN_CHANNEL: {\n      return {\n        ...state,\n        currentChannel: action.payload,\n        allChannels: [action.payload, ...state.allChannels],\n      };\n    }\n    case actionTypes.SET_CURRENT_OPEN_CHANNEL: {\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    }\n    case actionTypes.UPDATE_OPEN_CHANNEL_LIST_QUERY: {\n      return {\n        ...state,\n        channelListQuery: action?.payload,\n      };\n    }\n    case actionTypes.UPDATE_OPEN_CHANNEL: {\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel?.url === action.payload?.url ? action.payload : channel\n        )),\n        currentChannel: (state.currentChannel?.url === action?.payload?.url)\n          ? state.currentChannel\n          : action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { OpenChannel, OpenChannelListQuery } from '@sendbird/chat/openChannel';\nimport { OpenChannelListFetchingStatus } from '../OpenChannelListInterfaces';\n\nexport interface OpenChannelListInitialInterface {\n  allChannels: Array<OpenChannel>;\n  currentChannel: OpenChannel;\n  fetchingStatus: OpenChannelListFetchingStatus;\n  channelListQuery: OpenChannelListQuery;\n}\n\nexport default {\n  allChannels: [],\n  currentChannel: null,\n  fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n  channelListQuery: null,\n} as OpenChannelListInitialInterface;\n","import { useCallback } from 'react';\n\nimport { SendbirdError } from '@sendbird/chat';\nimport { OpenChannel, OpenChannelListQuery } from '@sendbird/chat/openChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\nimport { OpenChannelListDispatcherType } from '../OpenChannelListInterfaces';\n\ninterface DynamicParams {\n  sdkInitialized: boolean;\n  openChannelListQuery: OpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nexport type FetchNextCallbackType = (callback: (channels?: Array<OpenChannel>, err?: SendbirdError) => void) => void;\n\nfunction useFetchNextCallback(\n  {\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): FetchNextCallbackType {\n  return useCallback((callback) => {\n    if (sdkInitialized && openChannelListQuery?.hasNext) {\n      logger.info('OpenChannelList|useFetchNextCallback : Fetch channels');\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_START,\n        payload: null,\n      });\n      openChannelListQuery.next()\n        .then((channelList) => {\n          callback(channelList, null);\n          logger.info('OpenChannelList|useFetchNextCallback: Succeeded fetching channels', channelList);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_SUCCESS,\n            payload: channelList,\n          });\n        })\n        .catch((err) => {\n          callback(null, err);\n          logger.error('OpenChannelList|useFetchNextCallback: Failed fetching channels', err);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_FAILURE,\n            payload: null,\n          });\n        });\n    } else {\n      logger.info('OpenChannelList|useFetchNextCallback : There is no more channels');\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useFetchNextCallback;\n","import { OpenChannelListQuery, OpenChannelListQueryParams, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\n\ninterface createChannelListQueryProps {\n  sdk: SendbirdOpenChat;\n  logMessage: string;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction createChannelListQuery({\n  sdk,\n  logMessage,\n  openChannelListQuery,\n  logger,\n  openChannelListDispatcher,\n}: createChannelListQueryProps): OpenChannelListQuery {\n  const params = {} as OpenChannelListQueryParams;\n  params.limit = 20;\n  params.includeFrozen = true;\n  if (openChannelListQuery) {\n    Object.keys(openChannelListQuery).forEach((key) => {\n      params[key] = openChannelListQuery[key];\n    });\n  }\n  const channelListQuery = sdk?.openChannel?.createOpenChannelListQuery?.(params);\n  logger.info(logMessage, channelListQuery);\n  openChannelListDispatcher({\n    type: OpenChannelListActionTypes.UPDATE_OPEN_CHANNEL_LIST_QUERY,\n    payload: channelListQuery,\n  });\n  return channelListQuery;\n}\n\nexport default createChannelListQuery;\n","import { useEffect } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\nimport createChannelListQuery from './createChannelListQuery';\n\ninterface DynamicParams {\n  sdk: SendbirdChat & SendbirdOpenChat;\n  sdkInitialized: boolean;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction useSetupOpenChannelList(\n  {\n    sdk,\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    if (sdkInitialized) {\n      if (sdk?.openChannel) {\n        if (sdk?.openChannel?.createOpenChannelListQuery) {\n          logger.info('OpenChannelList|useSetupOpenChannelList: Setup OpenChannelList', { sdkInitialized });\n          const channelListQuery = createChannelListQuery({\n            sdk,\n            logger,\n            openChannelListQuery,\n            openChannelListDispatcher,\n            logMessage: 'OpenChannelList|useSetupOpenChannelList: Succeeded create channelListQuery',\n          });\n\n          if (channelListQuery?.hasNext) {\n            logger.info('OpenChannelList|useSetupOpenChannelList: Fetch channels');\n            openChannelListDispatcher({\n              type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_START,\n              payload: null,\n            });\n            channelListQuery.next()\n              .then((channelList) => {\n                logger.info('OpenChannelList|useSetupOpenChannelList: Succeeded fetching channels', channelList);\n                openChannelListDispatcher({\n                  type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS,\n                  payload: channelList,\n                });\n              })\n              .catch((err) => {\n                logger.error('OpenChannelList|useSetupOpenChannelList: Failed fetching channels', err);\n                openChannelListDispatcher({\n                  type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE,\n                  payload: null,\n                });\n              });\n          } else {\n            logger.info('OpenChannelList|useSetupOpenChannelList: There is no more channels');\n          }\n        } else {\n          logger.warning('OpenChannelList|useSetupOpenChannelList: createOpenChannelListQuery is not included in the openChannel', sdk.openChannel);\n        }\n      } else {\n        logger.warning('OpenChannelList|useSetupOpenChannelList: openChannel is not included in the Chat SDK', sdk);\n      }\n    } else {\n      logger.info('OpenChannelList|useSetupOpenChannelList: Reset OpenChannelList', { sdkInitialized });\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.RESET_OPEN_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useSetupOpenChannelList;\n","import { useCallback } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport createChannelListQuery from './createChannelListQuery';\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  sdk: SendbirdChat & SendbirdOpenChat;\n  sdkInitialized: boolean;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction useRefreshOpenChannelList(\n  {\n    sdk,\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): () => void {\n  return useCallback(() => {\n    if (!sdkInitialized) {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: Reset OpenChannelList', { sdkInitialized });\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.RESET_OPEN_CHANNEL_LIST,\n        payload: null,\n      });\n      return;\n    }\n    if (!sdk?.openChannel) {\n      logger.warning('OpenChannelList|useRefreshOpenChannelList: openChannel is not included in the Chat SDK', sdk);\n      return;\n    }\n    if (!sdk?.openChannel?.createOpenChannelListQuery) {\n      logger.warning('OpenChannelList|useRefreshOpenChannelList: createOpenChannelListQuery is not included in the openChannel', sdk.openChannel);\n      return;\n    }\n\n    logger.info('OpenChannelList|useRefreshOpenChannelList: Setup OpenChannelList', { sdkInitialized });\n\n    const channelListQuery = createChannelListQuery({\n      sdk,\n      logger,\n      openChannelListQuery,\n      openChannelListDispatcher,\n      logMessage: 'OpenChannelList|useRefreshOpenChannelList: Succeeded create channelListQuery',\n    });\n\n    if (channelListQuery.hasNext) {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: Fetch channels');\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_START,\n        payload: null,\n      });\n      channelListQuery.next()\n        .then((channelList) => {\n          logger.info('OpenChannelList|useRefreshOpenChannelList: Succeeded fetching channels', channelList);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS,\n            payload: channelList,\n          });\n        })\n        .catch((err) => {\n          logger.error('OpenChannelList|useRefreshOpenChannelList: Failed fetching channels', err);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE,\n            payload: null,\n          });\n        });\n    } else {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: There is no more channels');\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useRefreshOpenChannelList;\n","import React, { useContext, useReducer, useMemo, useEffect } from 'react';\n\nimport pubSubTopics from '../../../lib/pubSub/topics';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nimport openChannelListReducer from './dux/reducer';\nimport openChannelListInitialState, { OpenChannelListInitialInterface } from './dux/initialState';\nimport {\n  OpenChannelListFetchingStatus,\n  OpenChannelListProviderProps,\n  OpenChannelListProviderInterface,\n  OpenChannelListDispatcherType,\n} from './OpenChannelListInterfaces';\nimport useFetchNextCallback from './hooks/useFetchNextCallback';\nimport useSetupOpenChannelList from './hooks/useSetupOpenChannelList';\nimport useRefreshOpenChannelList from './hooks/useRefreshOpenChannelList';\nimport OpenChannelListActionTypes from './dux/actionTypes';\n\nconst OpenChannelListContext = React.createContext<OpenChannelListProviderInterface | null>({\n  onChannelSelected: null,\n  currentChannel: null,\n  allChannels: [],\n  fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n  customOpenChannelListQuery: {},\n  fetchNextChannels: null,\n  refreshOpenChannelList: null,\n  openChannelListDispatcher: null,\n  logger: null,\n});\n\nexport function useOpenChannelListContext(): OpenChannelListProviderInterface {\n  const context: OpenChannelListProviderInterface = useContext(OpenChannelListContext);\n  return context;\n}\n\nexport const OpenChannelListProvider: React.FC<OpenChannelListProviderProps> = ({\n  className,\n  children,\n  queries,\n  onChannelSelected,\n}: OpenChannelListProviderProps): React.ReactElement => {\n  // props\n  const { stores, config } = useSendbirdStateContext();\n  const { logger, pubSub } = config;\n  const sdk = stores?.sdkStore?.sdk || null;\n  const sdkInitialized = stores?.sdkStore?.initialized || false;\n  const customOpenChannelListQuery = useMemo(() => {\n    return queries?.openChannelListQuery || null;\n  }, [queries?.openChannelListQuery]);\n\n  // dux\n  const [openChannelListStore, openChannelListDispatcher]: [OpenChannelListInitialInterface, OpenChannelListDispatcherType] = useReducer(\n    openChannelListReducer,\n    openChannelListInitialState,\n  );\n  const {\n    allChannels,\n    currentChannel,\n    fetchingStatus,\n    channelListQuery,\n  } = openChannelListStore;\n\n  // Initialize\n  useSetupOpenChannelList({\n    sdk,\n    sdkInitialized,\n    openChannelListQuery: customOpenChannelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  // Events & PubSub\n  useEffect(() => {\n    const subscriber = pubSub?.subscribe ? new Map() : null;\n    subscriber?.set(\n      pubSubTopics.UPDATE_OPEN_CHANNEL,\n      pubSub?.subscribe(pubSubTopics.UPDATE_OPEN_CHANNEL, (channel) => {\n        openChannelListDispatcher({\n          type: OpenChannelListActionTypes.UPDATE_OPEN_CHANNEL,\n          payload: channel,\n        });\n      }),\n    );\n    return () => {\n      subscriber?.forEach((s) => {\n        try { s.remove(); } catch {\n          //\n        }\n      });\n    };\n  }, [sdkInitialized, pubSub]);\n\n  // Fetch next channels by scroll event\n  const fetchNextChannels = useFetchNextCallback({\n    sdkInitialized: sdkInitialized,\n    openChannelListQuery: channelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  // Refresh channel list by click event of 'refresh button'\n  const refreshOpenChannelList = useRefreshOpenChannelList({\n    sdk,\n    sdkInitialized,\n    openChannelListQuery: customOpenChannelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  return (\n    <OpenChannelListContext.Provider\n      value={{\n        // props\n        onChannelSelected: onChannelSelected,\n        customOpenChannelListQuery: customOpenChannelListQuery,\n        // interface\n        logger: logger,\n        currentChannel: currentChannel,\n        allChannels: allChannels,\n        fetchingStatus: fetchingStatus,\n        fetchNextChannels: fetchNextChannels,\n        refreshOpenChannelList: refreshOpenChannelList,\n        openChannelListDispatcher: openChannelListDispatcher,\n      }}\n    >\n      <div className={`sendbird-open-channel-list ${className}`}>\n        {children}\n      </div>\n    </OpenChannelListContext.Provider>\n  );\n};\n\nexport default {\n  OpenChannelListProvider,\n  useOpenChannelListContext,\n};\n"],"names":["OpenChannelListFetchingStatus","OpenChannelListActionTypes","reducer","state","action","type","actionTypes","INIT_OPEN_CHANNEL_LIST_START","__assign","fetchingStatus","FETCHING","INIT_OPEN_CHANNEL_LIST_SUCCESS","channelList","payload","allChannels","length","DONE","EMPTY","INIT_OPEN_CHANNEL_LIST_FAILURE","ERROR","RESET_OPEN_CHANNEL_LIST","FETCH_OPEN_CHANNEL_LIST_START","FETCH_OPEN_CHANNEL_LIST_SUCCESS","__spreadArray","FETCH_OPEN_CHANNEL_LIST_FAILURE","CREATE_OPEN_CHANNEL","currentChannel","SET_CURRENT_OPEN_CHANNEL","UPDATE_OPEN_CHANNEL_LIST_QUERY","channelListQuery","UPDATE_OPEN_CHANNEL","map","channel","url","_a","_b","useFetchNextCallback","sdkInitialized","openChannelListQuery","logger","openChannelListDispatcher","useCallback","callback","hasNext","info","next","then","catch","err","error","createChannelListQuery","sdk","logMessage","params","limit","includeFrozen","Object","keys","forEach","key","_c","openChannel","createOpenChannelListQuery","call","useSetupOpenChannelList","useEffect","warning","useRefreshOpenChannelList","OpenChannelListContext","React","createContext","onChannelSelected","customOpenChannelListQuery","fetchNextChannels","refreshOpenChannelList","useOpenChannelListContext","context","useContext","OpenChannelListProvider","className","children","queries","_d","useSendbirdStateContext","stores","config","pubSub","sdkStore","initialized","useMemo","_e","useReducer","openChannelListReducer","openChannelListInitialState","openChannelListStore","subscriber","subscribe","Map","set","pubSubTopics","s","remove","createElement","Provider","value","concat"],"mappings":"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"}