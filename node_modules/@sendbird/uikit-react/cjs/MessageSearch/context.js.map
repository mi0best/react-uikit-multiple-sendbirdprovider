{"version":3,"file":"context.js","sources":["../../../src/modules/MessageSearch/context/dux/actionTypes.ts","../../../src/modules/MessageSearch/context/dux/reducers.ts","../../../src/modules/MessageSearch/context/dux/initialState.ts","../../../src/modules/MessageSearch/context/hooks/useSetChannel.ts","../../../src/modules/MessageSearch/context/hooks/useGetSearchedMessages.ts","../../../src/modules/MessageSearch/context/hooks/useScrollCallback.ts","../../../src/modules/MessageSearch/context/hooks/useSearchStringEffect.ts","../../../src/modules/MessageSearch/context/MessageSearchProvider.tsx"],"sourcesContent":["export const GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nexport const GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nexport const START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nexport const START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nexport const SET_QUERY_INVALID = 'SET_QUERY_INVALID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const CHANNEL_INVALID = 'CHANNEL_INVALID';\nexport const RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n","import { State as initialStateInterface } from './initialState';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport * as actionTypes from './actionTypes';\n\ninterface MessageSearchQueryType extends MessageSearchQuery {\n  key?: string;\n}\ninterface ActionInterface {\n  type: string;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const currentChannel = action.payload;\n      return {\n        ...state,\n        currentChannel,\n        initialized: true,\n      };\n    }\n    case actionTypes.CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentChannel: null,\n        initialized: false,\n      };\n    }\n    case actionTypes.GET_SEARCHED_MESSAGES: {\n      const { messages, createdQuery } = action.payload;\n      if (\n        createdQuery\n        && createdQuery.channelUrl === (state?.currentMessageSearchQuery as MessageSearchQueryType).channelUrl\n        && createdQuery.key === (state?.currentMessageSearchQuery as MessageSearchQueryType).key\n      ) {\n        return {\n          ...state,\n          loading: false,\n          isInvalid: false,\n          allMessages: [...messages],\n          hasMoreResult: (state?.currentMessageSearchQuery as MessageSearchQueryType).hasNext,\n        };\n      }\n      return { ...state };\n    }\n    case actionTypes.SET_QUERY_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.START_MESSAGE_SEARCH: {\n      return {\n        ...state,\n        isInvalid: false,\n        loading: false,\n      };\n    }\n    case actionTypes.START_GETTING_SEARCHED_MESSAGES: {\n      const currentMessageSearchQuery = action.payload;\n      return {\n        ...state,\n        loading: true,\n        currentMessageSearchQuery,\n      };\n    }\n    case actionTypes.GET_NEXT_SEARCHED_MESSAGES: {\n      const messages = action.payload;\n      return {\n        ...state,\n        allMessages: [...state.allMessages, ...messages],\n        hasMoreResult: (state?.currentMessageSearchQuery as MessageSearchQuery).hasNext,\n      };\n    }\n    case actionTypes.RESET_SEARCH_STRING: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { MessageSearchQuery } from '@sendbird/chat/message';\nimport {\n  ClientFileMessage,\n  ClientUserMessage,\n} from '../../../../types';\n\nexport interface State {\n  allMessages: Array<ClientFileMessage | ClientUserMessage>;\n  loading: boolean;\n  isInvalid: boolean;\n  initialized: boolean;\n  currentChannel: GroupChannel;\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false,\n};\n\nexport default initialState;\n","import type { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { useEffect } from 'react';\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  channelUrl: string;\n  sdkInit: boolean;\n}\ninterface ToolProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && (sdk?.groupChannel)) {\n      sdk.groupChannel.getChannel(channelUrl).then((groupChannel) => {\n        logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n        messageSearchDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: groupChannel,\n        });\n      }).catch(() => {\n        messageSearchDispatcher({\n          type: messageActionTypes.CHANNEL_INVALID,\n          payload: null,\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type { MessageSearchQueryParams } from '@sendbird/chat/lib/__definition';\n\nimport type { SendbirdError } from '@sendbird/chat';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { CoreMessageType } from '../../../../utils';\n\nenum MessageSearchOrder {\n  SCORE = 'score',\n  TIMESTAMP = 'ts',\n}\n\ninterface MainProps {\n  currentChannel: GroupChannel;\n  channelUrl: string;\n  requestString?: string;\n  messageSearchQuery?: MessageSearchQueryParams;\n  onResultLoaded?: (\n    messages?: Array<CoreMessageType>,\n    error?: SendbirdError,\n  ) => void;\n  retryCount: number;\n}\ninterface ToolProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  messageSearchDispatcher: (props: { type: string, payload: any }) => void;\n}\n\nfunction useGetSearchedMessages(\n  { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    messageSearchDispatcher({\n      type: messageActionTypes.START_MESSAGE_SEARCH,\n      payload: null,\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        currentChannel.refresh().then((channel) => {\n          const inputSearchMessageQueryObject: MessageSearchQueryParams = {\n            order: MessageSearchOrder.TIMESTAMP,\n            channelUrl,\n            messageTimestampFrom: channel.invitedAt,\n            keyword: requestString,\n            ...messageSearchQuery,\n          };\n          const createdQuery = sdk.createMessageSearchQuery(inputSearchMessageQueryObject);\n          createdQuery.next().then((messages) => {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispatcher({\n              type: messageActionTypes.GET_SEARCHED_MESSAGES,\n              payload: {\n                messages,\n                createdQuery,\n              },\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          }).catch((error) => {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispatcher({\n              type: messageActionTypes.SET_QUERY_INVALID,\n              payload: null,\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          });\n          messageSearchDispatcher({\n            type: messageActionTypes.START_GETTING_SEARCHED_MESSAGES,\n            payload: createdQuery,\n          });\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nexport default useGetSearchedMessages;\n","import type { SendbirdError } from '@sendbird/chat';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../..';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { CoreMessageType } from '../../../../utils';\n\ninterface MainProps {\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n  onResultLoaded?: (\n    messages?: Array<CoreMessageType>,\n    error?: SendbirdError,\n  ) => void;\n}\n\ntype MessageSearchDispatcherType = { type: string, payload: any };\n\ninterface ToolProps {\n  logger: Logger;\n  messageSearchDispatcher: (payload: MessageSearchDispatcherType) => void;\n}\n\nexport type CallbackReturn = (\n  callback: (\n    messages: Array<CoreMessageType>,\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    error: any,\n  ) => void\n) => void;\n\nfunction useScrollCallback(\n  { currentMessageSearchQuery, hasMoreResult, onResultLoaded }: MainProps,\n  { logger, messageSearchDispatcher }: ToolProps,\n): CallbackReturn {\n  return useCallback((cb) => {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next().then((messages) => {\n        logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n        messageSearchDispatcher({\n          type: messageActionTypes.GET_NEXT_SEARCHED_MESSAGES,\n          payload: messages,\n        });\n        cb(messages, null);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(messages, null);\n        }\n      }).catch((error) => {\n        logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n        cb(null, error);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(null, error);\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nexport default useScrollCallback;\n","import { useState, useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  searchString: string;\n}\n\ninterface StaticParams {\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nconst DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(\n  { searchString }: DynamicParams,\n  { messageSearchDispatcher }: StaticParams,\n): string {\n  const [requestString, setRequestString] = useState('');\n  const [debouncingTimer, setDebouncingTimer] = useState(null);\n  useEffect(() => {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(\n        setTimeout(() => {\n          setRequestString(searchString);\n        }, DEBOUNCING_TIME),\n      );\n    } else {\n      setRequestString('');\n      messageSearchDispatcher({\n        type: messageActionTypes.RESET_SEARCH_STRING,\n        payload: '',\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nexport default useSearchStringEffect;\n","import React, {\n  useRef,\n  useState,\n  useReducer,\n} from 'react';\nimport { SendbirdError } from '@sendbird/chat';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { MessageSearchQueryParams } from '@sendbird/chat/lib/__definition';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { ClientSentMessages } from '../../../types';\n\nimport messageSearchReducer from './dux/reducers';\nimport messageSearchInitialState, { State as MessageSearchReducerState } from './dux/initialState';\n\nimport useSetChannel from './hooks/useSetChannel';\nimport useGetSearchMessages from './hooks/useGetSearchedMessages';\nimport useScrollCallback, {\n  CallbackReturn as UseScrollCallbackType,\n} from './hooks/useScrollCallback';\nimport useSearchStringEffect from './hooks/useSearchStringEffect';\n\nexport interface MessageSearchProviderProps {\n  channelUrl: string;\n  children?: React.ReactElement;\n  searchString?: string;\n  requestString?: string;\n  messageSearchQuery?: MessageSearchQueryParams;\n  onResultLoaded?(messages?: Array<ClientSentMessages>, error?: SendbirdError): void;\n  onResultClick?(message: ClientSentMessages): void;\n}\n\ninterface MessageSearchProviderInterface extends MessageSearchProviderProps {\n  retryCount: number;\n  setRetryCount: React.Dispatch<React.SetStateAction<number>>;\n  selectedMessageId: number;\n  setSelectedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageSearchDispatcher: (props: { type: string, payload: any }) => void;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  allMessages: MessageSearchReducerState['allMessages'];\n  loading: boolean;\n  isInvalid: boolean;\n  currentChannel: GroupChannel;\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n  onScroll: UseScrollCallbackType;\n  handleRetryToConnect: () => void;\n  handleOnScroll: (e: React.BaseSyntheticEvent) => void;\n}\n\nconst MessageSearchContext = React.createContext<MessageSearchProviderInterface | null>(undefined);\n\nconst MessageSearchProvider: React.FC<MessageSearchProviderProps> = (props: MessageSearchProviderProps) => {\n  const {\n    // message search props\n    channelUrl,\n    searchString,\n    messageSearchQuery,\n    onResultLoaded,\n    onResultClick,\n  } = props;\n\n  const globalState = useSendbirdStateContext();\n\n  // hook variables\n  const [retryCount, setRetryCount] = useState(0); // this is a trigger flag for activating useGetSearchMessages\n  const [selectedMessageId, setSelectedMessageId] = useState(0);\n  const [messageSearchStore, messageSearchDispatcher] = useReducer(messageSearchReducer, messageSearchInitialState);\n  const {\n    allMessages,\n    loading,\n    isInvalid,\n    currentChannel,\n    currentMessageSearchQuery,\n    hasMoreResult,\n  } = messageSearchStore;\n\n  const logger = globalState?.config?.logger;\n  const sdk = globalState?.stores?.sdkStore?.sdk;\n  const sdkInit = globalState?.stores?.sdkStore?.initialized;\n  const scrollRef = useRef(null);\n  const handleOnScroll = (e: React.BaseSyntheticEvent) => {\n    const scrollElement = e.target as HTMLDivElement;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = scrollElement;\n\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(() => {\n        // after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel(\n    { channelUrl, sdkInit },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const requestString = useSearchStringEffect({ searchString }, { messageSearchDispatcher });\n\n  useGetSearchMessages(\n    { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const onScroll = useScrollCallback(\n    { currentMessageSearchQuery, hasMoreResult, onResultLoaded },\n    { logger, messageSearchDispatcher },\n  );\n\n  const handleRetryToConnect = () => {\n    setRetryCount(retryCount + 1);\n  };\n  return (\n    <MessageSearchContext.Provider value={{\n      channelUrl,\n      searchString,\n      requestString,\n      messageSearchQuery,\n      onResultLoaded,\n      onResultClick,\n      retryCount,\n      setRetryCount,\n      selectedMessageId,\n      setSelectedMessageId,\n      messageSearchDispatcher,\n      allMessages,\n      loading,\n      isInvalid,\n      currentChannel,\n      currentMessageSearchQuery,\n      hasMoreResult,\n      onScroll,\n      scrollRef,\n      handleRetryToConnect,\n      handleOnScroll,\n    }}>\n      {props?.children}\n    </MessageSearchContext.Provider>\n  );\n};\n\nexport type UseMessageSearchType = () => MessageSearchProviderInterface;\nconst useMessageSearchContext: UseMessageSearchType = () => React.useContext(MessageSearchContext);\n\nexport {\n  MessageSearchProvider,\n  useMessageSearchContext,\n};\n"],"names":["GET_SEARCHED_MESSAGES","GET_NEXT_SEARCHED_MESSAGES","START_MESSAGE_SEARCH","START_GETTING_SEARCHED_MESSAGES","SET_QUERY_INVALID","SET_CURRENT_CHANNEL","CHANNEL_INVALID","RESET_SEARCH_STRING","reducer","state","action","type","actionTypes","currentChannel","payload","__assign","initialized","_a","messages","createdQuery","channelUrl","currentMessageSearchQuery","key","loading","isInvalid","allMessages","__spreadArray","hasMoreResult","hasNext","initialState","useSetChannel","_b","sdkInit","sdk","logger","messageSearchDispatcher","useEffect","groupChannel","getChannel","then","info","messageActionTypes","catch","MessageSearchOrder","useGetSearchedMessages","requestString","messageSearchQuery","onResultLoaded","retryCount","createMessageSearchQuery","refresh","channel","inputSearchMessageQueryObject","order","TIMESTAMP","messageTimestampFrom","invitedAt","keyword","next","error","warning","useScrollCallback","useCallback","cb","DEBOUNCING_TIME","useSearchStringEffect","searchString","_c","useState","setRequestString","_d","debouncingTimer","setDebouncingTimer","clearTimeout","setTimeout","MessageSearchContext","React","createContext","undefined","MessageSearchProvider","props","onResultClick","globalState","useSendbirdStateContext","_f","setRetryCount","_g","selectedMessageId","setSelectedMessageId","_h","useReducer","messageSearchReducer","messageSearchInitialState","messageSearchStore","config","stores","sdkStore","_e","scrollRef","useRef","handleOnScroll","e","scrollElement","target","scrollTop","scrollHeight","clientHeight","onScroll","useGetSearchMessages","handleRetryToConnect","createElement","Provider","value","children","useMessageSearchContext","useContext"],"mappings":"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"}