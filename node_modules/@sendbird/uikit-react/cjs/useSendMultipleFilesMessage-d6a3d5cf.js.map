{"version":3,"file":"useSendMultipleFilesMessage-d6a3d5cf.js","sources":["../../src/modules/Channel/context/dux/actionTypes.ts","../../src/modules/internalInterfaces.ts","../../src/modules/Thread/context/utils.ts","../../src/modules/Channel/context/hooks/useSendMultipleFilesMessage.ts"],"sourcesContent":["import { CreateAction } from '../../../../utils/typeHelpers/reducers/createAction';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { CoreMessageType, SendableMessageType } from '../../../../utils';\nimport { EmojiContainer } from '@sendbird/chat';\nimport { ReactionEvent, UploadableFileInfo } from '@sendbird/chat/message';\nimport { MessageListParams } from '../ChannelProvider';\n\nexport const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const FETCH_INITIAL_MESSAGES_START = 'FETCH_INITIAL_MESSAGES_START';\nexport const FETCH_INITIAL_MESSAGES_SUCCESS = 'FETCH_INITIAL_MESSAGES_SUCCESS';\nexport const FETCH_INITIAL_MESSAGES_FAILURE = 'FETCH_INITIAL_MESSAGES_FAILURE';\nexport const FETCH_PREV_MESSAGES_SUCCESS = 'FETCH_PREV_MESSAGES_SUCCESS';\nexport const FETCH_PREV_MESSAGES_FAILURE = 'FETCH_PREV_MESSAGES_FAILURE';\nexport const FETCH_NEXT_MESSAGES_SUCCESS = 'FETCH_NEXT_MESSAGES_SUCCESS';\nexport const FETCH_NEXT_MESSAGES_FAILURE = 'FETCH_NEXT_MESSAGES_FAILURE';\nexport const SEND_MESSAGE_START = 'SEND_MESSAGE_START';\nexport const SEND_MESSAGE_SUCCESS = 'SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_FAILURE = 'SEND_MESSAGE_FAILURE';\nexport const RESEND_MESSAGE_START = 'RESEND_MESSAGE_START';\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const MARK_AS_READ = 'MARK_AS_READ';\nexport const ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nexport const SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\nexport const MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\nexport const ON_FILE_INFO_UPLOADED = 'ON_FILE_INFO_UPLOADED';\n\ntype CHANNEL_PAYLOAD_TYPES = {\n  [RESET_MESSAGES]: null;\n  [FETCH_INITIAL_MESSAGES_START]: null;\n  [FETCH_INITIAL_MESSAGES_SUCCESS]: {\n    currentGroupChannel: null | GroupChannel;\n    messages: CoreMessageType[];\n  };\n  [FETCH_PREV_MESSAGES_SUCCESS]: {\n    currentGroupChannel: null | GroupChannel;\n    messages: CoreMessageType[];\n  };\n  [FETCH_NEXT_MESSAGES_SUCCESS]: {\n    currentGroupChannel: null | GroupChannel;\n    messages: CoreMessageType[];\n  };\n  [FETCH_INITIAL_MESSAGES_FAILURE]: {\n    currentGroupChannel: null | GroupChannel;\n  };\n  [FETCH_PREV_MESSAGES_FAILURE]: {\n    currentGroupChannel: null | GroupChannel;\n  };\n  [FETCH_NEXT_MESSAGES_FAILURE]: {\n    currentGroupChannel: null | GroupChannel;\n  };\n  [SEND_MESSAGE_START]: SendableMessageType;\n  [SEND_MESSAGE_SUCCESS]: SendableMessageType;\n  [SEND_MESSAGE_FAILURE]: SendableMessageType;\n  [SET_CURRENT_CHANNEL]: null | GroupChannel;\n  [SET_CHANNEL_INVALID]: null;\n  [ON_MESSAGE_RECEIVED]: {\n    channel: GroupChannel;\n    message: SendableMessageType;\n  };\n  [ON_MESSAGE_UPDATED]: {\n    channel: GroupChannel;\n    message: SendableMessageType;\n  };\n  [ON_MESSAGE_THREAD_INFO_UPDATED]: {\n    channel: GroupChannel;\n    event: any;\n  };\n  [RESEND_MESSAGE_START]: {\n    reqId: number;\n  };\n  [MARK_AS_READ]: {\n    channel: null | GroupChannel;\n  };\n  [ON_MESSAGE_DELETED]: MessageId;\n  [ON_MESSAGE_DELETED_BY_REQ_ID]: RequestId;\n  [SET_EMOJI_CONTAINER]: EmojiContainer;\n  [ON_REACTION_UPDATED]: ReactionEvent;\n  [MESSAGE_LIST_PARAMS_CHANGED]: MessageListParams;\n  [ON_FILE_INFO_UPLOADED]: {\n    channelUrl: string;\n    requestId: number;\n    index: number;\n    uploadableFileInfo: UploadableFileInfo;\n    error?: unknown;\n  };\n};\n\ntype MessageId = number;\ntype RequestId = string;\n\nexport type ChannelActionTypes = CreateAction<CHANNEL_PAYLOAD_TYPES>;\n","export enum PublishingModuleType {\n  CHANNEL = 'CHANNEL',\n  THREAD = 'THREAD',\n}\n","import format from 'date-fns/format';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { BaseMessage } from '@sendbird/chat/message';\nimport { getOutgoingMessageState, OutgoingMessageStates } from '../../../utils/exports/getOutgoingMessageState';\nimport { SendableMessageType } from '../../../utils';\n\nexport const getNicknamesMapFromMembers = (members = []): Map<string, string> => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nexport const getParentMessageFrom = (message: SendableMessageType | null): SendableMessageType | BaseMessage => {\n  if (!message) {\n    return null;\n  }\n  if (isParentMessage(message)) {\n    return message;\n  }\n  if (isThreadMessage(message)) {\n    return message?.parentMessage || null;\n  }\n  return null;\n};\n\nexport const isParentMessage = (message: SendableMessageType): boolean => {\n  return (\n    message?.parentMessage === null\n    && typeof message?.parentMessageId === 'number'\n    && !message?.parentMessageId\n  );\n};\n\nexport const isThreadMessage = (message: SendableMessageType): boolean => {\n  return (\n    message?.parentMessage !== null\n    && typeof message?.parentMessageId === 'number'\n    && message?.parentMessageId > 0\n    && message?.threadInfo === null\n  );\n};\n\nexport const isAboutSame = (a: number, b: number, px: number): boolean => (Math.abs(a - b) <= px);\n\nexport const isEmpty = (val: unknown): boolean => (val === null || val === undefined);\n\n// Some Ids return string and number inconsistently\n// only use to comapre IDs\nexport function compareIds(a: number | string, b: number | string): boolean {\n  if (isEmpty(a) || isEmpty(b)) {\n    return false;\n  }\n  const aString = a.toString();\n  const bString = b.toString();\n  return aString === bString;\n}\n\nexport const getMessageCreatedAt = (message: SendableMessageType): string => format(message.createdAt, 'p');\nexport const isReadMessage = (channel: GroupChannel, message: SendableMessageType): boolean => (\n  getOutgoingMessageState(channel, message) === OutgoingMessageStates.READ\n);\nexport const isSameGroup = (\n  message: SendableMessageType,\n  comparingMessage: SendableMessageType,\n  currentChannel: GroupChannel,\n): boolean => {\n  if (!(message\n    && comparingMessage\n    && message.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage.messageType\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: SendableMessageType,\n  currMessage: SendableMessageType,\n  nextMessage: SendableMessageType,\n  currentChannel: GroupChannel,\n  replyType: string,\n): [boolean, boolean] => {\n  if (replyType === 'THREAD' && currMessage?.threadInfo) {\n    return [false, false];\n  }\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-thread-ui--scroll');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n","import { useCallback } from 'react';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { MultipleFilesMessageCreateParams, UploadableFileInfo } from '@sendbird/chat/message';\nimport { MultipleFilesMessage } from '@sendbird/chat/message';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport type { Nullable } from '../../../../types';\nimport PUBSUB_TOPICS from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast as scrollIntoLastForChannel } from '../utils';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from '../../../internalInterfaces';\nimport { scrollIntoLast as scrollIntoLastForThread } from '../../../Thread/context/utils';\n\nexport type OnBeforeSendMFMType = (\n  files: Array<File>,\n  quoteMessage?: SendableMessageType,\n) => MultipleFilesMessageCreateParams;\n\nexport interface UseSendMFMDynamicParams {\n  currentChannel: Nullable<GroupChannel>;\n  onBeforeSendMultipleFilesMessage?: OnBeforeSendMFMType;\n  publishingModules: PublishingModuleType[];\n}\nexport interface UseSendMFMStaticParams {\n  logger: Logger,\n  pubSub: any,\n  scrollRef?: React.RefObject<HTMLDivElement>;\n}\nexport interface FileUploadedPayload {\n  channelUrl: string,\n  requestId: string,\n  index: number,\n  uploadableFileInfo: UploadableFileInfo,\n  error: Error,\n}\nexport type SendMFMFunctionType = (files: Array<File>, quoteMessage?: SendableMessageType) => Promise<MultipleFilesMessage>;\n\n/**\n * pubSub is used instead of messagesDispatcher to avoid redundantly calling\n * because this useSendMultipleFilesMessage is used in the Channel and Thread both\n */\nexport const useSendMultipleFilesMessage = ({\n  currentChannel,\n  onBeforeSendMultipleFilesMessage,\n  publishingModules,\n}: UseSendMFMDynamicParams, {\n  logger,\n  pubSub,\n  scrollRef,\n}: UseSendMFMStaticParams): Array<SendMFMFunctionType> => {\n  const sendMessage = useCallback((\n    files: Array<File>,\n    quoteMessage?: SendableMessageType,\n  ): Promise<MultipleFilesMessage> => {\n    return new Promise((resolve, reject) => {\n      if (!currentChannel) {\n        logger.warning('Channel: Sending MFm failed, because currentChannel is null.', { currentChannel });\n        reject();\n      }\n      if (files.length <= 1) {\n        logger.warning('Channel: Sending MFM failed, because there are no multiple files.', { files });\n        reject();\n      }\n      let messageParams: MultipleFilesMessageCreateParams = {\n        fileInfoList: files.map((file: File): UploadableFileInfo => ({\n          file,\n          fileName: file.name,\n          fileSize: file.size,\n          mimeType: file.type,\n        })),\n      };\n      if (quoteMessage) {\n        messageParams.isReplyToChannel = true;\n        messageParams.parentMessageId = quoteMessage.messageId;\n      }\n      if (typeof onBeforeSendMultipleFilesMessage === 'function') {\n        messageParams = onBeforeSendMultipleFilesMessage(files, quoteMessage);\n      }\n      logger.info('Channel: Start sending MFM', { messageParams });\n      try {\n        currentChannel.sendMultipleFilesMessage(messageParams)\n          /**\n           * We don't operate the onFileUploaded event for now\n           * until we will add UI/UX for it\n           */\n          .onFileUploaded((requestId, index, uploadableFileInfo: UploadableFileInfo, error) => {\n            logger.info('Channel: onFileUploaded during sending MFM', {\n              requestId,\n              index,\n              error,\n              uploadableFileInfo,\n            });\n            pubSub.publish(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, {\n              response: {\n                channelUrl: currentChannel.url,\n                requestId,\n                index,\n                uploadableFileInfo,\n                error,\n              },\n              publishingModules,\n            });\n          })\n          .onPending((pendingMessage: MultipleFilesMessage) => {\n            logger.info('Channel: in progress of sending MFM', { pendingMessage, fileInfoList: messageParams.fileInfoList });\n            pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n              message: pendingMessage,\n              channel: currentChannel,\n              publishingModules,\n            });\n            // We need this delay because rendering MFM takes time due to large image files.\n            setTimeout(() => {\n              if (scrollRef && publishingModules.includes(PublishingModuleType.CHANNEL)) {\n                scrollIntoLastForChannel(0, scrollRef);\n              }\n              if (publishingModules.includes(PublishingModuleType.THREAD)) {\n                scrollIntoLastForThread(0);\n              }\n            }, 100);\n          })\n          .onFailed((error, failedMessage: MultipleFilesMessage) => {\n            logger.error('Channel: Sending MFM failed.', { error, failedMessage });\n            pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_FAILED, {\n              channel: currentChannel,\n              message: failedMessage,\n              publishingModules,\n            });\n            reject(error);\n          })\n          .onSucceeded((succeededMessage: MultipleFilesMessage) => {\n            logger.info('Channel: Sending voice message success!', { succeededMessage });\n            pubSub.publish(PUBSUB_TOPICS.SEND_FILE_MESSAGE, {\n              channel: currentChannel,\n              message: succeededMessage,\n              publishingModules,\n            });\n            // We need this delay because rendering MFM takes time due to large image files.\n            setTimeout(() => {\n              if (scrollRef && publishingModules.includes(PublishingModuleType.CHANNEL)) {\n                scrollIntoLastForChannel(0, scrollRef);\n              }\n              if (publishingModules.includes(PublishingModuleType.THREAD)) {\n                scrollIntoLastForThread(0);\n              }\n            }, 100);\n            resolve(succeededMessage);\n          });\n      } catch (error) {\n        logger.error('Channel: Sending MFM failed.', { error });\n        reject(error);\n      }\n    });\n  }, [\n    currentChannel,\n    onBeforeSendMultipleFilesMessage,\n    publishingModules,\n  ]);\n  return [sendMessage];\n};\n"],"names":["RESET_MESSAGES","FETCH_INITIAL_MESSAGES_START","FETCH_INITIAL_MESSAGES_SUCCESS","FETCH_INITIAL_MESSAGES_FAILURE","FETCH_PREV_MESSAGES_SUCCESS","FETCH_PREV_MESSAGES_FAILURE","FETCH_NEXT_MESSAGES_SUCCESS","FETCH_NEXT_MESSAGES_FAILURE","SEND_MESSAGE_START","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_FAILURE","RESEND_MESSAGE_START","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_THREAD_INFO_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","MARK_AS_READ","ON_REACTION_UPDATED","SET_EMOJI_CONTAINER","MESSAGE_LIST_PARAMS_CHANGED","ON_FILE_INFO_UPLOADED","PublishingModuleType","getNicknamesMapFromMembers","members","nicknamesMap","Map","memberIndex","length","_a","userId","nickname","set","getParentMessageFrom","message","isParentMessage","isThreadMessage","parentMessage","parentMessageId","threadInfo","isAboutSame","a","b","px","Math","abs","isEmpty","val","undefined","compareIds","aString","toString","bString","getMessageCreatedAt","format","createdAt","isReadMessage","channel","getOutgoingMessageState","OutgoingMessageStates","READ","isSameGroup","comparingMessage","currentChannel","messageType","sender","_b","sendingStatus","_c","_d","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","replyType","isAcceptable","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","useSendMultipleFilesMessage","onBeforeSendMultipleFilesMessage","publishingModules","logger","pubSub","scrollRef","sendMessage","useCallback","files","quoteMessage","Promise","resolve","reject","warning","messageParams","fileInfoList","map","file","fileName","name","fileSize","size","mimeType","type","isReplyToChannel","messageId","info","sendMultipleFilesMessage","onFileUploaded","requestId","index","uploadableFileInfo","publish","PUBSUB_TOPICS","response","channelUrl","url","onPending","pendingMessage","includes","CHANNEL","scrollIntoLastForChannel","THREAD","scrollIntoLastForThread","onFailed","failedMessage","SEND_MESSAGE_FAILED","onSucceeded","succeededMessage","SEND_FILE_MESSAGE"],"mappings":"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"}