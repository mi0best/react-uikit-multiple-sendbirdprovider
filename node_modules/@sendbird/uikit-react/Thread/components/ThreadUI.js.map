{"version":3,"file":"ThreadUI.js","sources":["../../../src/modules/Thread/components/ThreadUI/useMemorizedHeader.tsx","../../../src/modules/Thread/components/ThreadUI/useMemorizedParentMessageInfo.tsx","../../../src/modules/Thread/components/ThreadUI/useMemorizedThreadList.tsx","../../../src/modules/Thread/components/ThreadUI/index.tsx"],"sourcesContent":["import React, { ReactElement, useMemo } from 'react';\n\nexport interface UseMemorizedHeaderProps {\n  renderHeader?: () => React.ReactElement;\n}\n\nconst useMemorizedHeader = ({ renderHeader }: UseMemorizedHeaderProps): ReactElement => useMemo(() => {\n  if (typeof renderHeader === 'function') {\n    return renderHeader();\n  }\n  return null;\n}, [renderHeader]);\n\nexport default useMemorizedHeader;\n","import React, { ReactElement, useMemo } from 'react';\n\nimport { ParentMessageStateTypes } from '../../types';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\nimport { SendableMessageType } from '../../../../utils';\n\nexport interface UseMemorizedParentMessageInfoProps {\n  parentMessage: SendableMessageType;\n  parentMessageState: ParentMessageStateTypes;\n  renderParentMessageInfo?: () => React.ReactElement;\n  renderParentMessageInfoPlaceholder?: (type: ParentMessageStateTypes) => React.ReactElement;\n}\n\nconst useMemorizedParentMessageInfo = ({\n  parentMessage,\n  parentMessageState,\n  renderParentMessageInfo,\n  renderParentMessageInfoPlaceholder,\n}: UseMemorizedParentMessageInfoProps): ReactElement => useMemo(() => {\n  if (parentMessageState === ParentMessageStateTypes.NIL\n    || parentMessageState === ParentMessageStateTypes.LOADING\n    || parentMessageState === ParentMessageStateTypes.INVALID\n  ) {\n    if (typeof renderParentMessageInfoPlaceholder === 'function') {\n      return renderParentMessageInfoPlaceholder(parentMessageState);\n    }\n    switch (parentMessageState) {\n      case ParentMessageStateTypes.NIL: {\n        return (\n          <PlaceHolder\n            className=\"sendbird-thread-ui__parent-message-info placeholder-nil\"\n            type={PlaceHolderTypes.NO_RESULTS}\n            iconSize=\"64px\"\n          />\n        );\n      }\n      case ParentMessageStateTypes.LOADING: {\n        return (\n          <PlaceHolder\n            className=\"sendbird-thread-ui__parent-message-info placeholder-loading\"\n            type={PlaceHolderTypes.LOADING}\n            iconSize=\"64px\"\n          />\n        );\n      }\n      case ParentMessageStateTypes.INVALID: {\n        return (\n          <PlaceHolder\n            className=\"sendbird-thread-ui__parent-message-info placeholder-invalid\"\n            type={PlaceHolderTypes.WRONG}\n            iconSize=\"64px\"\n          />\n        );\n      }\n      default: {\n        return null;\n      }\n    }\n  } else if (parentMessageState === ParentMessageStateTypes.INITIALIZED) {\n    if (typeof renderParentMessageInfo === 'function') {\n      return renderParentMessageInfo();\n    }\n  }\n  return null;\n}, [\n  parentMessage,\n  parentMessageState,\n  renderParentMessageInfo,\n  renderParentMessageInfoPlaceholder,\n]);\n\nexport default useMemorizedParentMessageInfo;\n","import React, { ReactElement, useMemo } from 'react';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\n\nimport { ThreadListStateTypes } from '../../types';\n\nexport interface UseMemorizedThreadListProps {\n  threadListState: ThreadListStateTypes;\n  renderThreadListPlaceHolder?: (tyep: ThreadListStateTypes) => React.ReactElement;\n}\n\nconst useMemorizedThreadList = ({\n  threadListState,\n  renderThreadListPlaceHolder,\n}: UseMemorizedThreadListProps): ReactElement => useMemo(() => {\n  if (threadListState === ThreadListStateTypes.NIL\n    || threadListState === ThreadListStateTypes.LOADING\n    || threadListState === ThreadListStateTypes.INVALID\n  ) {\n    if (typeof renderThreadListPlaceHolder === 'function') {\n      return renderThreadListPlaceHolder(threadListState);\n    }\n    switch (threadListState) {\n      case ThreadListStateTypes.LOADING: {\n        return (\n          <PlaceHolder\n            className=\"sendbird-thread-ui__thread-list placeholder-loading\"\n            type={PlaceHolderTypes.LOADING}\n            iconSize=\"64px\"\n          />\n        );\n      }\n      case ThreadListStateTypes.INVALID: {\n        return (\n          <PlaceHolder\n            className=\"sendbird-thread-ui__thread-list placeholder-invalid\"\n            type={PlaceHolderTypes.WRONG}\n            iconSize=\"64px\"\n          />\n        );\n      }\n      case ThreadListStateTypes.NIL: {\n        return <></>;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n  return null;\n}, [\n  threadListState,\n  renderThreadListPlaceHolder,\n]);\n\nexport default useMemorizedThreadList;\n","import React, { useRef, useState } from 'react';\n\nimport './index.scss';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { getChannelTitle } from '../../../Channel/components/ChannelHeader/utils';\nimport { useThreadContext } from '../../context/ThreadProvider';\nimport { ParentMessageStateTypes, ThreadListStateTypes } from '../../types';\nimport ParentMessageInfo from '../ParentMessageInfo';\nimport ThreadHeader from '../ThreadHeader';\nimport ThreadList from '../ThreadList';\nimport ThreadMessageInput from '../ThreadMessageInput';\nimport useMemorizedHeader from './useMemorizedHeader';\nimport useMemorizedParentMessageInfo from './useMemorizedParentMessageInfo';\nimport useMemorizedThreadList from './useMemorizedThreadList';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport { isAboutSame } from '../../context/utils';\nimport { MessageProvider } from '../../../Message/context/MessageProvider';\nimport { SendableMessageType } from '../../../../utils';\n\nexport interface ThreadUIProps {\n  renderHeader?: () => React.ReactElement;\n  renderParentMessageInfo?: () => React.ReactElement;\n  renderMessage?: (props: {\n    message: SendableMessageType,\n    chainTop: boolean,\n    chainBottom: boolean,\n    hasSeparator: boolean,\n  }) => React.ReactElement;\n  renderFileUploadIcon?: () => React.ReactElement;\n  renderVoiceMessageIcon?: () => React.ReactElement;\n  renderSendMessageIcon?: () => React.ReactElement;\n  renderMessageInput?: () => React.ReactElement;\n  renderCustomSeparator?: () => React.ReactElement;\n  renderParentMessageInfoPlaceholder?: (type: ParentMessageStateTypes) => React.ReactElement;\n  renderThreadListPlaceHolder?: (type: ThreadListStateTypes) => React.ReactElement;\n}\n\nconst ThreadUI: React.FC<ThreadUIProps> = ({\n  renderHeader,\n  renderParentMessageInfo,\n  renderMessage,\n  renderMessageInput,\n  renderCustomSeparator,\n  renderParentMessageInfoPlaceholder,\n  renderThreadListPlaceHolder,\n  renderFileUploadIcon,\n  renderVoiceMessageIcon,\n  renderSendMessageIcon,\n}: ThreadUIProps): React.ReactElement => {\n  const {\n    stores,\n  } = useSendbirdStateContext();\n  const currentUserId = stores?.sdkStore?.sdk?.currentUser?.userId;\n  const {\n    stringSet,\n  } = useLocalization();\n  const {\n    currentChannel,\n    allThreadMessages,\n    parentMessage,\n    parentMessageState,\n    threadListState,\n    hasMorePrev,\n    hasMoreNext,\n    fetchPrevThreads,\n    fetchNextThreads,\n    onHeaderActionClick,\n    onMoveToParentMessage,\n  } = useThreadContext();\n  const replyCount = allThreadMessages.length;\n  const isByMe = currentUserId === parentMessage?.sender?.userId;\n\n  // Memoized custom components\n  const MemorizedHeader = useMemorizedHeader({ renderHeader });\n  const MemorizedParentMessageInfo = useMemorizedParentMessageInfo({\n    parentMessage,\n    parentMessageState,\n    renderParentMessageInfo,\n    renderParentMessageInfoPlaceholder, // nil, loading, invalid\n  });\n  const MemorizedThreadList = useMemorizedThreadList({\n    threadListState,\n    renderThreadListPlaceHolder,\n  });\n\n  // scroll\n  const [scrollBottom, setScrollBottom] = useState(0);\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const onScroll = (e) => {\n    const element = e.target;\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight,\n    } = element;\n\n    const threadItemNodes = scrollRef.current?.querySelectorAll('.sendbird-thread-list-item');\n    const firstNode = threadItemNodes?.[0];\n    if (isAboutSame(scrollTop, 0, 10) && hasMorePrev) {\n      fetchPrevThreads((messages) => {\n        if (messages) {\n          try {\n            firstNode?.scrollIntoView?.({ block: 'start', inline: 'nearest' });\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    if (isAboutSame(clientHeight + scrollTop, scrollHeight, 10) && hasMoreNext) {\n      const scrollTop_ = scrollTop;\n      fetchNextThreads((messages) => {\n        if (messages) {\n          try {\n            element.scrollTop = scrollTop_;\n            scrollRef.current.scrollTop = scrollTop_;\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    // save the lastest scroll bottom value\n    if (scrollRef?.current) {\n      const current = scrollRef?.current;\n      setScrollBottom(current.scrollHeight - current.scrollTop - current.offsetHeight);\n    }\n  };\n\n  return (\n    <div className='sendbird-thread-ui'>\n      {\n        MemorizedHeader || (\n          <ThreadHeader\n            className=\"sendbird-thread-ui__header\"\n            channelName={getChannelTitle(currentChannel, currentUserId, stringSet)}\n            onActionIconClick={onHeaderActionClick}\n            onChannelNameClick={() => {\n              onMoveToParentMessage?.({ message: parentMessage, channel: currentChannel });\n            }}\n          />\n        )\n      }\n      <div\n        className=\"sendbird-thread-ui--scroll\"\n        ref={scrollRef}\n        onScroll={onScroll}\n      >\n        <MessageProvider message={parentMessage} isByMe={isByMe}>\n          {\n            MemorizedParentMessageInfo || (\n              <ParentMessageInfo\n                className=\"sendbird-thread-ui__parent-message-info\"\n              />\n            )\n          }\n        </MessageProvider>\n        {\n          replyCount > 0 && (\n            <div className=\"sendbird-thread-ui__reply-counts\">\n              <Label\n                type={LabelTypography.BODY_1}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {`${replyCount} ${replyCount > 1 ? stringSet.THREAD__THREAD_REPLIES : stringSet.THREAD__THREAD_REPLY}`}\n              </Label>\n            </div>\n          )\n        }\n        {\n          MemorizedThreadList || (\n            <ThreadList\n              className=\"sendbird-thread-ui__thread-list\"\n              renderMessage={renderMessage}\n              renderCustomSeparator={renderCustomSeparator}\n              scrollRef={scrollRef}\n              scrollBottom={scrollBottom}\n            />\n          )\n        }\n      </div>\n      {/* MessageInput */}\n      {\n        renderMessageInput?.() || (\n          <ThreadMessageInput\n            className=\"sendbird-thread-ui__message-input\"\n            renderFileUploadIcon={renderFileUploadIcon}\n            renderVoiceMessageIcon={renderVoiceMessageIcon}\n            renderSendMessageIcon={renderSendMessageIcon}\n          />\n        )\n      }\n    </div>\n  );\n};\n\nexport default ThreadUI;\n"],"names":["useMemorizedHeader","_a","renderHeader","useMemo","useMemorizedParentMessageInfo","parentMessage","parentMessageState","renderParentMessageInfo","renderParentMessageInfoPlaceholder","ParentMessageStateTypes","NIL","LOADING","INVALID","React","createElement","PlaceHolder","className","type","PlaceHolderTypes","NO_RESULTS","iconSize","WRONG","INITIALIZED","useMemorizedThreadList","threadListState","renderThreadListPlaceHolder","ThreadListStateTypes","Fragment","ThreadUI","renderMessage","renderMessageInput","renderCustomSeparator","renderFileUploadIcon","renderVoiceMessageIcon","renderSendMessageIcon","stores","useSendbirdStateContext","currentUserId","_d","_b","sdkStore","sdk","currentUser","userId","stringSet","useLocalization","_f","useThreadContext","currentChannel","allThreadMessages","hasMorePrev","hasMoreNext","fetchPrevThreads","fetchNextThreads","onHeaderActionClick","onMoveToParentMessage","replyCount","length","isByMe","sender","_e","MemorizedHeader","MemorizedParentMessageInfo","MemorizedThreadList","_g","useState","scrollBottom","setScrollBottom","scrollRef","useRef","onScroll","e","element","target","scrollTop","clientHeight","scrollHeight","threadItemNodes","current","querySelectorAll","firstNode","isAboutSame","messages","scrollIntoView","call","block","inline","error","scrollTop_1","offsetHeight","ThreadHeader","channelName","getChannelTitle","onActionIconClick","onChannelNameClick","message","channel","ref","MessageProvider","ParentMessageInfo","Label","LabelTypography","BODY_1","color","LabelColors","ONBACKGROUND_3","concat","THREAD__THREAD_REPLIES","THREAD__THREAD_REPLY","ThreadList","ThreadMessageInput"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAMA,kBAAkB,GAAG,UAACC,EAAyC,EAAA;AAAvC,EAAA,IAAAC,YAAY,GAAAD,EAAA,CAAAC,YAAA,CAAA;EAA8C,OAAAC,OAAO,CAAC,YAAA;AAC9F,IAAA,IAAI,OAAOD,YAAY,KAAK,UAAU,EAAE;MACtC,OAAOA,YAAY,EAAE,CAAA;AACtB,KAAA;AACD,IAAA,OAAO,IAAI,CAAA;AACb,GAAC,EAAE,CAACA,YAAY,CAAC,CAAC,CAAA;AALsE,CAKtE;;ACElB,IAAME,6BAA6B,GAAG,UAACH,EAKF,EAAA;MAJnCI,aAAa,GAAAJ,EAAA,CAAAI,aAAA;IACbC,kBAAkB,GAAAL,EAAA,CAAAK,kBAAA;IAClBC,uBAAuB,GAAAN,EAAA,CAAAM,uBAAA;IACvBC,kCAAkC,GAAAP,EAAA,CAAAO,kCAAA,CAAA;EACoB,OAAAL,OAAO,CAAC,YAAA;AAC9D,IAAA,IAAIG,kBAAkB,KAAKG,uBAAuB,CAACC,GAAG,IACjDJ,kBAAkB,KAAKG,uBAAuB,CAACE,OAAO,IACtDL,kBAAkB,KAAKG,uBAAuB,CAACG,OAAO,EACzD;AACA,MAAA,IAAI,OAAOJ,kCAAkC,KAAK,UAAU,EAAE;QAC5D,OAAOA,kCAAkC,CAACF,kBAAkB,CAAC,CAAA;AAC9D,OAAA;AACD,MAAA,QAAQA,kBAAkB;QACxB,KAAKG,uBAAuB,CAACC,GAAG;AAAE,UAAA;AAChC,YAAA,oBACEG,cAAA,CAAAC,aAAA,CAACC,WAAW,EAAA;AACVC,cAAAA,SAAS,EAAC,yDAAyD;cACnEC,IAAI,EAAEC,gBAAgB,CAACC,UAAW;AAClCC,cAAAA,QAAQ,EAAC,MAAA;AAAM,aACf,CAAA,CAAA;AAEL,WAAA;QACD,KAAKX,uBAAuB,CAACE,OAAO;AAAE,UAAA;AACpC,YAAA,oBACEE,cAAA,CAAAC,aAAA,CAACC,WAAW,EAAA;AACVC,cAAAA,SAAS,EAAC,6DAA6D;cACvEC,IAAI,EAAEC,gBAAgB,CAACP,OAAQ;AAC/BS,cAAAA,QAAQ,EAAC,MAAA;AAAM,aACf,CAAA,CAAA;AAEL,WAAA;QACD,KAAKX,uBAAuB,CAACG,OAAO;AAAE,UAAA;AACpC,YAAA,oBACEC,cAAA,CAAAC,aAAA,CAACC,WAAW,EAAA;AACVC,cAAAA,SAAS,EAAC,6DAA6D;cACvEC,IAAI,EAAEC,gBAAgB,CAACG,KAAM;AAC7BD,cAAAA,QAAQ,EAAC,MAAA;AAAM,aACf,CAAA,CAAA;AAEL,WAAA;AACD,QAAA;AAAS,UAAA;AACP,YAAA,OAAO,IAAI,CAAA;AACZ,WAAA;AACF,OAAA;AACF,KAAA,MAAM,IAAId,kBAAkB,KAAKG,uBAAuB,CAACa,WAAW,EAAE;AACrE,MAAA,IAAI,OAAOf,uBAAuB,KAAK,UAAU,EAAE;QACjD,OAAOA,uBAAuB,EAAE,CAAA;AACjC,OAAA;AACF,KAAA;AACD,IAAA,OAAO,IAAI,CAAA;GACZ,EAAE,CACDF,aAAa,EACbC,kBAAkB,EAClBC,uBAAuB,EACvBC,kCAAkC,CACnC,CAAC,CAAA;AAnDsD,CAmDtD;;AC3DF,IAAMe,sBAAsB,GAAG,UAACtB,EAGF,EAAA;MAF5BuB,eAAe,GAAAvB,EAAA,CAAAuB,eAAA;IACfC,2BAA2B,GAAAxB,EAAA,CAAAwB,2BAAA,CAAA;EACoB,OAAAtB,OAAO,CAAC,YAAA;AACvD,IAAA,IAAIqB,eAAe,KAAKE,oBAAoB,CAAChB,GAAG,IAC3Cc,eAAe,KAAKE,oBAAoB,CAACf,OAAO,IAChDa,eAAe,KAAKE,oBAAoB,CAACd,OAAO,EACnD;AACA,MAAA,IAAI,OAAOa,2BAA2B,KAAK,UAAU,EAAE;QACrD,OAAOA,2BAA2B,CAACD,eAAe,CAAC,CAAA;AACpD,OAAA;AACD,MAAA,QAAQA,eAAe;QACrB,KAAKE,oBAAoB,CAACf,OAAO;AAAE,UAAA;AACjC,YAAA,oBACEE,cAAA,CAAAC,aAAA,CAACC,WAAW,EAAA;AACVC,cAAAA,SAAS,EAAC,qDAAqD;cAC/DC,IAAI,EAAEC,gBAAgB,CAACP,OAAQ;AAC/BS,cAAAA,QAAQ,EAAC,MAAA;AAAM,aACf,CAAA,CAAA;AAEL,WAAA;QACD,KAAKM,oBAAoB,CAACd,OAAO;AAAE,UAAA;AACjC,YAAA,oBACEC,cAAA,CAAAC,aAAA,CAACC,WAAW,EAAA;AACVC,cAAAA,SAAS,EAAC,qDAAqD;cAC/DC,IAAI,EAAEC,gBAAgB,CAACG,KAAM;AAC7BD,cAAAA,QAAQ,EAAC,MAAA;AAAM,aACf,CAAA,CAAA;AAEL,WAAA;QACD,KAAKM,oBAAoB,CAAChB,GAAG;AAAE,UAAA;YAC7B,oBAAOG,cAAA,CAAAC,aAAA,CAAAD,cAAA,CAAAc,QAAA,OAAK,CAAA;AACb,WAAA;AACD,QAAA;AAAS,UAAA;AACP,YAAA,OAAO,IAAI,CAAA;AACZ,WAAA;AACF,OAAA;AACF,KAAA;AACD,IAAA,OAAO,IAAI,CAAA;AACb,GAAC,EAAE,CACDH,eAAe,EACfC,2BAA2B,CAC5B,CAAC,CAAA;AAvC+C,CAuC/C;;ACbF,IAAMG,QAAQ,GAA4B,UAAC3B,EAW3B,EAAA;;MAVdC,YAAY,GAAAD,EAAA,CAAAC,YAAA;IACZK,uBAAuB,GAAAN,EAAA,CAAAM,uBAAA;IACvBsB,aAAa,GAAA5B,EAAA,CAAA4B,aAAA;IACbC,kBAAkB,GAAA7B,EAAA,CAAA6B,kBAAA;IAClBC,qBAAqB,GAAA9B,EAAA,CAAA8B,qBAAA;IACrBvB,kCAAkC,GAAAP,EAAA,CAAAO,kCAAA;IAClCiB,2BAA2B,GAAAxB,EAAA,CAAAwB,2BAAA;IAC3BO,oBAAoB,GAAA/B,EAAA,CAAA+B,oBAAA;IACpBC,sBAAsB,GAAAhC,EAAA,CAAAgC,sBAAA;IACtBC,qBAAqB,GAAAjC,EAAA,CAAAiC,qBAAA,CAAA;AAGnB,EAAA,IAAAC,MAAM,GACJC,uBAAuB,EAAE,OADrB,CAAA;AAER,EAAA,IAAMC,aAAa,GAAG,CAAAC,EAAA,GAAA,MAAA,CAAAC,EAAA,GAAAJ,MAAM,aAANA,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAANA,MAAM,CAAEK,QAAQ,MAAE,IAAA,IAAAD,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAAE,GAAG,0CAAEC,WAAW,MAAA,IAAA,IAAAJ,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAEK,MAAM,CAAA;AAE9D,EAAA,IAAAC,SAAS,GACPC,eAAe,EAAE,UADV,CAAA;AAEL,EAAA,IAAAC,KAYFC,gBAAgB,EAAE;IAXpBC,cAAc,oBAAA;IACdC,iBAAiB,GAAAH,EAAA,CAAAG,iBAAA;IACjB5C,aAAa,GAAAyC,EAAA,CAAAzC,aAAA;IACbC,kBAAkB,GAAAwC,EAAA,CAAAxC,kBAAA;IAClBkB,eAAe,GAAAsB,EAAA,CAAAtB,eAAA;IACf0B,WAAW,iBAAA;IACXC,WAAW,GAAAL,EAAA,CAAAK,WAAA;IACXC,gBAAgB,GAAAN,EAAA,CAAAM,gBAAA;IAChBC,gBAAgB,GAAAP,EAAA,CAAAO,gBAAA;IAChBC,mBAAmB,GAAAR,EAAA,CAAAQ,mBAAA;IACnBC,qBAAqB,2BACD,CAAA;AACtB,EAAA,IAAMC,UAAU,GAAGP,iBAAiB,CAACQ,MAAM,CAAA;AAC3C,EAAA,IAAMC,MAAM,GAAGrB,aAAa,MAAK,MAAAhC,aAAa,KAAA,IAAA,IAAbA,aAAa,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAbA,aAAa,CAAEsD,MAAM,MAAE,IAAA,IAAAC,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAAjB,MAAM,CAAA,CAAA;AAE9D;EACA,IAAMkB,eAAe,GAAG7D,kBAAkB,CAAC;AAAEE,IAAAA,YAAY,EAAAA,YAAAA;AAAE,GAAA,CAAC,CAAA;EAC5D,IAAM4D,0BAA0B,GAAG1D,6BAA6B,CAAC;AAC/DC,IAAAA,aAAa,EAAAA,aAAA;AACbC,IAAAA,kBAAkB,EAAAA,kBAAA;AAClBC,IAAAA,uBAAuB,EAAAA,uBAAA;AACvBC,IAAAA,kCAAkC,EAAAA,kCAAAA;AACnC,GAAA,CAAC,CAAA;EACF,IAAMuD,mBAAmB,GAAGxC,sBAAsB,CAAC;AACjDC,IAAAA,eAAe,EAAAA,eAAA;AACfC,IAAAA,2BAA2B,EAAAA,2BAAAA;AAC5B,GAAA,CAAC,CAAA;AAEF;AACM,EAAA,IAAAuC,EAAA,GAAkCC,QAAQ,CAAC,CAAC,CAAC;AAA5CC,IAAAA,YAAY,GAAAF,EAAA,CAAA,CAAA,CAAA;AAAEG,IAAAA,eAAe,GAAAH,EAAA,CAAA,CAAA,CAAe,CAAA;AACnD,EAAA,IAAMI,SAAS,GAAGC,MAAM,CAAiB,IAAI,CAAC,CAAA;AAC9C,EAAA,IAAMC,QAAQ,GAAG,UAACC,CAAC,EAAA;;AACjB,IAAA,IAAMC,OAAO,GAAGD,CAAC,CAACE,MAAM,CAAA;AAEtB,IAAA,IAAAC,SAAS,GAGPF,OAAO,CAAAE,SAHA;MACTC,YAAY,GAEVH,OAAO,CAAAG,YAFG;MACZC,YAAY,GACVJ,OAAO,aADG,CAAA;IAGd,IAAMK,eAAe,GAAG,CAAA5E,EAAA,GAAAmE,SAAS,CAACU,OAAO,MAAA,IAAA,IAAA7E,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAE8E,gBAAgB,CAAC,4BAA4B,CAAC,CAAA;AACzF,IAAA,IAAMC,SAAS,GAAGH,eAAe,KAAf,IAAA,IAAAA,eAAe,uBAAfA,eAAe,CAAG,CAAC,CAAC,CAAA;IACtC,IAAII,WAAW,CAACP,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,IAAIxB,WAAW,EAAE;MAChDE,gBAAgB,CAAC,UAAC8B,QAAQ,EAAA;;AACxB,QAAA,IAAIA,QAAQ,EAAE;UACZ,IAAI;AACF,YAAA,CAAAjF,EAAA,GAAA+E,SAAS,KAAT,IAAA,IAAAA,SAAS,uBAATA,SAAS,CAAEG,cAAc,MAAG,IAAA,IAAAlF,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,EAAA,CAAAmF,IAAA,CAAAJ,SAAA,EAAA;AAAEK,cAAAA,KAAK,EAAE,OAAO;AAAEC,cAAAA,MAAM,EAAE,SAAA;AAAS,aAAE,CAAC,CAAA;WACnE,CAAC,OAAOC,KAAK,EAAE;AACd;AAAA,WAAA;AAEH,SAAA;AACH,OAAC,CAAC,CAAA;AACH,KAAA;AAED,IAAA,IAAIN,WAAW,CAACN,YAAY,GAAGD,SAAS,EAAEE,YAAY,EAAE,EAAE,CAAC,IAAIzB,WAAW,EAAE;MAC1E,IAAMqC,WAAU,GAAGd,SAAS,CAAA;MAC5BrB,gBAAgB,CAAC,UAAC6B,QAAQ,EAAA;AACxB,QAAA,IAAIA,QAAQ,EAAE;UACZ,IAAI;YACFV,OAAO,CAACE,SAAS,GAAGc,WAAU,CAAA;AAC9BpB,YAAAA,SAAS,CAACU,OAAO,CAACJ,SAAS,GAAGc,WAAU,CAAA;WACzC,CAAC,OAAOD,KAAK,EAAE;AACd;AAAA,WAAA;AAEH,SAAA;AACH,OAAC,CAAC,CAAA;AACH,KAAA;AAED;AACA,IAAA,IAAInB,SAAS,KAAT,IAAA,IAAAA,SAAS,uBAATA,SAAS,CAAEU,OAAO,EAAE;AACtB,MAAA,IAAMA,OAAO,GAAGV,SAAS,KAAA,IAAA,IAATA,SAAS,KAAT,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,SAAS,CAAEU,OAAO,CAAA;AAClCX,MAAAA,eAAe,CAACW,OAAO,CAACF,YAAY,GAAGE,OAAO,CAACJ,SAAS,GAAGI,OAAO,CAACW,YAAY,CAAC,CAAA;AACjF,KAAA;GACF,CAAA;EAED,oBACE5E,cAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AAAKE,IAAAA,SAAS,EAAC,oBAAA;AAAoB,GAAA,EAE/B6C,eAAe,iBACbhD,cAAA,CAAAC,aAAA,CAAC4E,YAAY,EAAA;AACX1E,IAAAA,SAAS,EAAC,4BAA4B;IACtC2E,WAAW,EAAEC,eAAe,CAAC5C,cAAc,EAAEX,aAAa,EAAEO,SAAS,CAAE;AACvEiD,IAAAA,iBAAiB,EAAEvC,mBAAoB;IACvCwC,kBAAkB,EAAE,YAAA;AAClBvC,MAAAA,qBAAqB,KAArB,IAAA,IAAAA,qBAAqB,KAArB,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,qBAAqB,CAAG;AAAEwC,QAAAA,OAAO,EAAE1F,aAAa;AAAE2F,QAAAA,OAAO,EAAEhD,cAAAA;AAAc,OAAE,CAAC,CAAA;AAC9E,KAAA;AAAE,GACF,CACH,eAEHnC,cAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AACEE,IAAAA,SAAS,EAAC,4BAA4B;AACtCiF,IAAAA,GAAG,EAAE7B,SAAU;AACfE,IAAAA,QAAQ,EAAEA,QAAAA;AAAS,GAAA,eAEnBzD,cAAA,CAAAC,aAAA,CAACoF,eAAe,EAAA;AAACH,IAAAA,OAAO,EAAE1F,aAAc;AAACqD,IAAAA,MAAM,EAAEA,MAAAA;AAAO,GAAA,EAEpDI,0BAA0B,iBACxBjD,cAAA,CAAAC,aAAA,CAACqF,iBAAiB,EAAA;AAChBnF,IAAAA,SAAS,EAAC,yCAAA;GACV,CAGS,CACjB,EACEwC,UAAU,GAAG,CAAC,iBACZ3C,cAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AAAKE,IAAAA,SAAS,EAAC,kCAAA;AAAkC,GAAA,eAC/CH,cAAA,CAAAC,aAAA,CAACsF,KAAK,EAAA;IACJnF,IAAI,EAAEoF,eAAe,CAACC,MAAO;IAC7BC,KAAK,EAAEC,WAAW,CAACC,cAAAA;AAAe,GAAA,EAEjC,UAAGjD,UAAU,EAAA,GAAA,CAAA,CAAAkD,MAAA,CAAIlD,UAAU,GAAG,CAAC,GAAGZ,SAAS,CAAC+D,sBAAsB,GAAG/D,SAAS,CAACgE,oBAAoB,CAC/F,CACJ,CACN,EAGD7C,mBAAmB,iBACjBlD,cAAA,CAAAC,aAAA,CAAC+F,UAAU,EAAA;AACT7F,IAAAA,SAAS,EAAC,iCAAiC;AAC3Ca,IAAAA,aAAa,EAAEA,aAAc;AAC7BE,IAAAA,qBAAqB,EAAEA,qBAAsB;AAC7CqC,IAAAA,SAAS,EAAEA,SAAU;AACrBF,IAAAA,YAAY,EAAEA,YAAAA;GAAa,CAI9B,CACL,EAEE,CAAApC,kBAAkB,KAAlB,IAAA,IAAAA,kBAAkB,uBAAlBA,kBAAkB,EAAI,kBACpBjB,cAAA,CAAAC,aAAA,CAACgG,kBAAkB,EAAA;AACjB9F,IAAAA,SAAS,EAAC,mCAAmC;AAC7CgB,IAAAA,oBAAoB,EAAEA,oBAAqB;AAC3CC,IAAAA,sBAAsB,EAAEA,sBAAuB;AAC/CC,IAAAA,qBAAqB,EAAEA,qBAAAA;AAAsB,GAAA,CAIhD,CAAC,CAAA;AAEV;;;;"}