import { _ as _extends } from '../../_rollupPluginBabelHelpers-e92eb032.js';
import { c as __spreadArray, _ as __assign } from '../../tslib.es6-c2fb729e.js';
import React__default, { useState, useRef, useEffect, useContext } from 'react';
import { f as format } from '../../index-2d27aeef.js';
import { R as RemoveMessage } from '../../RemoveMessageModal-007c2f04.js';
import ParentMessageInfoItem from './ParentMessageInfoItem.js';
import { B as getSenderName } from '../../index-776554c0.js';
import { g as getIsReactionEnabled } from '../../ChannelProvider-9ba5893a.js';
import { u as useLocalization } from '../../LocalizationContext-287ee149.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { useThreadContext } from '../context.js';
import { a as UserProfileContext } from '../../UserProfileContext-2001a468.js';
import SuggestedMentionList from '../../Channel/components/SuggestedMentionList.js';
import Avatar from '../../ui/Avatar.js';
import { L as Label, a as LabelTypography, b as LabelColors } from '../../index-92741c7e.js';
import { F as FileViewer } from '../../index-0f017704.js';
import MessageItemMenu from '../../ui/MessageItemMenu.js';
import MessageItemReactionMenu from '../../ui/MessageItemReactionMenu.js';
import ContextMenu, { MenuItems } from '../../ui/ContextMenu.js';
import UserProfile from '../../ui/UserProfile.js';
import MessageInput from '../../ui/MessageInput.js';
import { M as MessageInputKeys } from '../../const-93731a4c.js';
import { R as Role } from '../../types-781e0bab.js';
import { u as useMediaQueryContext } from '../../MediaQueryContext-114ca049.js';
import { u as useLongPress } from '../../useLongPress-f8655a14.js';
import { M as MobileMenu } from '../../index-c22e4772.js';
import { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';
import '../../index-e4277f9c.js';
import '../../ui/Modal.js';
import 'react-dom';
import '../../utils-6c50a6d1.js';
import '../../index-09847c0f.js';
import '../../index-04bd1a59.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../types-9d43ac6e.js';
import 'prop-types';
import '../../stringSet-6422c6b9.js';
import '../../ui/Icon.js';
import '../../stringFormatterUtils-abbe70ba.js';
import '../../ui/ImageRenderer.js';
import '../../ui/TextButton.js';
import '../../color-57373b4c.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/ReactionButton.js';
import '../../ui/BottomSheet.js';
import '../../ui/UserListItem.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../uuid-c15b8b3b.js';
import '../../sendbirdSelectors.js';
import '../../pubSub/topics.js';
import '../../withSendbird.js';
import '../../ui/SortByRow.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../Message/context.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../index-e04159fe.js';
import '../../consts-d9c5f25a.js';
import '../../VoiceRecorder/context.js';
import '../../ui/PlaybackTime.js';
import '../../ui/Loader.js';
import '../../index-a0638563.js';
import '../../tokenize-eae44765.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../useStatefulFileInfoList-5e68b93f.js';
import '@sendbird/chat/message';
import '../../const-73db0277.js';
import '../../utils-aa4086dc.js';
import '../../useSendMultipleFilesMessage-b8256698.js';
import '../../compareIds-7e517404.js';
import '@sendbird/chat/groupChannel';
import '../../resolvedReplyType-fb987595.js';
import '../context/types.js';
import '@sendbird/chat';
import '../../index-6b3b1eca.js';
import 'dompurify';
import '../../consts-57c888b9.js';
import '../../consts-4ec7d640.js';
import '../../consts-be37687e.js';

function ParentMessageInfo(_a) {
  var _b, _c, _d, _e, _f, _g;
  var className = _a.className;
  var _h = useSendbirdStateContext(),
    stores = _h.stores,
    config = _h.config;
  var isMentionEnabled = config.isMentionEnabled,
    isReactionEnabled = config.isReactionEnabled,
    replyType = config.replyType,
    isOnline = config.isOnline,
    userMention = config.userMention,
    logger = config.logger;
  var userId = (_c = (_b = stores.userStore.user) === null || _b === void 0 ? void 0 : _b.userId) !== null && _c !== void 0 ? _c : '';
  var dateLocale = useLocalization().dateLocale;
  var _j = useThreadContext(),
    currentChannel = _j.currentChannel,
    parentMessage = _j.parentMessage,
    allThreadMessages = _j.allThreadMessages,
    emojiContainer = _j.emojiContainer,
    toggleReaction = _j.toggleReaction,
    updateMessage = _j.updateMessage,
    deleteMessage = _j.deleteMessage,
    onMoveToParentMessage = _j.onMoveToParentMessage,
    onHeaderActionClick = _j.onHeaderActionClick,
    isMuted = _j.isMuted,
    isChannelFrozen = _j.isChannelFrozen;
  var isMobile = useMediaQueryContext().isMobile;
  var _k = useState(false),
    showRemove = _k[0],
    setShowRemove = _k[1];
  var _l = useState(false),
    supposedHover = _l[0],
    setSupposedHover = _l[1];
  var _m = useState(false),
    showFileViewer = _m[0],
    setShowFileViewer = _m[1];
  var usingReaction = getIsReactionEnabled({
    globalLevel: isReactionEnabled,
    isSuper: currentChannel.isSuper,
    isBroadcast: currentChannel.isBroadcast
  });
  var isByMe = userId === parentMessage.sender.userId;
  // Mobile
  var mobileMenuRef = useRef(null);
  var _o = useState(false),
    showMobileMenu = _o[0],
    setShowMobileMenu = _o[1];
  var longPress = useLongPress({
    onLongPress: function () {
      if (isMobile) {
        setShowMobileMenu(true);
      }
    }
  }, {
    shouldPreventDefault: false
  });
  // Edit message
  var _p = useState(false),
    showEditInput = _p[0],
    setShowEditInput = _p[1];
  var disabled = !isOnline || isMuted || isChannelFrozen && !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR);
  // Mention
  var editMessageInputRef = useRef(null);
  var _q = useState(''),
    mentionNickname = _q[0],
    setMentionNickname = _q[1];
  var _r = useState([]),
    mentionedUsers = _r[0],
    setMentionedUsers = _r[1];
  var _s = useState([]),
    mentionedUserIds = _s[0],
    setMentionedUserIds = _s[1];
  var _t = useState(null),
    messageInputEvent = _t[0],
    setMessageInputEvent = _t[1];
  var _u = useState(null),
    selectedUser = _u[0],
    setSelectedUser = _u[1];
  var _v = useState([]),
    mentionSuggestedUsers = _v[0],
    setMentionSuggestedUsers = _v[1];
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isMuted && !(isChannelFrozen && !(currentChannel.myRole === Role.OPERATOR));
  var mentionNodes = useDirtyGetMentions({
    ref: editMessageInputRef
  }, {
    logger: logger
  });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);
  useEffect(function () {
    setMentionedUsers(mentionedUsers.filter(function (_a) {
      var userId = _a.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  // User Profile
  var avatarRef = useRef(null);
  var _w = useContext(UserProfileContext),
    disableUserProfile = _w.disableUserProfile,
    renderUserProfile = _w.renderUserProfile;
  if (showEditInput && ((_d = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.isUserMessage) === null || _d === void 0 ? void 0 : _d.call(parentMessage))) {
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, displaySuggestedMentionList && /*#__PURE__*/React__default.createElement(SuggestedMentionList, {
      className: "parent-message-info--suggested-mention-list",
      targetNickname: mentionNickname,
      inputEvent: messageInputEvent
      // renderUserMentionItem={renderUserMentionItem}
      ,
      onUserItemClick: function (user) {
        if (user) {
          setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
        }
        setMentionNickname('');
        setSelectedUser(user);
        setMessageInputEvent(null);
      },
      onFocusItemChange: function () {
        setMessageInputEvent(null);
      },
      onFetchUsers: function (users) {
        setMentionSuggestedUsers(users);
      },
      ableAddMention: ableMention,
      maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,
      maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount
    }), /*#__PURE__*/React__default.createElement(MessageInput, {
      channel: currentChannel,
      isEdit: true,
      disabled: disabled,
      ref: editMessageInputRef,
      mentionSelectedUser: selectedUser,
      isMentionEnabled: isMentionEnabled,
      message: parentMessage,
      onStartTyping: function () {
        var _a;
        (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);
      },
      onUpdateMessage: function (_a) {
        var _b;
        var messageId = _a.messageId,
          message = _a.message,
          mentionTemplate = _a.mentionTemplate;
        updateMessage({
          messageId: messageId,
          message: message,
          mentionedUsers: mentionedUsers,
          mentionTemplate: mentionTemplate
        });
        setShowEditInput(false);
        (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);
      },
      onCancelEdit: function () {
        var _a;
        setMentionNickname('');
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setMentionSuggestedUsers([]);
        setShowEditInput(false);
        (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);
      },
      onUserMentioned: function (user) {
        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
          setSelectedUser(null);
          setMentionNickname('');
        }
      },
      onMentionStringChange: function (mentionText) {
        setMentionNickname(mentionText);
      },
      onMentionedUserIdsUpdated: function (userIds) {
        setMentionedUserIds(userIds);
      },
      onKeyDown: function (e) {
        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
          setMessageInputEvent(e);
          return true;
        }
        return false;
      }
    }));
  }
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: "sendbird-parent-message-info ".concat(className)
  }, isMobile ? __assign({}, longPress) : {}, {
    ref: mobileMenuRef
  }), /*#__PURE__*/React__default.createElement(ContextMenu, {
    menuTrigger: function (toggleDropdown) {
      var _a, _b, _c;
      return /*#__PURE__*/React__default.createElement(Avatar, {
        className: "sendbird-parent-message-info__sender",
        ref: avatarRef,
        src: ((_b = (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members) === null || _a === void 0 ? void 0 : _a.find(function (m) {
          var _a;
          return (m === null || m === void 0 ? void 0 : m.userId) === ((_a = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _a === void 0 ? void 0 : _a.userId);
        })) === null || _b === void 0 ? void 0 : _b.profileUrl) || ((_c = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _c === void 0 ? void 0 : _c.profileUrl),
        alt: "thread message sender",
        width: "40px",
        height: "40px",
        onClick: function () {
          if (!disableUserProfile) {
            toggleDropdown();
          }
        }
      });
    },
    menuItems: function (closeDropdown) {
      return /*#__PURE__*/React__default.createElement(MenuItems, {
        parentRef: avatarRef,
        parentContainRef: avatarRef,
        closeDropdown: closeDropdown,
        style: {
          paddingTop: '0px',
          paddingBottom: '0px'
        }
      }, renderUserProfile ? renderUserProfile({
        user: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender,
        close: closeDropdown,
        currentUserId: userId
      }) : /*#__PURE__*/React__default.createElement(UserProfile, {
        user: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender,
        currentUserId: userId,
        onSuccess: closeDropdown
      }));
    }
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-parent-message-info__content"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-parent-message-info__content__info"
  }, /*#__PURE__*/React__default.createElement(Label, {
    className: "sendbird-parent-message-info__content__info__sender-name".concat(usingReaction ? '--use-reaction' : ''),
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_2
  }, ((_f = (_e = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members) === null || _e === void 0 ? void 0 : _e.find(function (member) {
    var _a;
    return (member === null || member === void 0 ? void 0 : member.userId) === ((_a = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _a === void 0 ? void 0 : _a.userId);
  })) === null || _f === void 0 ? void 0 : _f.nickname) || (getSenderName === null || getSenderName === void 0 ? void 0 : getSenderName(parentMessage))), /*#__PURE__*/React__default.createElement(Label, {
    className: "sendbird-parent-message-info__content__info__sent-at",
    type: LabelTypography.CAPTION_3,
    color: LabelColors.ONBACKGROUND_2
  }, format((parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.createdAt) || 0, 'p', {
    locale: dateLocale
  }))), /*#__PURE__*/React__default.createElement(ParentMessageInfoItem, {
    message: parentMessage,
    showFileViewer: setShowFileViewer
  })), !isMobile && /*#__PURE__*/React__default.createElement(MessageItemMenu, {
    className: "sendbird-parent-message-info__context-menu ".concat(usingReaction ? 'use-reaction' : '', " ").concat(supposedHover ? 'sendbird-mouse-hover' : ''),
    channel: currentChannel,
    message: parentMessage,
    isByMe: userId === ((_g = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _g === void 0 ? void 0 : _g.userId),
    disableDeleteMessage: allThreadMessages.length > 0,
    replyType: replyType,
    showEdit: setShowEditInput,
    showRemove: setShowRemove,
    setSupposedHover: setSupposedHover,
    onMoveToParentMessage: function () {
      onMoveToParentMessage({
        message: parentMessage,
        channel: currentChannel
      });
    }
  }), usingReaction && !isMobile && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {
    className: "sendbird-parent-message-info__reaction-menu ".concat(supposedHover ? 'sendbird-mouse-hover' : ''),
    message: parentMessage,
    userId: userId,
    emojiContainer: emojiContainer,
    toggleReaction: toggleReaction,
    setSupposedHover: setSupposedHover
  }), showRemove && /*#__PURE__*/React__default.createElement(RemoveMessage, {
    onCancel: function () {
      return setShowRemove(false);
    },
    onSubmit: function () {
      onHeaderActionClick === null || onHeaderActionClick === void 0 ? void 0 : onHeaderActionClick();
    },
    message: parentMessage
  }), showFileViewer && /*#__PURE__*/React__default.createElement(FileViewer, {
    message: parentMessage,
    onClose: function () {
      return setShowFileViewer(false);
    },
    onDelete: function () {
      deleteMessage(parentMessage).then(function () {
        setShowFileViewer(false);
      });
    }
  }), showMobileMenu && /*#__PURE__*/React__default.createElement(MobileMenu, {
    parentRef: mobileMenuRef,
    channel: currentChannel,
    message: parentMessage,
    userId: userId,
    replyType: replyType,
    hideMenu: function () {
      setShowMobileMenu(false);
    },
    deleteMessage: deleteMessage,
    deleteMenuState: (allThreadMessages === null || allThreadMessages === void 0 ? void 0 : allThreadMessages.length) === 0 ? 'ACTIVE' : 'HIDE',
    isReactionEnabled: usingReaction,
    isByMe: isByMe,
    emojiContainer: emojiContainer,
    showEdit: setShowEditInput,
    showRemove: setShowRemove,
    toggleReaction: toggleReaction,
    isOpenedFromThread: true
  }));
}

export { ParentMessageInfo as default };
//# sourceMappingURL=ParentMessageInfo.js.map
