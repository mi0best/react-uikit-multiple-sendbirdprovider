import React__default, { useMemo, useState, useRef } from 'react';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { u as useLocalization } from '../../LocalizationContext-287ee149.js';
import { g as getChannelTitle } from '../../utils-fc1f5aa0.js';
import { useThreadContext } from '../context.js';
import ParentMessageInfo from './ParentMessageInfo.js';
import ThreadHeader from './ThreadHeader.js';
import ThreadList from './ThreadList.js';
import ThreadMessageInput from './ThreadMessageInput.js';
import { ParentMessageStateTypes, ThreadListStateTypes } from '../context/types.js';
import PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';
import { L as Label, a as LabelTypography, b as LabelColors } from '../../index-92741c7e.js';
import { z as isAboutSame } from '../../useSendMultipleFilesMessage-b8256698.js';
import { MessageProvider } from '../../Message/context.js';
import '../../withSendbird.js';
import '../../tslib.es6-c2fb729e.js';
import '../../stringSet-6422c6b9.js';
import '../../index-e4277f9c.js';
import '../../UserProfileContext-2001a468.js';
import '@sendbird/chat';
import '../../pubSub/topics.js';
import '../../index-776554c0.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../index-09847c0f.js';
import '@sendbird/chat/message';
import '@sendbird/chat/groupChannel';
import '../../uuid-c15b8b3b.js';
import '../../consts-d9c5f25a.js';
import '../../utils-aa4086dc.js';
import '../../index-2d27aeef.js';
import '../../_rollupPluginBabelHelpers-e92eb032.js';
import '../../RemoveMessageModal-007c2f04.js';
import '../../ui/Modal.js';
import 'react-dom';
import '../../utils-6c50a6d1.js';
import '../../index-04bd1a59.js';
import '../../MediaQueryContext-114ca049.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../types-9d43ac6e.js';
import 'prop-types';
import '../../ui/Icon.js';
import '../../stringFormatterUtils-abbe70ba.js';
import './ParentMessageInfoItem.js';
import '../../ui/ImageRenderer.js';
import '../../ui/TextButton.js';
import '../../color-57373b4c.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/ReactionButton.js';
import '../../useLongPress-f8655a14.js';
import '../../ui/ContextMenu.js';
import '../../ui/SortByRow.js';
import '../../ui/BottomSheet.js';
import '../../ui/UserListItem.js';
import '../../ui/Avatar.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../index-e04159fe.js';
import '../../VoiceRecorder/context.js';
import '../../ui/PlaybackTime.js';
import '../../ui/Loader.js';
import '../../index-a0638563.js';
import '../../tokenize-eae44765.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../useStatefulFileInfoList-5e68b93f.js';
import '../../index-0f017704.js';
import '../../ChannelProvider-9ba5893a.js';
import '../../const-73db0277.js';
import '../../compareIds-7e517404.js';
import '../../resolvedReplyType-fb987595.js';
import '../../Channel/components/SuggestedMentionList.js';
import '../../const-93731a4c.js';
import '../../ui/MessageItemMenu.js';
import '../../types-781e0bab.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/MessageInput.js';
import '../../index-6b3b1eca.js';
import 'dompurify';
import '../../consts-57c888b9.js';
import '../../consts-4ec7d640.js';
import '../../consts-be37687e.js';
import '../../index-c22e4772.js';
import '../../Message/hooks/useDirtyGetMentions.js';
import './ThreadListItem.js';
import '../../ui/DateSeparator.js';
import '../../index-4b4e9682.js';
import '../../index-f8a9cb51.js';
import '../../index-682a192c.js';
import '../../ui/TextMessageItemBody.js';
import '../../ui/OGMessageItemBody.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../utils-bfc0ab3b.js';
import '../../ui/UnknownMessageItemBody.js';
import 'date-fns';
import '../../useHandleUploadFiles-5ede1bfe.js';
import '../../VoiceRecorder/useVoiceRecorder.js';
import '../../index-493689bd.js';
import '../../hooks/useModal.js';

var useMemorizedHeader = function (_a) {
  var renderHeader = _a.renderHeader;
  return useMemo(function () {
    if (typeof renderHeader === 'function') {
      return renderHeader();
    }
    return null;
  }, [renderHeader]);
};

var useMemorizedParentMessageInfo = function (_a) {
  var parentMessage = _a.parentMessage,
    parentMessageState = _a.parentMessageState,
    renderParentMessageInfo = _a.renderParentMessageInfo,
    renderParentMessageInfoPlaceholder = _a.renderParentMessageInfoPlaceholder;
  return useMemo(function () {
    if (parentMessageState === ParentMessageStateTypes.NIL || parentMessageState === ParentMessageStateTypes.LOADING || parentMessageState === ParentMessageStateTypes.INVALID) {
      if (typeof renderParentMessageInfoPlaceholder === 'function') {
        return renderParentMessageInfoPlaceholder(parentMessageState);
      }
      switch (parentMessageState) {
        case ParentMessageStateTypes.NIL:
          {
            return /*#__PURE__*/React__default.createElement(PlaceHolder, {
              className: "sendbird-thread-ui__parent-message-info placeholder-nil",
              type: PlaceHolderTypes.NO_RESULTS,
              iconSize: "64px"
            });
          }
        case ParentMessageStateTypes.LOADING:
          {
            return /*#__PURE__*/React__default.createElement(PlaceHolder, {
              className: "sendbird-thread-ui__parent-message-info placeholder-loading",
              type: PlaceHolderTypes.LOADING,
              iconSize: "64px"
            });
          }
        case ParentMessageStateTypes.INVALID:
          {
            return /*#__PURE__*/React__default.createElement(PlaceHolder, {
              className: "sendbird-thread-ui__parent-message-info placeholder-invalid",
              type: PlaceHolderTypes.WRONG,
              iconSize: "64px"
            });
          }
        default:
          {
            return null;
          }
      }
    } else if (parentMessageState === ParentMessageStateTypes.INITIALIZED) {
      if (typeof renderParentMessageInfo === 'function') {
        return renderParentMessageInfo();
      }
    }
    return null;
  }, [parentMessage, parentMessageState, renderParentMessageInfo, renderParentMessageInfoPlaceholder]);
};

var useMemorizedThreadList = function (_a) {
  var threadListState = _a.threadListState,
    renderThreadListPlaceHolder = _a.renderThreadListPlaceHolder;
  return useMemo(function () {
    if (threadListState === ThreadListStateTypes.NIL || threadListState === ThreadListStateTypes.LOADING || threadListState === ThreadListStateTypes.INVALID) {
      if (typeof renderThreadListPlaceHolder === 'function') {
        return renderThreadListPlaceHolder(threadListState);
      }
      switch (threadListState) {
        case ThreadListStateTypes.LOADING:
          {
            return /*#__PURE__*/React__default.createElement(PlaceHolder, {
              className: "sendbird-thread-ui__thread-list placeholder-loading",
              type: PlaceHolderTypes.LOADING,
              iconSize: "64px"
            });
          }
        case ThreadListStateTypes.INVALID:
          {
            return /*#__PURE__*/React__default.createElement(PlaceHolder, {
              className: "sendbird-thread-ui__thread-list placeholder-invalid",
              type: PlaceHolderTypes.WRONG,
              iconSize: "64px"
            });
          }
        case ThreadListStateTypes.NIL:
          {
            return /*#__PURE__*/React__default.createElement(React__default.Fragment, null);
          }
        default:
          {
            return null;
          }
      }
    }
    return null;
  }, [threadListState, renderThreadListPlaceHolder]);
};

var ThreadUI = function (_a) {
  var _b, _c, _d, _e;
  var renderHeader = _a.renderHeader,
    renderParentMessageInfo = _a.renderParentMessageInfo,
    renderMessage = _a.renderMessage,
    renderMessageInput = _a.renderMessageInput,
    renderCustomSeparator = _a.renderCustomSeparator,
    renderParentMessageInfoPlaceholder = _a.renderParentMessageInfoPlaceholder,
    renderThreadListPlaceHolder = _a.renderThreadListPlaceHolder,
    renderFileUploadIcon = _a.renderFileUploadIcon,
    renderVoiceMessageIcon = _a.renderVoiceMessageIcon,
    renderSendMessageIcon = _a.renderSendMessageIcon;
  var stores = useSendbirdStateContext().stores;
  var currentUserId = (_d = (_c = (_b = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk) === null || _c === void 0 ? void 0 : _c.currentUser) === null || _d === void 0 ? void 0 : _d.userId;
  var stringSet = useLocalization().stringSet;
  var _f = useThreadContext(),
    currentChannel = _f.currentChannel,
    allThreadMessages = _f.allThreadMessages,
    parentMessage = _f.parentMessage,
    parentMessageState = _f.parentMessageState,
    threadListState = _f.threadListState,
    hasMorePrev = _f.hasMorePrev,
    hasMoreNext = _f.hasMoreNext,
    fetchPrevThreads = _f.fetchPrevThreads,
    fetchNextThreads = _f.fetchNextThreads,
    onHeaderActionClick = _f.onHeaderActionClick,
    onMoveToParentMessage = _f.onMoveToParentMessage;
  var replyCount = allThreadMessages.length;
  var isByMe = currentUserId === ((_e = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender) === null || _e === void 0 ? void 0 : _e.userId);
  // Memoized custom components
  var MemorizedHeader = useMemorizedHeader({
    renderHeader: renderHeader
  });
  var MemorizedParentMessageInfo = useMemorizedParentMessageInfo({
    parentMessage: parentMessage,
    parentMessageState: parentMessageState,
    renderParentMessageInfo: renderParentMessageInfo,
    renderParentMessageInfoPlaceholder: renderParentMessageInfoPlaceholder
  });
  var MemorizedThreadList = useMemorizedThreadList({
    threadListState: threadListState,
    renderThreadListPlaceHolder: renderThreadListPlaceHolder
  });
  // scroll
  var _g = useState(0),
    scrollBottom = _g[0],
    setScrollBottom = _g[1];
  var scrollRef = useRef(null);
  var onScroll = function (e) {
    var _a;
    var element = e.target;
    var scrollTop = element.scrollTop,
      clientHeight = element.clientHeight,
      scrollHeight = element.scrollHeight;
    var threadItemNodes = (_a = scrollRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.sendbird-thread-list-item');
    var firstNode = threadItemNodes === null || threadItemNodes === void 0 ? void 0 : threadItemNodes[0];
    if (isAboutSame(scrollTop, 0, 10) && hasMorePrev) {
      fetchPrevThreads(function (messages) {
        var _a;
        if (messages) {
          try {
            (_a = firstNode === null || firstNode === void 0 ? void 0 : firstNode.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(firstNode, {
              block: 'start',
              inline: 'nearest'
            });
          } catch (error) {
            //
          }
        }
      });
    }
    if (isAboutSame(clientHeight + scrollTop, scrollHeight, 10) && hasMoreNext) {
      var scrollTop_1 = scrollTop;
      fetchNextThreads(function (messages) {
        if (messages) {
          try {
            element.scrollTop = scrollTop_1;
            scrollRef.current.scrollTop = scrollTop_1;
          } catch (error) {
            //
          }
        }
      });
    }
    // save the lastest scroll bottom value
    if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) {
      var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
      setScrollBottom(current.scrollHeight - current.scrollTop - current.offsetHeight);
    }
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-thread-ui"
  }, MemorizedHeader || /*#__PURE__*/React__default.createElement(ThreadHeader, {
    className: "sendbird-thread-ui__header",
    channelName: getChannelTitle(currentChannel, currentUserId, stringSet),
    onActionIconClick: onHeaderActionClick,
    onChannelNameClick: function () {
      onMoveToParentMessage === null || onMoveToParentMessage === void 0 ? void 0 : onMoveToParentMessage({
        message: parentMessage,
        channel: currentChannel
      });
    }
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-thread-ui--scroll",
    ref: scrollRef,
    onScroll: onScroll
  }, /*#__PURE__*/React__default.createElement(MessageProvider, {
    message: parentMessage,
    isByMe: isByMe
  }, MemorizedParentMessageInfo || /*#__PURE__*/React__default.createElement(ParentMessageInfo, {
    className: "sendbird-thread-ui__parent-message-info"
  })), replyCount > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-thread-ui__reply-counts"
  }, /*#__PURE__*/React__default.createElement(Label, {
    type: LabelTypography.BODY_1,
    color: LabelColors.ONBACKGROUND_3
  }, "".concat(replyCount, " ").concat(replyCount > 1 ? stringSet.THREAD__THREAD_REPLIES : stringSet.THREAD__THREAD_REPLY))), MemorizedThreadList || /*#__PURE__*/React__default.createElement(ThreadList, {
    className: "sendbird-thread-ui__thread-list",
    renderMessage: renderMessage,
    renderCustomSeparator: renderCustomSeparator,
    scrollRef: scrollRef,
    scrollBottom: scrollBottom
  })), (renderMessageInput === null || renderMessageInput === void 0 ? void 0 : renderMessageInput()) || /*#__PURE__*/React__default.createElement(ThreadMessageInput, {
    className: "sendbird-thread-ui__message-input",
    renderFileUploadIcon: renderFileUploadIcon,
    renderVoiceMessageIcon: renderVoiceMessageIcon,
    renderSendMessageIcon: renderSendMessageIcon
  }));
};

export { ThreadUI as default };
//# sourceMappingURL=ThreadUI.js.map
