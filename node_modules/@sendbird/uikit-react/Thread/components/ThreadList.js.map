{"version":3,"file":"ThreadList.js","sources":["../../../src/modules/Thread/components/ThreadList/index.tsx"],"sourcesContent":["import React, { RefObject, useMemo } from 'react';\nimport { UserMessage } from '@sendbird/chat/message';\n\nimport './index.scss';\nimport ThreadListItem from './ThreadListItem';\nimport { useThreadContext } from '../../context/ThreadProvider';\nimport { compareMessagesForGrouping } from '../../context/utils';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { isSameDay } from 'date-fns';\nimport { MessageProvider } from '../../../Message/context/MessageProvider';\nimport { SendableMessageType } from '../../../../utils';\n\nexport interface ThreadListProps {\n  className?: string;\n  renderMessage?: (props: {\n    message: SendableMessageType,\n    chainTop: boolean,\n    chainBottom: boolean,\n    hasSeparator: boolean,\n  }) => React.ReactElement;\n  renderCustomSeparator?: (props: { message: SendableMessageType }) => React.ReactElement;\n  scrollRef?: RefObject<HTMLDivElement>;\n  scrollBottom?: number;\n}\n\nexport default function ThreadList({\n  className,\n  renderMessage,\n  renderCustomSeparator,\n  scrollRef,\n  scrollBottom,\n}: ThreadListProps): React.ReactElement {\n  const { config } = useSendbirdStateContext();\n  const { replyType, userId } = config;\n  const {\n    currentChannel,\n    allThreadMessages,\n    localThreadMessages,\n  } = useThreadContext();\n\n  const MemorizedMessage = useMemo(() => ({\n    message,\n    chainTop,\n    chainBottom,\n    hasSeparator,\n  }) => {\n\n    if (typeof renderMessage === 'function') {\n      return renderMessage({\n        message: message as SendableMessageType,\n        chainTop,\n        chainBottom,\n        hasSeparator,\n      });\n    }\n    return null;\n  }, [renderMessage]);\n\n  return (\n    <div className={`sendbird-thread-list ${className}`}>\n      {allThreadMessages.map((message, idx) => {\n        const isByMe = (message as UserMessage)?.sender?.userId === userId;\n        const prevMessage = allThreadMessages[idx - 1];\n        const nextMessage = allThreadMessages[idx + 1];\n        // eslint-disable-next-line no-constant-condition\n        const [chainTop, chainBottom] = true// isMessageGroupingEnabled\n          ? compareMessagesForGrouping(\n            prevMessage as SendableMessageType,\n            message as SendableMessageType,\n            nextMessage as SendableMessageType,\n            currentChannel,\n            replyType,\n          )\n          : [false, false];\n        const hasSeparator = !(prevMessage?.createdAt > 0 && (\n          isSameDay(message?.createdAt, prevMessage?.createdAt)\n        ));\n\n        const handleScroll = () => {\n          const current = scrollRef?.current;\n          if (current) {\n            const bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n            if (scrollBottom < bottom) {\n              current.scrollTop += bottom - scrollBottom;\n            }\n          }\n        };\n\n        return (\n          <MessageProvider message={message} isByMe={isByMe} key={message?.messageId}>\n            {\n              MemorizedMessage({\n                message,\n                chainTop,\n                chainBottom,\n                hasSeparator,\n              }) || (\n                <ThreadListItem\n                  message={message as SendableMessageType}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                  hasSeparator={hasSeparator}\n                  renderCustomSeparator={renderCustomSeparator}\n                  handleScroll={handleScroll}\n                />\n              )\n            }\n          </MessageProvider>\n        );\n      })}\n      {localThreadMessages.map((message, idx) => {\n        const isByMe = (message as UserMessage)?.sender?.userId === userId;\n        const prevMessage = localThreadMessages[idx - 1];\n        const nextMessage = localThreadMessages[idx + 1];\n        // eslint-disable-next-line no-constant-condition\n        const [chainTop, chainBottom] = true// isMessageGroupingEnabled\n          ? compareMessagesForGrouping(\n            prevMessage as SendableMessageType,\n            message as SendableMessageType,\n            nextMessage as SendableMessageType,\n            currentChannel,\n            replyType,\n          )\n          : [false, false];\n        const hasSeparator = !(prevMessage?.createdAt > 0 && (\n          isSameDay(message?.createdAt, prevMessage?.createdAt)\n        ));\n\n        const handleScroll = () => {\n          const current = scrollRef?.current;\n          if (current) {\n            const bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n            if (scrollBottom < bottom) {\n              current.scrollTop += bottom - scrollBottom;\n            }\n          }\n        };\n\n        return (\n          <MessageProvider message={message} isByMe={isByMe} key={message?.messageId}>\n            {\n              MemorizedMessage({\n                message,\n                chainTop,\n                chainBottom,\n                hasSeparator,\n              }) || (\n                <ThreadListItem\n                  message={message as SendableMessageType}\n                  hasSeparator={false}\n                  renderCustomSeparator={renderCustomSeparator}\n                  handleScroll={handleScroll}\n                />\n              )\n            }\n          </MessageProvider>\n        );\n      })}\n    </div>\n  );\n}\n"],"names":["ThreadList","_a","className","renderMessage","renderCustomSeparator","scrollRef","scrollBottom","config","useSendbirdStateContext","replyType","userId","_b","useThreadContext","currentChannel","allThreadMessages","localThreadMessages","MemorizedMessage","useMemo","message","chainTop","chainBottom","hasSeparator","React","createElement","concat","map","idx","isByMe","sender","prevMessage","nextMessage","compareMessagesForGrouping","createdAt","isSameDay","handleScroll","current","bottom","scrollHeight","scrollTop","offsetHeight","MessageProvider","key","messageId","ThreadListItem"],"mappings":"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"}