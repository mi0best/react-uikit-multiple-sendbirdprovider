import { c as __spreadArray } from '../../tslib.es6-c2fb729e.js';
import React__default, { useRef, useState, useEffect } from 'react';
import { MutedState } from '@sendbird/chat/groupChannel';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import MessageInput from '../../ui/MessageInput.js';
import { M as MessageInputKeys } from '../../const-93731a4c.js';
import SuggestedMentionList from '../../Channel/components/SuggestedMentionList.js';
import { useThreadContext } from '../context.js';
import { u as useLocalization } from '../../LocalizationContext-287ee149.js';
import { u as useHandleUploadFiles, V as VoiceMessageInputWrapper } from '../../useHandleUploadFiles-5ede1bfe.js';
import { R as Role } from '../../types-781e0bab.js';
import { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';
import { d as isDisabledBecauseFrozen, e as isDisabledBecauseMuted } from '../../utils-aa4086dc.js';
import '../../withSendbird.js';
import '../../_rollupPluginBabelHelpers-e92eb032.js';
import 'prop-types';
import '../../const-73db0277.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../index-92741c7e.js';
import '../../stringSet-6422c6b9.js';
import '../../types-9d43ac6e.js';
import '../../index-6b3b1eca.js';
import 'dompurify';
import '../../consts-57c888b9.js';
import '../../consts-4ec7d640.js';
import '../../consts-be37687e.js';
import '../../ui/Icon.js';
import '../../index-776554c0.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../index-09847c0f.js';
import '../../tokenize-eae44765.js';
import '../../index-e4277f9c.js';
import '../../ui/Avatar.js';
import '../../ui/ImageRenderer.js';
import '../../uuid-c15b8b3b.js';
import '../../ChannelProvider-9ba5893a.js';
import '../../UserProfileContext-2001a468.js';
import '../../index-2d27aeef.js';
import '@sendbird/chat/message';
import '../../useSendMultipleFilesMessage-b8256698.js';
import '../../pubSub/topics.js';
import '../../compareIds-7e517404.js';
import '../../consts-d9c5f25a.js';
import '../../resolvedReplyType-fb987595.js';
import '../context/types.js';
import '@sendbird/chat';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../index-e04159fe.js';
import '../../VoiceRecorder/context.js';
import '../../ui/Modal.js';
import 'react-dom';
import '../../utils-6c50a6d1.js';
import '../../index-04bd1a59.js';
import '../../MediaQueryContext-114ca049.js';
import '../../VoiceRecorder/useVoiceRecorder.js';
import '../../index-493689bd.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ProgressBar.js';
import '../../ui/TextButton.js';
import '../../color-57373b4c.js';
import '../../hooks/useModal.js';

var ThreadMessageInput = function (props, ref) {
  var _a;
  var className = props.className,
    renderFileUploadIcon = props.renderFileUploadIcon,
    renderVoiceMessageIcon = props.renderVoiceMessageIcon,
    renderSendMessageIcon = props.renderSendMessageIcon;
  var propsDisabled = props.disabled;
  var config = useSendbirdStateContext().config;
  var stringSet = useLocalization().stringSet;
  var isMentionEnabled = config.isMentionEnabled,
    isOnline = config.isOnline,
    userMention = config.userMention,
    isVoiceMessageEnabled = config.isVoiceMessageEnabled,
    logger = config.logger;
  var threadContext = useThreadContext();
  var currentChannel = threadContext.currentChannel,
    parentMessage = threadContext.parentMessage,
    sendMessage = threadContext.sendMessage,
    sendFileMessage = threadContext.sendFileMessage,
    sendVoiceMessage = threadContext.sendVoiceMessage,
    sendMultipleFilesMessage = threadContext.sendMultipleFilesMessage,
    isMuted = threadContext.isMuted,
    isChannelFrozen = threadContext.isChannelFrozen,
    allThreadMessages = threadContext.allThreadMessages;
  var messageInputRef = useRef();
  var isMultipleFilesMessageEnabled = (_a = threadContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : config.isMultipleFilesMessageEnabled;
  var disabled = propsDisabled || isMuted || !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR) && isChannelFrozen || parentMessage === null;
  // MFM
  var handleUploadFiles = useHandleUploadFiles({
    sendFileMessage: sendFileMessage,
    sendMultipleFilesMessage: sendMultipleFilesMessage,
    quoteMessage: parentMessage
  }, {
    logger: logger
  })[0];
  // mention
  var _b = useState(''),
    mentionNickname = _b[0],
    setMentionNickname = _b[1];
  var _c = useState([]),
    mentionedUsers = _c[0],
    setMentionedUsers = _c[1];
  var _d = useState([]),
    mentionedUserIds = _d[0],
    setMentionedUserIds = _d[1];
  var _e = useState(null),
    selectedUser = _e[0],
    setSelectedUser = _e[1];
  var _f = useState([]),
    mentionSuggestedUsers = _f[0],
    setMentionSuggestedUsers = _f[1];
  var _g = useState(null),
    messageInputEvent = _g[0],
    setMessageInputEvent = _g[1];
  var _h = useState(false),
    showVoiceMessageInput = _h[0],
    setShowVoiceMessageInput = _h[1];
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isDisabledBecauseFrozen(currentChannel) && !isDisabledBecauseMuted(currentChannel) && !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast);
  // Reset when changing channel
  useEffect(function () {
    setShowVoiceMessageInput(false);
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  var mentionNodes = useDirtyGetMentions({
    ref: ref || messageInputRef
  }, {
    logger: logger
  });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount);
  useEffect(function () {
    setMentionedUsers(mentionedUsers.filter(function (_a) {
      var userId = _a.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast) && (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) !== Role.OPERATOR) {
    return null;
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-thread-message-input".concat(showVoiceMessageInput ? '--voice-message' : '', " ").concat(className)
  }, displaySuggestedMentionList && /*#__PURE__*/React__default.createElement(SuggestedMentionList, {
    targetNickname: mentionNickname,
    inputEvent: messageInputEvent
    // renderUserMentionItem={renderUserMentionItem}
    ,
    onUserItemClick: function (user) {
      if (user) {
        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
      }
      setMentionNickname('');
      setSelectedUser(user);
      setMessageInputEvent(null);
    },
    onFocusItemChange: function () {
      setMessageInputEvent(null);
    },
    onFetchUsers: function (users) {
      setMentionSuggestedUsers(users);
    },
    ableAddMention: ableMention,
    maxMentionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,
    maxSuggestionCount: userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount
  }), showVoiceMessageInput ? /*#__PURE__*/React__default.createElement(VoiceMessageInputWrapper, {
    channel: currentChannel,
    onSubmitClick: function (recordedFile, duration) {
      sendVoiceMessage(recordedFile, duration, parentMessage);
      setShowVoiceMessageInput(false);
    },
    onCancelClick: function () {
      setShowVoiceMessageInput(false);
    }
  }) : /*#__PURE__*/React__default.createElement(MessageInput, {
    className: "sendbird-thread-message-input__message-input",
    messageFieldId: "sendbird-message-input-text-field--thread",
    disabled: disabled,
    channel: currentChannel,
    setMentionedUsers: setMentionedUsers,
    channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,
    mentionSelectedUser: selectedUser,
    isMentionEnabled: isMentionEnabled,
    isVoiceMessageEnabled: isVoiceMessageEnabled,
    isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled,
    onVoiceMessageIconClick: function () {
      setShowVoiceMessageInput(true);
    },
    renderFileUploadIcon: renderFileUploadIcon,
    renderVoiceMessageIcon: renderVoiceMessageIcon,
    renderSendMessageIcon: renderSendMessageIcon,
    ref: ref || messageInputRef,
    placeholder: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isFrozen) && !((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === Role.OPERATOR) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myMutedState) === MutedState.MUTED && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT || (allThreadMessages.length > 0 ? stringSet.THREAD__INPUT__REPLY_TO_THREAD : stringSet.THREAD__INPUT__REPLY_IN_THREAD),
    onStartTyping: function () {
      var _a;
      (_a = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentChannel);
    },
    onSendMessage: function (_a) {
      var _b;
      var message = _a.message,
        mentionTemplate = _a.mentionTemplate;
      sendMessage({
        message: message,
        mentionedUsers: mentionedUsers,
        mentionTemplate: mentionTemplate,
        quoteMessage: parentMessage
      });
      setMentionNickname('');
      setMentionedUsers([]);
      (_b = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentChannel);
    },
    onFileUpload: handleUploadFiles,
    onUserMentioned: function (user) {
      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
        setSelectedUser(null);
        setMentionNickname('');
      }
    },
    onMentionStringChange: function (mentionText) {
      setMentionNickname(mentionText);
    },
    onMentionedUserIdsUpdated: function (userIds) {
      setMentionedUserIds(userIds);
    },
    onKeyDown: function (e) {
      if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
        setMessageInputEvent(e);
        return true;
      }
      return false;
    }
  }));
};
var ThreadMessageInput$1 = /*#__PURE__*/React__default.forwardRef(ThreadMessageInput);

export { ThreadMessageInput$1 as default };
//# sourceMappingURL=ThreadMessageInput.js.map
