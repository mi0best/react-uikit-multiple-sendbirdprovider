{"version":3,"file":"context.js","sources":["../../src/modules/Thread/consts.ts","../../src/modules/Thread/context/dux/actionTypes.ts","../../src/modules/Thread/context/dux/reducer.ts","../../src/modules/Thread/context/dux/initialState.ts","../../src/modules/Thread/context/hooks/useGetChannel.ts","../../src/modules/Thread/context/hooks/useGetAllEmoji.ts","../../src/modules/Thread/context/hooks/useGetThreadList.ts","../../src/modules/Thread/context/hooks/useGetParentMessage.ts","../../src/modules/Thread/context/hooks/useHandleThreadPubsubEvents.ts","../../src/modules/Thread/context/hooks/useHandleChannelEvents.ts","../../src/modules/Thread/context/hooks/useSendFileMessage.ts","../../src/modules/Thread/context/hooks/useUpdateMessageCallback.ts","../../src/modules/Thread/context/hooks/useDeleteMessageCallback.ts","../../src/modules/Thread/context/hooks/useGetPrevThreadsCallback.ts","../../src/modules/Thread/context/hooks/useGetNextThreadsCallback.ts","../../src/modules/Thread/context/hooks/useToggleReactionsCallback.ts","../../src/modules/Thread/context/hooks/useSendUserMessageCallback.ts","../../src/modules/Thread/context/hooks/useResendMessageCallback.ts","../../src/modules/Thread/context/hooks/useSendVoiceMessageCallback.ts","../../src/modules/Thread/context/ThreadProvider.tsx"],"sourcesContent":["export const PREV_THREADS_FETCH_SIZE = 30;\nexport const NEXT_THREADS_FETCH_SIZE = 30;\n","export enum ThreadContextActionTypes {\n  // initialize\n  INIT_USER_ID = 'INIT_USER_ID',\n  // channel\n  GET_CHANNEL_START = 'GET_CHANNEL_START',\n  GET_CHANNEL_SUCCESS = 'GET_CHANNEL_SUCCESS',\n  GET_CHANNEL_FAILURE = 'GET_CHANNEL_FAILURE',\n  // emojis\n  SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER',\n  // parent message\n  GET_PARENT_MESSAGE_START = 'GET_PARENT_MESSAGE_START',\n  GET_PARENT_MESSAGE_SUCCESS = 'GET_PARENT_MESSAGE_SUCCESS',\n  GET_PARENT_MESSAGE_FAILURE = 'GET_PARENT_MESSAGE_FAILURE',\n  // fetch threads\n  INITIALIZE_THREAD_LIST_START = 'INITIALIZE_THREAD_LIST_START',\n  INITIALIZE_THREAD_LIST_SUCCESS = 'INITIALIZE_THREAD_LIST_SUCCESS',\n  INITIALIZE_THREAD_LIST_FAILURE = 'INITIALIZE_THREAD_LIST_FAILURE',\n  GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START',\n  GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS',\n  GET_PREV_MESSAGES_FAILURE = 'GET_PREV_MESSAGES_FAILURE',\n  GET_NEXT_MESSAGES_START = 'GET_NEXT_MESSAGES_START',\n  GET_NEXT_MESSAGES_SUCESS = 'GET_NEXT_MESSAGES_SUCESS',\n  GET_NEXT_MESSAGES_FAILURE = 'GET_NEXT_MESSAGES_FAILURE',\n  // handle messages\n  SEND_MESSAGE_START = 'SEND_MESSAGE_START',\n  SEND_MESSAGE_SUCESS = 'SEND_MESSAGE_SUCESS',\n  SEND_MESSAGE_FAILURE = 'SEND_MESSAGE_FAILURE',\n  RESEND_MESSAGE_START = 'RESEND_MESSAGE_START',\n  ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID',\n  // event handlers - message status change\n  ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED',\n  ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED',\n  ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED',\n  ON_REACTION_UPDATED = 'ON_REACTION_UPDATED',\n  ON_FILE_INFO_UPLOADED = 'ON_FILE_INFO_UPLOADED',\n  // event handlers - user status change\n  ON_USER_MUTED = 'ON_USER_MUTED',\n  ON_USER_UNMUTED = 'ON_USER_UNMUTED',\n  ON_USER_BANNED = 'ON_USER_BANNED',\n  ON_USER_UNBANNED = 'ON_USER_UNBANNED',\n  ON_USER_LEFT = 'ON_USER_LEFT',\n  // event handler - channel status change\n  ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN',\n  ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN',\n  ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED',\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { MultipleFilesMessage, ReactionEvent, UserMessage } from '@sendbird/chat/message';\nimport { NEXT_THREADS_FETCH_SIZE, PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { ChannelStateTypes, ParentMessageStateTypes, ThreadListStateTypes } from '../../types';\nimport { compareIds } from '../utils';\nimport { ThreadContextActionTypes as actionTypes } from './actionTypes';\nimport { ThreadContextInitialState } from './initialState';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface ActionInterface {\n  type: actionTypes;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: ThreadContextInitialState,\n  action: ActionInterface,\n): ThreadContextInitialState {\n  switch (action.type) {\n    // initialize\n    case actionTypes.INIT_USER_ID: {\n      return {\n        ...state,\n        currentUserId: action.payload,\n      };\n    }\n    case actionTypes.GET_CHANNEL_START: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.LOADING,\n        currentChannel: null,\n      };\n    }\n    case actionTypes.GET_CHANNEL_SUCCESS: {\n      const groupChannel = action.payload.groupChannel as GroupChannel;\n      return {\n        ...state,\n        channelState: ChannelStateTypes.INITIALIZED,\n        currentChannel: groupChannel,\n        // only support in normal group channel\n        isMuted: groupChannel?.members?.find((member) => member?.userId === state.currentUserId)?.isMuted || false,\n        isChannelFrozen: groupChannel?.isFrozen || false,\n      };\n    }\n    case actionTypes.GET_CHANNEL_FAILURE: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.INVALID,\n        currentChannel: null,\n      };\n    }\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      const { emojiContainer } = action.payload;\n      return {\n        ...state,\n        emojiContainer: emojiContainer,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_START: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.LOADING,\n        parentMessage: null,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_SUCCESS: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.INITIALIZED,\n        parentMessage: action.payload.parentMessage,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_FAILURE: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.INVALID,\n        parentMessage: null,\n      };\n    }\n    // fetch threads\n    case actionTypes.INITIALIZE_THREAD_LIST_START: {\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.LOADING,\n        allThreadMessages: [],\n      };\n    }\n    case actionTypes.INITIALIZE_THREAD_LIST_SUCCESS: {\n      const { parentMessage, anchorMessage, threadedMessages } = action.payload;\n      const anchorMessageCreatedAt = (!anchorMessage?.messageId) ? parentMessage?.createdAt : anchorMessage?.createdAt;\n      const anchorIndex = threadedMessages.findIndex((message) => message?.createdAt > anchorMessageCreatedAt);\n      const prevThreadMessages = anchorIndex > -1 ? threadedMessages.slice(0, anchorIndex) : threadedMessages;\n      const anchorThreadMessage = anchorMessage?.messageId ? [anchorMessage] : [];\n      const nextThreadMessages = anchorIndex > -1 ? threadedMessages.slice(anchorIndex) : [];\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.INITIALIZED,\n        hasMorePrev: anchorIndex === -1 || anchorIndex === PREV_THREADS_FETCH_SIZE,\n        hasMoreNext: threadedMessages.length - anchorIndex === NEXT_THREADS_FETCH_SIZE,\n        allThreadMessages: [prevThreadMessages, anchorThreadMessage, nextThreadMessages].flat(),\n      };\n    }\n    case actionTypes.INITIALIZE_THREAD_LIST_FAILURE: {\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.INVALID,\n        allThreadMessages: [],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_SUCESS: {\n      const { threadedMessages } = action.payload;\n      return {\n        ...state,\n        hasMoreNext: threadedMessages.length === NEXT_THREADS_FETCH_SIZE,\n        allThreadMessages: [...state.allThreadMessages, ...threadedMessages],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_FAILURE: {\n      return {\n        ...state,\n        hasMoreNext: false,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS: {\n      const { threadedMessages } = action.payload;\n      return {\n        ...state,\n        hasMorePrev: threadedMessages.length === PREV_THREADS_FETCH_SIZE,\n        allThreadMessages: [...threadedMessages, ...state.allThreadMessages],\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_FAILURE: {\n      return {\n        ...state,\n        hasMorePrev: false,\n      };\n    }\n    // event handlers - message status change\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message }: { channel: GroupChannel, message: SendableMessageType } = action.payload;\n\n      if (\n        state.currentChannel?.url !== channel?.url\n        || state.hasMoreNext\n        || message?.parentMessage?.messageId !== state?.parentMessage?.messageId\n      ) {\n        return state;\n      }\n      const isAlreadyReceived = state.allThreadMessages.findIndex((m) => (\n        m.messageId === message.messageId\n      )) > -1;\n      return {\n        ...state,\n        parentMessage: state.parentMessage?.messageId === message?.messageId ? message : state.parentMessage,\n        allThreadMessages: isAlreadyReceived\n          ? state.allThreadMessages.map((m) => (\n            m.messageId === message.messageId ? message : m\n          ))\n          : [\n            ...state.allThreadMessages.filter((m) => (m as SendableMessageType)?.reqId !== message?.reqId),\n            message,\n          ],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      if (state.currentChannel?.url !== channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        parentMessage: state.parentMessage?.messageId === message?.messageId\n          ? message\n          : state.parentMessage,\n        allThreadMessages: state.allThreadMessages?.map((msg) => (\n          (msg?.messageId === message?.messageId) ? message : msg\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const { channel, messageId } = action.payload;\n      if (state.currentChannel?.url !== channel?.url) {\n        return state;\n      }\n      if (state?.parentMessage?.messageId === messageId) {\n        return {\n          ...state,\n          parentMessage: null,\n          parentMessageState: ParentMessageStateTypes.NIL,\n          allThreadMessages: [],\n        };\n      }\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages?.filter((msg) => (\n          msg?.messageId !== messageId\n        )),\n        localThreadMessages: state.localThreadMessages?.filter((msg) => (\n          msg?.messageId !== messageId\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        localThreadMessages: state.localThreadMessages.filter((m) => (\n          !compareIds((m as SendableMessageType).reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      const reactionEvent = action.payload?.reactionEvent as ReactionEvent;\n      if (state?.parentMessage?.messageId === reactionEvent?.messageId) {\n        state.parentMessage?.applyReactionEvent?.(reactionEvent);\n      }\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages.map((m) => {\n          if (reactionEvent?.messageId === m?.messageId) {\n            m?.applyReactionEvent?.(reactionEvent);\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    // event handlers - user status change\n    case actionTypes.ON_USER_MUTED: {\n      const { channel, user } = action.payload;\n      if (state.currentChannel?.url !== channel?.url || state.currentUserId !== user?.userId) {\n        return state;\n      }\n      return {\n        ...state,\n        isMuted: true,\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const { channel, user } = action.payload;\n      if (state.currentChannel?.url !== channel?.url || state.currentUserId !== user?.userId) {\n        return state;\n      }\n      return {\n        ...state,\n        isMuted: false,\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.NIL,\n        threadListState: ThreadListStateTypes.NIL,\n        parentMessageState: ParentMessageStateTypes.NIL,\n        currentChannel: null,\n        parentMessage: null,\n        allThreadMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n      };\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.ON_USER_LEFT: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.NIL,\n        threadListState: ThreadListStateTypes.NIL,\n        parentMessageState: ParentMessageStateTypes.NIL,\n        currentChannel: null,\n        parentMessage: null,\n        allThreadMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n      };\n    }\n    // event handler - channel status change\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      return {\n        ...state,\n        isChannelFrozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      return {\n        ...state,\n        isChannelFrozen: false,\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const { channel } = action.payload;\n      if (channel?.url === state.currentChannel?.url) {\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return state;\n    }\n    // message\n    case actionTypes.SEND_MESSAGE_START: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        localThreadMessages: [\n          ...state.localThreadMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SEND_MESSAGE_SUCESS: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        allThreadMessages: [\n          ...state.allThreadMessages.filter((m) => (\n            !compareIds((m as UserMessage)?.reqId, message?.reqId)\n          )),\n          message,\n        ],\n        localThreadMessages: state.localThreadMessages.filter((m) => (\n          !compareIds((m as UserMessage)?.reqId, message?.reqId)\n        )),\n      };\n    }\n    case actionTypes.SEND_MESSAGE_FAILURE: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        localThreadMessages: state.localThreadMessages.map((m) => (\n          compareIds((m as UserMessage)?.reqId, message?.reqId)\n            ? message\n            : m\n        )),\n      };\n    }\n    case actionTypes.RESEND_MESSAGE_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.ON_FILE_INFO_UPLOADED: {\n      const { channelUrl, requestId, index, uploadableFileInfo, error } = action.payload;\n      if (!compareIds(channelUrl, state.currentChannel?.url)) {\n        return state;\n      }\n      /**\n       * We don't have to do anything here because\n       * onFailed() will be called so handle error there instead.\n       */\n      if (error) return state;\n      const { localThreadMessages } = state;\n      const messageToUpdate = localThreadMessages.find((message) => compareIds(hasReqId(message) && message.reqId, requestId),\n      );\n      const fileInfoList = (messageToUpdate as MultipleFilesMessage)\n        .messageParams?.fileInfoList;\n      if (Array.isArray(fileInfoList)) {\n        fileInfoList[index] = uploadableFileInfo;\n      }\n      return {\n        ...state,\n        localThreadMessages,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction hasReqId<T extends object>(\n  message: T,\n): message is T & { reqId: string } {\n  return 'reqId' in message;\n}\n","import { EmojiContainer } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport {\n  ChannelStateTypes,\n  ParentMessageStateTypes,\n  ThreadListStateTypes,\n} from '../../types';\nimport { CoreMessageType, SendableMessageType } from '../../../../utils';\n\nexport interface ThreadContextInitialState {\n  currentChannel: GroupChannel;\n  allThreadMessages: Array<CoreMessageType>;\n  localThreadMessages: Array<CoreMessageType>;\n  parentMessage: SendableMessageType;\n  channelState: ChannelStateTypes;\n  parentMessageState: ParentMessageStateTypes;\n  threadListState: ThreadListStateTypes;\n  hasMorePrev: boolean;\n  hasMoreNext: boolean;\n  emojiContainer: EmojiContainer;\n  isMuted: boolean;\n  isChannelFrozen: boolean;\n  currentUserId: string;\n}\n\nconst initialState: ThreadContextInitialState = {\n  currentChannel: null,\n  allThreadMessages: [],\n  localThreadMessages: [],\n  parentMessage: null,\n  channelState: ChannelStateTypes.NIL,\n  parentMessageState: ParentMessageStateTypes.NIL,\n  threadListState: ThreadListStateTypes.NIL,\n  hasMorePrev: false,\n  hasMoreNext: false,\n  emojiContainer: {} as EmojiContainer,\n  isMuted: false,\n  isChannelFrozen: false,\n  currentUserId: '',\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  channelUrl: string;\n  sdkInit: boolean;\n  message: SendableMessageType;\n}\n\ninterface StaticProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  threadDispatcher: (props: { type: string, payload?: any }) => void;\n}\n\nexport default function useGetChannel({\n  channelUrl,\n  sdkInit,\n  message,\n}: DynamicProps, {\n  sdk,\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && channelUrl && sdk?.groupChannel) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_CHANNEL_START,\n        payload: null,\n      });\n      sdk.groupChannel.getChannel?.(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Thread | useInitialize: Get channel succeeded', groupChannel);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_CHANNEL_SUCCESS,\n            payload: { groupChannel },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useInitialize: Get channel failed', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_CHANNEL_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [message, sdkInit]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DanamicPrpos {\n  sdk: SendbirdGroupChat;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetAllEmoji({\n  sdk,\n}: DanamicPrpos, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    if (sdk?.getAllEmoji) { // validation check\n      sdk?.getAllEmoji()\n        .then((emojiContainer) => {\n          logger.info('Thread | useGetAllEmoji: Getting emojis succeeded.', emojiContainer);\n          threadDispatcher({\n            type: ThreadContextActionTypes.SET_EMOJI_CONTAINER,\n            payload: { emojiContainer },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetAllEmoji: Getting emojis failed.', error);\n        });\n    }\n  }, [sdk]);\n}\n","import { useEffect } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadedMessageListParams } from '@sendbird/chat/message';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { NEXT_THREADS_FETCH_SIZE, PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  sdkInit: boolean;\n  parentMessage: SendableMessageType;\n  anchorMessage?: SendableMessageType;\n  isReactionEnabled?: boolean;\n}\n\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetThreadList({\n  sdkInit,\n  parentMessage,\n  anchorMessage,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && parentMessage?.getThreadedMessagesByTimestamp) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_START,\n        payload: null,\n      });\n      const timeStamp = anchorMessage?.createdAt || 0;\n      const params = {\n        prevResultSize: PREV_THREADS_FETCH_SIZE,\n        nextResultSize: NEXT_THREADS_FETCH_SIZE,\n        includeReactions: isReactionEnabled,\n        includeMetaArray: true,\n      } as ThreadedMessageListParams;\n      logger.info('Thread | useGetThreadList: Initialize thread list start.', { timeStamp, params });\n      parentMessage.getThreadedMessagesByTimestamp?.(timeStamp, params)\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetThreadList: Initialize thread list succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_SUCCESS,\n            payload: {\n              parentMessage,\n              anchorMessage,\n              threadedMessages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.info('Therad | useGetThreadList: Initialize thread list failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [sdkInit, parentMessage?.messageId, anchorMessage]);\n}\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { BaseMessage, MessageRetrievalParams } from '@sendbird/chat/message';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { ChannelType } from '@sendbird/chat';\n\ninterface DynamicProps {\n  channelUrl: string;\n  sdkInit: boolean;\n  parentMessage?: BaseMessage;\n}\n\ninterface StaticProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetParentMessage({\n  channelUrl,\n  sdkInit,\n  parentMessage,\n}: DynamicProps, {\n  sdk,\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && sdk?.message?.getMessage) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PARENT_MESSAGE_START,\n        payload: null,\n      });\n      const params: MessageRetrievalParams = {\n        channelUrl,\n        channelType: ChannelType.GROUP,\n        messageId: parentMessage?.messageId,\n        includeMetaArray: true,\n        includeReactions: true,\n        includeThreadInfo: true,\n        includeParentMessageInfo: true,\n      };\n      logger.info('Thread | useGetParentMessage: Get parent message start.', params);\n      const fetchParentMessage = async () => {\n        const data = await sdk.message.getMessage?.(params);\n        return data;\n      };\n      fetchParentMessage()\n        .then((parentMsg) => {\n          logger.info('Thread | useGetParentMessage: Get parent message succeeded.', parentMessage);\n          parentMsg.ogMetaData = parentMessage?.ogMetaData || null;// ogMetaData is not included for now\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PARENT_MESSAGE_SUCCESS,\n            payload: { parentMessage: parentMsg },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetParentMessage: Get parent message failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PARENT_MESSAGE_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [sdkInit, parentMessage?.messageId]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n","import { useEffect } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport topics, { PUBSUB_TOPICS } from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\nimport { FileUploadedPayload, PublishingModuleType } from './useSendMultipleFilesMessage';\nimport * as channelActions from '../../../Channel/context/dux/actionTypes';\n\ninterface DynamicProps {\n  sdkInit: boolean;\n  currentChannel: GroupChannel;\n  parentMessage: SendableMessageType\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useHandleThreadPubsubEvents({\n  sdkInit,\n  currentChannel,\n  parentMessage,\n}: DynamicProps, {\n  pubSub,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    const subscriber = new Map();\n    if (pubSub?.subscribe) {\n      // TODO: subscribe ON_FILE_INFO_UPLOADED\n      subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (props) => {\n        const {\n          channel,\n          message,\n          publishingModules,\n        } = props as { channel: GroupChannel, message: SendableMessageType, publishingModules: PublishingModuleType[] };\n        if (currentChannel?.url === channel?.url\n          && message?.parentMessageId === parentMessage?.messageId\n          && publishingModules.includes(PublishingModuleType.THREAD)\n        ) {\n          // TODO: const clonedMessage = cloneMessage(message);\n          const pendingMessage: Record<string, any> = { ...message };\n          if (message.isMultipleFilesMessage()) {\n            pendingMessage.fileInfoList = message.messageParams.fileInfoList.map((fileInfo) => ({\n              ...fileInfo,\n              url: URL.createObjectURL(fileInfo.file as File),\n            }));\n          }\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_START,\n            payload: {\n              message: pendingMessage,\n            },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, pubSub.subscribe(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, (props) => {\n        const {\n          response,\n          publishingModules,\n        } = props as { response: FileUploadedPayload, publishingModules: PublishingModuleType[] };\n        if (\n          currentChannel?.url === response.channelUrl\n          && publishingModules.includes(PublishingModuleType.THREAD)\n        ) {\n          threadDispatcher({\n            type: channelActions.ON_FILE_INFO_UPLOADED,\n            payload: response,\n          });\n        }\n      }));\n      subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (props) => {\n        const {\n          channel,\n          message,\n        } = props as { channel: GroupChannel, message: SendableMessageType };\n        if (currentChannel?.url === channel?.url\n          && message?.parentMessageId === parentMessage?.messageId\n        ) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(topics.SEND_MESSAGE_FAILED, pubSub.subscribe(topics.SEND_MESSAGE_FAILED, (props) => {\n        const {\n          channel,\n          message,\n          publishingModules,\n        } = props as { channel: GroupChannel, message: SendableMessageType, publishingModules: PublishingModuleType[] };\n        if (currentChannel?.url === channel?.url\n          && message?.parentMessageId === parentMessage?.messageId\n          && publishingModules.includes(PublishingModuleType.THREAD)\n        ) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: { message },\n          });\n        }\n      }));\n      subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (props) => {\n        const {\n          channel,\n          message,\n          publishingModules,\n        } = props as { channel: GroupChannel, message: SendableMessageType, publishingModules: PublishingModuleType[] };\n        if (currentChannel?.url === channel?.url\n          && publishingModules.includes(PublishingModuleType.THREAD)\n        ) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (props) => {\n        const {\n          channel,\n          message,\n        } = props as { channel: GroupChannel, message: SendableMessageType };\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        }\n      }));\n      subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (props) => {\n        const { channel, messageId } = props as { channel: GroupChannel, messageId: number };\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { messageId },\n          });\n        }\n      }));\n    }\n    return () => {\n      subscriber?.forEach((s) => {\n        try {\n          s?.remove();\n        } catch {\n          //\n        }\n      });\n    };\n  }, [sdkInit, currentChannel, parentMessage?.messageId]);\n}\n","import { GroupChannel, GroupChannelHandler, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { useEffect } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport uuidv4 from '../../../../utils/uuid';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  sdk: SendbirdGroupChat;\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useHandleChannelEvents({\n  sdk,\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    const handlerId = uuidv4();\n    // validation check\n    if (sdk?.groupChannel?.addGroupChannelHandler\n      && currentChannel\n    ) {\n      const channelHandlerParams: GroupChannelHandler = {\n        // message status change\n        onMessageReceived(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageReceived', { channel, message });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_RECEIVED,\n            payload: { channel, message },\n          });\n        },\n        onMessageUpdated(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageUpdated', { channel, message });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onMessageDeleted(channel, messageId) {\n          logger.info('Thread | useHandleChannelEvents: onMessageDeleted', { channel, messageId });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { channel, messageId },\n          });\n        },\n        onReactionUpdated(channel, reactionEvent) {\n          logger.info('Thread | useHandleChannelEvents: onReactionUpdated', { channel, reactionEvent });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_REACTION_UPDATED,\n            payload: { channel, reactionEvent },\n          });\n        },\n        // user status change\n        onUserMuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserMuted', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_MUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnmuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnmuted', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNMUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserBanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserBanned', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_BANNED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnbanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnbanned', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNBANNED,\n            payload: { channel, user },\n          });\n        },\n        onUserLeft(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserLeft', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_LEFT,\n            payload: { channel, user },\n          });\n        },\n        // channel status change\n        onChannelFrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelFrozen', { channel });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_FROZEN,\n            payload: { channel },\n          });\n        },\n        onChannelUnfrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelUnfrozen', { channel });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_UNFROZEN,\n            payload: { channel },\n          });\n        },\n        onOperatorUpdated(channel, users) {\n          logger.info('Thread | useHandleChannelEvents: onOperatorUpdated', { channel, users });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_OPERATOR_UPDATED,\n            payload: { channel, users },\n          });\n        },\n      };\n      const channelHandler = new GroupChannelHandler(channelHandlerParams);\n      sdk.groupChannel.addGroupChannelHandler?.(handlerId, channelHandler);\n      logger.info('Thread | useHandleChannelEvents: Added channelHandler in Thread', { handlerId, channelHandler });\n    }\n    return () => {\n      // validation check\n      if (handlerId && sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler?.(handlerId);\n        logger.info('Thread | useHandleChannelEvents: Removed channelHandler in Thread.', handlerId);\n      }\n    };\n  }, [\n    sdk?.groupChannel,\n    currentChannel,\n  ]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from './useSendMultipleFilesMessage';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  onBeforeSendFileMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\ninterface LocalFileMessage extends FileMessage {\n  localUrl: string;\n  file: File;\n}\n\nexport type SendFileMessageFunctionType = (file: File, quoteMessage?: SendableMessageType) => Promise<FileMessage>;\n\nexport default function useSendFileMessageCallback({\n  currentChannel,\n  onBeforeSendFileMessage,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): SendFileMessageFunctionType {\n  const sendMessage = useCallback((file, quoteMessage): Promise<FileMessage> => {\n    return new Promise((resolve, reject) => {\n      const createParamsDefault = () => {\n        const params = {} as FileMessageCreateParams;\n        params.file = file;\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n      const params = onBeforeSendFileMessage?.(file, quoteMessage) ?? createParamsDefault();\n      logger.info('Thread | useSendFileMessageCallback: Sending file message start.', params);\n\n      currentChannel?.sendFileMessage(params)\n        .onPending((pendingMessage) => {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_START,\n            payload: {\n              /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */\n              message: {\n                ...pendingMessage,\n                url: URL.createObjectURL(file),\n                // pending thumbnail message seems to be failed\n                requestState: 'pending',\n              },\n            },\n          });\n          setTimeout(() => scrollIntoLast(), 1000);\n        })\n        .onFailed((error, message) => {\n          (message as LocalFileMessage).localUrl = URL.createObjectURL(file);\n          (message as LocalFileMessage).file = file;\n          logger.info('Thread | useSendFileMessageCallback: Sending file message failed.', { message, error });\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: { message, error },\n          });\n          reject(error);\n        })\n        .onSucceeded((message: FileMessage) => {\n          logger.info('Thread | useSendFileMessageCallback: Sending file message succeeded.', message);\n          pubSub.publish(topics.SEND_FILE_MESSAGE, {\n            channel: currentChannel,\n            message: message,\n            publishingModules: [PublishingModuleType.THREAD],\n          });\n          resolve(message);\n        });\n    });\n  }, [currentChannel]);\n  return sendMessage;\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { UserMessage, UserMessageUpdateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\nimport topics from '../../../../lib/pubSub/topics';\nimport { PublishingModuleType } from '../../../internalInterfaces';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  isMentionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useUpdateMessageCallback({\n  currentChannel,\n  isMentionEnabled,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (props) => void {\n  return useCallback((props) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = {} as UserMessageUpdateParams;\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const params = createParamsDefault();\n    logger.info('Thread | useUpdateMessageCallback: Message update start.', params);\n\n    currentChannel?.updateUserMessage?.(messageId, params)\n      .then((message: UserMessage) => {\n        logger.info('Thread | useUpdateMessageCallback: Message update succeeded.', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentChannel,\n            message: message,\n          },\n        });\n        pubSub.publish(\n          topics.UPDATE_USER_MESSAGE,\n          {\n            fromSelector: true,\n            channel: currentChannel,\n            message: message,\n            publishingModules: [PublishingModuleType.THREAD],\n          },\n        );\n      });\n  }, [currentChannel, isMentionEnabled]);\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\ninterface StaticProps {\n  logger: Logger;\n}\n\nexport default function useDeleteMessageCallback({\n  currentChannel,\n  threadDispatcher,\n}: DynamicProps, {\n  logger,\n}: StaticProps): (message: SendableMessageType) => Promise<SendableMessageType> {\n  return useCallback((message: SendableMessageType): Promise<SendableMessageType> => {\n    logger.info('Thread | useDeleteMessageCallback: Deleting message.', message);\n    const { sendingStatus } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Thread | useDeleteMessageCallback: Deleting message requestState:', sendingStatus);\n      // Message is only on local\n      if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n        logger.info('Thread | useDeleteMessageCallback: Deleted message from local:', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      logger.info('Thread | useDeleteMessageCallback: Deleting message from remote:', sendingStatus);\n      currentChannel?.deleteMessage?.(message)\n        .then(() => {\n          logger.info('Thread | useDeleteMessageCallback: Deleting message success!', message);\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { message, channel: currentChannel },\n          });\n          resolve(message);\n        })\n        .catch((err) => {\n          logger.warning('Thread | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        });\n    });\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { BaseMessage, ThreadedMessageListParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { ThreadListStateTypes } from '../../types';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  hasMorePrev: boolean;\n  parentMessage: SendableMessageType;\n  threadListState: ThreadListStateTypes;\n  oldestMessageTimeStamp: number;\n  isReactionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetPrevThreadsCallback({\n  hasMorePrev,\n  parentMessage,\n  threadListState,\n  oldestMessageTimeStamp,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): (callback?: (messages?: Array<BaseMessage>) => void) => void {\n  return useCallback((callback) => {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED\n      && parentMessage?.getThreadedMessagesByTimestamp\n      && oldestMessageTimeStamp !== 0\n    ) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      parentMessage.getThreadedMessagesByTimestamp?.(\n        oldestMessageTimeStamp,\n        {\n          prevResultSize: PREV_THREADS_FETCH_SIZE,\n          nextResultSize: 0,\n          includeReactions: isReactionEnabled,\n          includeMetaArray: true,\n        } as ThreadedMessageListParams,\n      )\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: { parentMessage, threadedMessages },\n          });\n          callback(threadedMessages);\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PREV_MESSAGES_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [\n    hasMorePrev,\n    parentMessage,\n    threadListState,\n    oldestMessageTimeStamp,\n  ]);\n}\n","import { BaseMessage, ThreadedMessageListParams } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { NEXT_THREADS_FETCH_SIZE } from '../../consts';\nimport { ThreadListStateTypes } from '../../types';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  hasMoreNext: boolean;\n  parentMessage: SendableMessageType;\n  threadListState: ThreadListStateTypes;\n  latestMessageTimeStamp: number;\n  isReactionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetNextThreadsCallback({\n  hasMoreNext,\n  parentMessage,\n  threadListState,\n  latestMessageTimeStamp,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): (callback: (messages?: Array<BaseMessage>) => void) => void {\n  return useCallback((callback) => {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED\n      && parentMessage?.getThreadedMessagesByTimestamp\n      && latestMessageTimeStamp !== 0\n    ) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_NEXT_MESSAGES_START,\n        payload: null,\n      });\n      parentMessage.getThreadedMessagesByTimestamp?.(\n        latestMessageTimeStamp,\n        {\n          prevResultSize: 0,\n          nextResultSize: NEXT_THREADS_FETCH_SIZE,\n          includeReactions: isReactionEnabled,\n          includeMetaArray: true,\n        } as ThreadedMessageListParams,\n      )\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetNextThreadsCallback: Fetch next threads succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_NEXT_MESSAGES_SUCESS,\n            payload: { parentMessage, threadedMessages },\n          });\n          callback(threadedMessages);\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetNextThreadsCallback: Fetch next threads failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_NEXT_MESSAGES_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [\n    hasMoreNext,\n    parentMessage,\n    threadListState,\n    latestMessageTimeStamp,\n  ]);\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../lib/SendbirdState';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n}\n\nexport default function useToggleReactionCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n}: StaticProps): (message, key, isReacted) => void {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentChannel?.deleteReaction?.(message, key)\n        .then((res) => {\n          logger.info('Thread | useToggleReactionsCallback: Delete reaction succeeded.', res);\n        })\n        .catch((err) => {\n          logger.warning('Thread | useToggleReactionsCallback: Delete reaction failed.', err);\n        });\n      return;\n    }\n    currentChannel?.addReaction?.(message, key)\n      .then((res) => {\n        logger.info('Thread | useToggleReactionsCallback: Add reaction succeeded.', res);\n      })\n      .catch((err) => {\n        logger.warning('Thread | useToggleReactionsCallback: Add reaction failed.', err);\n      });\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { UserMessageCreateParams } from '@sendbird/chat/message';\nimport { User } from '@sendbird/chat';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from '../../../internalInterfaces';\n\nexport type OnBeforeSendUserMessageType = (message: string, quoteMessage?: SendableMessageType) => UserMessageCreateParams;\ninterface DynamicProps {\n  isMentionEnabled: boolean;\n  currentChannel: GroupChannel;\n  onBeforeSendUserMessage?: OnBeforeSendUserMessageType;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport type SendMessageParams = {\n  message: string;\n  quoteMessage?: SendableMessageType;\n  mentionTemplate?: string;\n  mentionedUsers?: Array<User>;\n};\n\nexport default function useSendUserMessageCallback({\n  isMentionEnabled,\n  currentChannel,\n  onBeforeSendUserMessage,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (props: SendMessageParams) => void {\n  const sendMessage = useCallback((props: SendMessageParams) => {\n    const {\n      message,\n      quoteMessage,\n      mentionTemplate,\n      mentionedUsers,\n    } = props;\n    const createDefaultParams = () => {\n      const params = {} as UserMessageCreateParams;\n      params.message = message;\n      const mentionedUsersLength = mentionedUsers?.length || 0;\n      if (isMentionEnabled && mentionedUsersLength) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate && mentionedUsersLength) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      }\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    const params = onBeforeSendUserMessage?.(message, quoteMessage) ?? createDefaultParams();\n    logger.info('Thread | useSendUserMessageCallback: Sending user message start.', params);\n\n    if (currentChannel?.sendUserMessage) {\n      currentChannel?.sendUserMessage(params)\n        .onPending((pendingMessage) => {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_START,\n            payload: { message: pendingMessage },\n          });\n        })\n        .onFailed((error, message) => {\n          logger.info('Thread | useSendUserMessageCallback: Sending user message failed.', { message, error });\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: { error, message },\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('Thread | useSendUserMessageCallback: Sending user message succeeded.', message);\n          // because Thread doesn't subscribe SEND_USER_MESSAGE\n          pubSub.publish(topics.SEND_USER_MESSAGE, {\n            channel: currentChannel,\n            message: message,\n            publishingModules: [PublishingModuleType.THREAD],\n          });\n        });\n    }\n  }, [isMentionEnabled, currentChannel]);\n  return sendMessage;\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, MessageType, MultipleFilesMessage, SendingStatus, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from '../../../internalInterfaces';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useResendMessageCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (failedMessage: SendableMessageType) => void {\n  return useCallback((failedMessage: SendableMessageType) => {\n    if ((failedMessage as SendableMessageType)?.isResendable) {\n      failedMessage.sendingStatus = SendingStatus.PENDING;\n      logger.info('Thread | useResendMessageCallback: Resending failedMessage start.', failedMessage);\n      threadDispatcher({\n        type: ThreadContextActionTypes.RESEND_MESSAGE_START,\n        payload: failedMessage,\n      });\n\n      if (failedMessage?.isUserMessage?.() || failedMessage?.messageType === MessageType.USER) {\n        currentChannel?.resendUserMessage(failedMessage as UserMessage)\n          .then((message) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n            pubSub.publish(topics.SEND_USER_MESSAGE, {\n              channel: currentChannel,\n              message: message,\n              publishingModules: [PublishingModuleType.THREAD],\n\n            });\n          })\n          .catch((error) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            failedMessage.sendingStatus = SendingStatus.FAILED;\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message: failedMessage },\n            });\n          });\n      } else if (failedMessage?.isFileMessage?.() || failedMessage?.messageType === MessageType.FILE) {\n        currentChannel?.resendFileMessage?.(failedMessage as FileMessage)\n          .then((message) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n          })\n          .catch((error) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            failedMessage.sendingStatus = SendingStatus.FAILED;\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message: failedMessage },\n            });\n            pubSub.publish(topics.SEND_FILE_MESSAGE, {\n              channel: currentChannel,\n              message: failedMessage,\n              publishingModules: [PublishingModuleType.THREAD],\n            });\n          });\n      } else if (failedMessage?.isMultipleFilesMessage?.()) {\n        currentChannel?.resendMessage?.(failedMessage as MultipleFilesMessage)\n          // TODO: Handle on pending event (Same goes for the other message types).\n          // TODO: Handle on file info upload event.\n          .onSucceeded((message: MultipleFilesMessage) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n          })\n          .onFailed((error: Error, message: MultipleFilesMessage) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message },\n            });\n            pubSub.publish(topics.SEND_FILE_MESSAGE, {\n              channel: currentChannel,\n              message,\n              publishingModules: [PublishingModuleType.THREAD],\n            });\n          });\n      } else {\n        logger.warning('Thread | useResendMessageCallback: Message is not resendable.', failedMessage);\n        failedMessage.sendingStatus = SendingStatus.FAILED;\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message: failedMessage },\n        });\n      }\n    }\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams, MessageMetaArray } from '@sendbird/chat/message';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport {\n  META_ARRAY_MESSAGE_TYPE_KEY,\n  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,\n  META_ARRAY_VOICE_DURATION_KEY,\n  VOICE_MESSAGE_FILE_NAME,\n  VOICE_MESSAGE_MIME_TYPE,\n} from '../../../../utils/consts';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from '../../../internalInterfaces';\n\ninterface DynamicParams {\n  currentChannel: GroupChannel;\n  onBeforeSendVoiceMessage?: (file: File, quoteMessage?: SendableMessageType) => FileMessageCreateParams;\n}\ninterface StaticParams {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\ntype FuncType = (file: File, duration: number, quoteMessage: SendableMessageType) => void;\ninterface LocalFileMessage extends FileMessage {\n  localUrl: string;\n  file: File;\n}\n\nexport const useSendVoiceMessageCallback = ({\n  currentChannel,\n  onBeforeSendVoiceMessage,\n}: DynamicParams,\n{\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticParams): FuncType => {\n  const sendMessage = useCallback((file: File, duration: number, quoteMessage: SendableMessageType) => {\n    const messageParams: FileMessageCreateParams = (\n      onBeforeSendVoiceMessage\n      && typeof onBeforeSendVoiceMessage === 'function'\n    )\n      ? onBeforeSendVoiceMessage(file, quoteMessage)\n      : {\n        file,\n        fileName: VOICE_MESSAGE_FILE_NAME,\n        mimeType: VOICE_MESSAGE_MIME_TYPE,\n        metaArrays: [\n          new MessageMetaArray({\n            key: META_ARRAY_VOICE_DURATION_KEY,\n            value: [`${duration}`],\n          }),\n          new MessageMetaArray({\n            key: META_ARRAY_MESSAGE_TYPE_KEY,\n            value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE],\n          }),\n        ],\n      };\n    if (quoteMessage) {\n      messageParams.isReplyToChannel = true;\n      messageParams.parentMessageId = quoteMessage.messageId;\n    }\n    logger.info('Thread | useSendVoiceMessageCallback:  Start sending voice message', messageParams);\n    currentChannel?.sendFileMessage(messageParams)\n      .onPending((pendingMessage) => {\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_START,\n          payload: {\n            /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n          },\n        });\n        setTimeout(() => scrollIntoLast(), 1000);\n      })\n      .onFailed((error, message) => {\n        (message as LocalFileMessage).localUrl = URL.createObjectURL(file);\n        (message as LocalFileMessage).file = file;\n        logger.info('Thread | useSendVoiceMessageCallback: Sending voice message failed.', { message, error });\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message, error },\n        });\n      })\n      .onSucceeded((message) => {\n        logger.info('Thread | useSendVoiceMessageCallback: Sending voice message succeeded.', message);\n        pubSub.publish(topics.SEND_FILE_MESSAGE, {\n          channel: currentChannel,\n          message: message,\n          publishingModules: [PublishingModuleType.THREAD],\n        });\n      });\n  }, [\n    currentChannel,\n    onBeforeSendVoiceMessage,\n  ]);\n  return sendMessage;\n};\n\nexport default useSendVoiceMessageCallback;\n","import React, { useReducer, useMemo, useEffect, ReactElement } from 'react';\nimport { User } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type {\n  BaseMessage,\n  FileMessageCreateParams,\n  MultipleFilesMessageCreateParams,\n  UserMessageCreateParams,\n} from '@sendbird/chat/message';\n\nimport { getNicknamesMapFromMembers, getParentMessageFrom } from './utils';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nimport threadReducer from './dux/reducer';\nimport { ThreadContextActionTypes } from './dux/actionTypes';\nimport threadInitialState, { ThreadContextInitialState } from './dux/initialState';\n\nimport useGetChannel from './hooks/useGetChannel';\nimport useGetAllEmoji from './hooks/useGetAllEmoji';\nimport useGetThreadList from './hooks/useGetThreadList';\nimport useGetParentMessage from './hooks/useGetParentMessage';\nimport useHandleThreadPubsubEvents from './hooks/useHandleThreadPubsubEvents';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useSendFileMessageCallback from './hooks/useSendFileMessage';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useGetPrevThreadsCallback from './hooks/useGetPrevThreadsCallback';\nimport useGetNextThreadsCallback from './hooks/useGetNextThreadsCallback';\nimport useToggleReactionCallback from './hooks/useToggleReactionsCallback';\nimport useSendUserMessageCallback, { SendMessageParams } from './hooks/useSendUserMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendVoiceMessageCallback from './hooks/useSendVoiceMessageCallback';\nimport { PublishingModuleType, useSendMultipleFilesMessage } from './hooks/useSendMultipleFilesMessage';\nimport { SendableMessageType } from '../../../utils';\n\nexport type ThreadProviderProps = {\n  children?: React.ReactElement;\n  channelUrl: string;\n  message: SendableMessageType | null;\n  onHeaderActionClick?: () => void;\n  onMoveToParentMessage?: (props: { message: SendableMessageType, channel: GroupChannel }) => void;\n  onBeforeSendUserMessage?: (message: string, quotedMessage?: SendableMessageType) => UserMessageCreateParams;\n  onBeforeSendFileMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;\n  onBeforeSendVoiceMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;\n  onBeforeSendMultipleFilesMessage?: (files: Array<File>, quotedMessage?: SendableMessageType) => MultipleFilesMessageCreateParams;\n  // User Profile\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: { user: User, close: () => void }) => ReactElement;\n  isMultipleFilesMessageEnabled?: boolean;\n};\nexport interface ThreadProviderInterface extends ThreadProviderProps, ThreadContextInitialState {\n  // hooks for fetching threads\n  fetchPrevThreads: (callback?: (messages?: Array<BaseMessage>) => void) => void;\n  fetchNextThreads: (callback?: (messages?: Array<BaseMessage>) => void) => void;\n  toggleReaction: (message, key, isReacted) => void;\n  sendMessage: (props: SendMessageParams) => void;\n  sendFileMessage: (file: File, quoteMessage?: SendableMessageType) => void;\n  sendVoiceMessage: (file: File, duration: number, quoteMessage?: SendableMessageType) => void;\n  sendMultipleFilesMessage: (files: Array<File>, quoteMessage?: SendableMessageType) => void,\n  resendMessage: (failedMessage: SendableMessageType) => void;\n  updateMessage: (props, callback?: () => void) => void;\n  deleteMessage: (message: SendableMessageType) => Promise<SendableMessageType>;\n  nicknamesMap: Map<string, string>;\n}\nconst ThreadContext = React.createContext<ThreadProviderInterface | null>(null);\n\nexport const ThreadProvider: React.FC<ThreadProviderProps> = (props: ThreadProviderProps) => {\n  const {\n    children,\n    channelUrl,\n    onHeaderActionClick,\n    onMoveToParentMessage,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeSendVoiceMessage,\n    onBeforeSendMultipleFilesMessage,\n    isMultipleFilesMessageEnabled,\n    // User Profile\n    disableUserProfile,\n    renderUserProfile,\n  } = props;\n  const propsMessage = props?.message;\n  const propsParentMessage = getParentMessageFrom(propsMessage);\n  // Context from SendbirdProvider\n  const globalStore = useSendbirdStateContext();\n  const { stores, config } = globalStore;\n  // // stores\n  const { sdkStore, userStore } = stores;\n  const { sdk } = sdkStore;\n  const { user } = userStore;\n  const sdkInit = sdkStore?.initialized;\n  // // config\n  const {\n    logger,\n    pubSub,\n    replyType,\n    isMentionEnabled,\n    isReactionEnabled,\n    onUserProfileMessage,\n  } = config;\n\n  // dux of Thread\n  const [threadStore, threadDispatcher] = useReducer(\n    threadReducer,\n    threadInitialState,\n  ) as [ThreadContextInitialState, CustomUseReducerDispatcher];\n  const {\n    currentChannel,\n    allThreadMessages,\n    localThreadMessages,\n    parentMessage,\n    channelState,\n    threadListState,\n    parentMessageState,\n    hasMorePrev,\n    hasMoreNext,\n    emojiContainer,\n    isMuted,\n    isChannelFrozen,\n    currentUserId,\n  }: ThreadContextInitialState = threadStore;\n\n  // Initialization\n  useEffect(() => {\n    threadDispatcher({\n      type: ThreadContextActionTypes.INIT_USER_ID,\n      payload: user?.userId,\n    });\n  }, [user]);\n  useGetChannel({\n    channelUrl,\n    sdkInit,\n    message: propsMessage,\n  }, { sdk, logger, threadDispatcher });\n  useGetParentMessage({\n    channelUrl,\n    sdkInit,\n    parentMessage: propsParentMessage,\n  }, { sdk, logger, threadDispatcher });\n  useGetThreadList({\n    sdkInit,\n    parentMessage,\n    isReactionEnabled,\n    anchorMessage: propsMessage?.messageId !== propsParentMessage?.messageId ? propsMessage : null,\n    // anchorMessage should be null when parentMessage doesn't exist\n  }, { logger, threadDispatcher });\n  useGetAllEmoji({ sdk }, { logger, threadDispatcher });\n  // Handle channel events\n  useHandleChannelEvents({\n    sdk,\n    currentChannel,\n  }, { logger, threadDispatcher });\n  useHandleThreadPubsubEvents({\n    sdkInit,\n    currentChannel,\n    parentMessage,\n  }, { logger, pubSub, threadDispatcher });\n\n  // callbacks\n  const fetchPrevThreads = useGetPrevThreadsCallback({\n    hasMorePrev,\n    parentMessage,\n    threadListState,\n    isReactionEnabled,\n    oldestMessageTimeStamp: allThreadMessages[0]?.createdAt || 0,\n  }, { logger, threadDispatcher });\n  const fetchNextThreads = useGetNextThreadsCallback({\n    hasMoreNext,\n    parentMessage,\n    threadListState,\n    isReactionEnabled,\n    latestMessageTimeStamp: allThreadMessages[allThreadMessages.length - 1]?.createdAt || 0,\n  }, { logger, threadDispatcher });\n  const toggleReaction = useToggleReactionCallback({ currentChannel }, { logger });\n\n  // Send Message Hooks\n  const sendMessage = useSendUserMessageCallback({\n    isMentionEnabled,\n    currentChannel,\n    onBeforeSendUserMessage,\n  }, {\n    logger,\n    pubSub,\n    threadDispatcher,\n  });\n  const sendFileMessage = useSendFileMessageCallback({\n    currentChannel,\n    onBeforeSendFileMessage,\n  }, {\n    logger,\n    pubSub,\n    threadDispatcher,\n  });\n  const sendVoiceMessage = useSendVoiceMessageCallback({\n    currentChannel,\n    onBeforeSendVoiceMessage,\n  }, {\n    logger,\n    pubSub,\n    threadDispatcher,\n  });\n  const [sendMultipleFilesMessage] = useSendMultipleFilesMessage({\n    currentChannel,\n    onBeforeSendMultipleFilesMessage,\n    publishingModules: [PublishingModuleType.THREAD],\n  }, {\n    logger,\n    pubSub,\n  });\n\n  const resendMessage = useResendMessageCallback({\n    currentChannel,\n  }, { logger, pubSub, threadDispatcher });\n  const updateMessage = useUpdateMessageCallback({\n    currentChannel,\n    isMentionEnabled,\n  }, { logger, pubSub, threadDispatcher });\n  const deleteMessage = useDeleteMessageCallback({ currentChannel, threadDispatcher }, { logger });\n\n  // memo\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    (replyType && currentChannel)\n      ? getNicknamesMapFromMembers(currentChannel?.members)\n      : new Map()\n  ), [currentChannel?.members]);\n\n  return (\n    <ThreadContext.Provider\n      value={{\n        // ThreadProviderProps\n        channelUrl,\n        message: propsMessage,\n        onHeaderActionClick,\n        onMoveToParentMessage,\n        isMultipleFilesMessageEnabled,\n        // ThreadContextInitialState\n        currentChannel,\n        allThreadMessages,\n        localThreadMessages,\n        parentMessage,\n        channelState,\n        threadListState,\n        parentMessageState,\n        hasMorePrev,\n        hasMoreNext,\n        emojiContainer,\n        // hooks\n        fetchPrevThreads,\n        fetchNextThreads,\n        toggleReaction,\n        sendMessage,\n        sendFileMessage,\n        sendVoiceMessage,\n        sendMultipleFilesMessage,\n        resendMessage,\n        updateMessage,\n        deleteMessage,\n        // context\n        nicknamesMap,\n        isMuted,\n        isChannelFrozen,\n        currentUserId,\n      }}\n    >\n      {/* UserProfileProvider */}\n      <UserProfileProvider\n        disableUserProfile={disableUserProfile ?? config.disableUserProfile}\n        renderUserProfile={renderUserProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        {children}\n      </UserProfileProvider>\n    </ThreadContext.Provider>\n  );\n};\n\nexport type UseThreadContextType = () => ThreadProviderInterface;\nexport const useThreadContext: UseThreadContextType = () => React.useContext(ThreadContext);\n"],"names":["PREV_THREADS_FETCH_SIZE","NEXT_THREADS_FETCH_SIZE","ThreadContextActionTypes","reducer","state","action","type","actionTypes","INIT_USER_ID","__assign","currentUserId","payload","GET_CHANNEL_START","channelState","ChannelStateTypes","LOADING","currentChannel","GET_CHANNEL_SUCCESS","groupChannel","INITIALIZED","isMuted","_b","_a","members","find","member","userId","isChannelFrozen","isFrozen","GET_CHANNEL_FAILURE","INVALID","SET_EMOJI_CONTAINER","emojiContainer","GET_PARENT_MESSAGE_START","parentMessageState","ParentMessageStateTypes","parentMessage","GET_PARENT_MESSAGE_SUCCESS","GET_PARENT_MESSAGE_FAILURE","INITIALIZE_THREAD_LIST_START","threadListState","ThreadListStateTypes","allThreadMessages","INITIALIZE_THREAD_LIST_SUCCESS","_y","anchorMessage","threadedMessages","anchorMessageCreatedAt_1","messageId","createdAt","anchorIndex","findIndex","message","prevThreadMessages","slice","anchorThreadMessage","nextThreadMessages","hasMorePrev","hasMoreNext","length","flat","INITIALIZE_THREAD_LIST_FAILURE","GET_NEXT_MESSAGES_START","GET_NEXT_MESSAGES_SUCESS","__spreadArray","GET_NEXT_MESSAGES_FAILURE","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAILURE","ON_MESSAGE_RECEIVED","_z","channel","message_1","_c","url","_d","_e","isAlreadyReceived","m","_f","map","filter","reqId","ON_MESSAGE_UPDATED","_0","message_2","_g","_h","_j","msg","ON_MESSAGE_DELETED","_1","messageId_1","_k","_l","NIL","_m","localThreadMessages","_o","ON_MESSAGE_DELETED_BY_REQ_ID","compareIds","ON_REACTION_UPDATED","reactionEvent_1","_p","reactionEvent","_q","_s","_r","applyReactionEvent","call","ON_USER_MUTED","_2","user","_t","ON_USER_UNMUTED","_3","_u","ON_USER_BANNED","ON_USER_UNBANNED","ON_USER_LEFT","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_OPERATOR_UPDATED","_v","SEND_MESSAGE_START","SEND_MESSAGE_SUCESS","message_3","SEND_MESSAGE_FAILURE","message_4","RESEND_MESSAGE_START","ON_FILE_INFO_UPLOADED","_4","channelUrl","requestId_1","index","uploadableFileInfo","error","_w","messageToUpdate","hasReqId","fileInfoList","_x","messageParams","Array","isArray","initialState","useGetChannel","sdkInit","sdk","logger","threadDispatcher","useEffect","getChannel","then","info","catch","useGetAllEmoji","getAllEmoji","useGetThreadList","isReactionEnabled","getThreadedMessagesByTimestamp","timeStamp","params","prevResultSize","nextResultSize","includeReactions","includeMetaArray","useGetParentMessage","_this","getMessage","params_1","channelType","ChannelType","GROUP","includeThreadInfo","includeParentMessageInfo","fetchParentMessage","__awaiter","data","sent","parentMsg","ogMetaData","useHandleThreadPubsubEvents","pubSub","subscriber","Map","subscribe","set","topics","props","publishingModules","parentMessageId","includes","PublishingModuleType","THREAD","pendingMessage","isMultipleFilesMessage","fileInfo","URL","createObjectURL","file","scrollIntoLast","PUBSUB_TOPICS","response","channelActions","SEND_USER_MESSAGE","SEND_MESSAGE_FAILED","SEND_FILE_MESSAGE","UPDATE_USER_MESSAGE","DELETE_MESSAGE","forEach","s","remove","useHandleChannelEvents","handlerId","uuidv4","addGroupChannelHandler","channelHandlerParams","onMessageReceived","onMessageUpdated","onMessageDeleted","onReactionUpdated","onUserMuted","onUserUnmuted","onUserBanned","onUserUnbanned","onUserLeft","onChannelFrozen","onChannelUnfrozen","onOperatorUpdated","users","channelHandler","GroupChannelHandler","removeGroupChannelHandler","useSendFileMessageCallback","onBeforeSendFileMessage","sendMessage","useCallback","quoteMessage","Promise","resolve","reject","createParamsDefault","isReplyToChannel","sendFileMessage","onPending","requestState","setTimeout","onFailed","localUrl","onSucceeded","publish","useUpdateMessageCallback","isMentionEnabled","mentionedUsers","mentionTemplate","mentionedMessageTemplate","updateUserMessage","fromSelector","useDeleteMessageCallback","sendingStatus","deleteMessage","err","warning","useGetPrevThreadsCallback","oldestMessageTimeStamp","callback","useGetNextThreadsCallback","latestMessageTimeStamp","useToggleReactionCallback","key","isReacted","deleteReaction","res","addReaction","useSendUserMessageCallback","onBeforeSendUserMessage","createDefaultParams","mentionedUsersLength","sendUserMessage","useResendMessageCallback","failedMessage","isResendable","SendingStatus","PENDING","isUserMessage","messageType","MessageType","USER","resendUserMessage","FAILED","isFileMessage","FILE","resendFileMessage","resendMessage","useSendVoiceMessageCallback","onBeforeSendVoiceMessage","duration","fileName","VOICE_MESSAGE_FILE_NAME","mimeType","VOICE_MESSAGE_MIME_TYPE","metaArrays","MessageMetaArray","META_ARRAY_VOICE_DURATION_KEY","value","concat","META_ARRAY_MESSAGE_TYPE_KEY","META_ARRAY_MESSAGE_TYPE_VALUE__VOICE","ThreadContext","React","createContext","ThreadProvider","children","onHeaderActionClick","onMoveToParentMessage","onBeforeSendMultipleFilesMessage","isMultipleFilesMessageEnabled","disableUserProfile","renderUserProfile","propsMessage","propsParentMessage","getParentMessageFrom","globalStore","useSendbirdStateContext","stores","config","sdkStore","userStore","initialized","replyType","onUserProfileMessage","useReducer","threadReducer","threadInitialState","threadStore","fetchPrevThreads","fetchNextThreads","toggleReaction","sendVoiceMessage","sendMultipleFilesMessage","useSendMultipleFilesMessage","updateMessage","nicknamesMap","useMemo","getNicknamesMapFromMembers","createElement","Provider","UserProfileProvider","useThreadContext","useContext"],"mappings":"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"}