import React__default, { useRef, useState, useContext } from 'react';
import { u as useLocalization, a as LocalizationContext } from '../../LocalizationContext-287ee149.js';
import ContextMenu, { MenuItems, MenuItem } from '../../ui/ContextMenu.js';
import IconButton from '../../ui/IconButton.js';
import Icon, { IconTypes, IconColors } from '../../ui/Icon.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { n as noop } from '../../utils-6c50a6d1.js';
import { Modal } from '../../ui/Modal.js';
import { u as useChannelListContext } from '../../ChannelListProvider-eccd99c6.js';
import '../../stringSet-6422c6b9.js';
import '../../index-e4277f9c.js';
import '../../tslib.es6-c2fb729e.js';
import 'react-dom';
import '../../ui/SortByRow.js';
import '../../uuid-c15b8b3b.js';
import '../../index-776554c0.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../index-09847c0f.js';
import '../../index-92741c7e.js';
import 'prop-types';
import '../../withSendbird.js';
import '../../index-04bd1a59.js';
import '../../MediaQueryContext-114ca049.js';
import '../../ui/Button.js';
import '../../types-9d43ac6e.js';
import '@sendbird/chat/groupChannel';
import '../../pubSub/topics.js';
import '../../consts-d9c5f25a.js';
import '../../UserProfileContext-2001a468.js';

var LeaveChannel = function (props) {
  var _a, _b, _c;
  var _d = props.channel,
    channel = _d === void 0 ? null : _d,
    _e = props.onSubmit,
    onSubmit = _e === void 0 ? noop : _e,
    _f = props.onCancel,
    onCancel = _f === void 0 ? noop : _f;
  var channelFromContext = (_a = useChannelListContext()) === null || _a === void 0 ? void 0 : _a.currentChannel;
  var leavingChannel = channel || channelFromContext;
  var state = useSendbirdStateContext();
  var stringSet = useLocalization().stringSet;
  var logger = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.logger;
  var isOnline = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.isOnline;
  if (leavingChannel) {
    return /*#__PURE__*/React__default.createElement(Modal, {
      disabled: !isOnline,
      onCancel: onCancel,
      onSubmit: function () {
        logger.info('ChannelSettings: Leaving channel', leavingChannel);
        leavingChannel === null || leavingChannel === void 0 ? void 0 : leavingChannel.leave().then(function () {
          logger.info('ChannelSettings: Leaving channel successful!', leavingChannel);
          onSubmit();
        });
      },
      submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER,
      titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE
    });
  }
};

function ChannelPreviewAction(_a) {
  var channel = _a.channel,
    _b = _a.disabled,
    disabled = _b === void 0 ? false : _b,
    onLeaveChannel = _a.onLeaveChannel;
  var parentRef = useRef(null);
  var parentContainerRef = useRef(null);
  var _c = useState(false),
    showModal = _c[0],
    setShowModal = _c[1];
  var stringSet = useContext(LocalizationContext).stringSet;
  return /*#__PURE__*/React__default.createElement("div", {
    ref: parentContainerRef,
    tabIndex: 0,
    role: "button",
    style: {
      display: 'inline-block'
    },
    onKeyDown: function (e) {
      return e.stopPropagation();
    },
    onClick: function (e) {
      return e.stopPropagation();
    }
  }, /*#__PURE__*/React__default.createElement(ContextMenu, {
    menuTrigger: function (toggleDropdown) {
      return /*#__PURE__*/React__default.createElement(IconButton, {
        ref: parentRef,
        onClick: toggleDropdown,
        height: "32px",
        width: "32px"
      }, /*#__PURE__*/React__default.createElement(Icon, {
        type: IconTypes.MORE,
        fillColor: IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      }));
    },
    menuItems: function (closeDropdown) {
      return /*#__PURE__*/React__default.createElement(MenuItems, {
        parentRef: parentRef,
        parentContainRef: parentContainerRef,
        closeDropdown: closeDropdown
      }, /*#__PURE__*/React__default.createElement(MenuItem, {
        onClick: function () {
          if (disabled) {
            return;
          }
          setShowModal(true);
          closeDropdown();
        },
        dataSbId: "channel_list_item_context_menu_leave_channel"
      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));
    }
  }), showModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {
    channel: channel,
    onSubmit: function () {
      setShowModal(false);
      onLeaveChannel();
    },
    onCancel: function () {
      return setShowModal(false);
    }
  }));
}

export { ChannelPreviewAction as default };
//# sourceMappingURL=ChannelPreviewAction.js.map
