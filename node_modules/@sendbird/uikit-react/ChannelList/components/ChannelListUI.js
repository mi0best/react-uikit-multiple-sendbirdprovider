import React__default, { useState } from 'react';
import ChannelListHeader from './ChannelListHeader.js';
import { AddChannel } from './AddChannel.js';
import ChannelPreview from './ChannelPreview.js';
import ChannelPreviewAction from './ChannelPreviewAction.js';
import { u as useChannelListContext, L as LEAVE_CHANNEL_SUCCESS, S as SET_CURRENT_CHANNEL } from '../../ChannelListProvider-eccd99c6.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import EditProfile from '../../EditUserProfile.js';
import PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';
import { i as isAboutSame } from '../../utils-6c50a6d1.js';
import '../../LocalizationContext-287ee149.js';
import '../../stringSet-6422c6b9.js';
import '../../index-e4277f9c.js';
import '../../index-92741c7e.js';
import 'prop-types';
import '../../ui/Avatar.js';
import '../../tslib.es6-c2fb729e.js';
import '../../ui/ImageRenderer.js';
import '../../ui/Icon.js';
import '../../uuid-c15b8b3b.js';
import '../../ui/IconButton.js';
import '../../CreateChannel.js';
import '../../CreateChannel/components/CreateChannelUI.js';
import '../../CreateChannelProvider-a2885972.js';
import '../../sendbirdSelectors.js';
import '../../pubSub/topics.js';
import '../../CreateChannel/components/InviteUsers.js';
import '../../ui/Modal.js';
import 'react-dom';
import '../../index-09847c0f.js';
import '../../index-04bd1a59.js';
import '../../MediaQueryContext-114ca049.js';
import '../../ui/Button.js';
import '../../types-9d43ac6e.js';
import '../../ui/UserListItem.js';
import '../../UserProfileContext-2001a468.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../ui/ContextMenu.js';
import '../../ui/SortByRow.js';
import '../../index-776554c0.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../CreateChannel/components/SelectChannelType.js';
import '../../_rollupPluginBabelHelpers-e92eb032.js';
import '../../ui/ChannelAvatar.js';
import '../../utils-2c1f072b.js';
import '../../ui/Badge.js';
import '../../index-4b4e9682.js';
import '../../index-2d27aeef.js';
import '../../ui/Loader.js';
import '../../index-f8a9cb51.js';
import '../../index-682a192c.js';
import '../../ui/MentionUserLabel.js';
import '../../consts-57c888b9.js';
import '../../ui/TextButton.js';
import '../../color-57373b4c.js';
import '../../Channel/components/TypingIndicator.js';
import '@sendbird/chat/groupChannel';
import '../../ChannelProvider-9ba5893a.js';
import '../../const-73db0277.js';
import '../../utils-aa4086dc.js';
import '@sendbird/chat/message';
import '../../useSendMultipleFilesMessage-b8256698.js';
import '../../compareIds-7e517404.js';
import '../../consts-d9c5f25a.js';
import '../../resolvedReplyType-fb987595.js';
import '../../useLongPress-f8655a14.js';
import '../../withSendbird.js';
import '../../EditUserProfile/context.js';
import '../../EditUserProfile/components/EditUserProfileUI.js';
import '../../ui/Input.js';
import '../../actionTypes-324495ed.js';

var ChannelListUI = function (props) {
  var _a;
  var renderHeader = props.renderHeader,
    renderChannelPreview = props.renderChannelPreview,
    renderPlaceHolderError = props.renderPlaceHolderError,
    renderPlaceHolderLoading = props.renderPlaceHolderLoading,
    renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;
  var _b = useState(false),
    showProfileEdit = _b[0],
    setShowProfileEdit = _b[1];
  var _c = useChannelListContext(),
    onThemeChange = _c.onThemeChange,
    allowProfileEdit = _c.allowProfileEdit,
    allChannels = _c.allChannels,
    loading = _c.loading,
    currentChannel = _c.currentChannel,
    channelListDispatcher = _c.channelListDispatcher,
    typingChannels = _c.typingChannels,
    initialized = _c.initialized,
    fetchChannelList = _c.fetchChannelList;
  var state = useSendbirdStateContext();
  var sdkStore = (_a = state === null || state === void 0 ? void 0 : state.stores) === null || _a === void 0 ? void 0 : _a.sdkStore;
  var config = state === null || state === void 0 ? void 0 : state.config;
  var logger = config.logger,
    _d = config.isOnline,
    isOnline = _d === void 0 ? false : _d;
  var sdkError = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.error;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-channel-list__header"
  }, (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || /*#__PURE__*/React__default.createElement(ChannelListHeader, {
    onEdit: function () {
      if (allowProfileEdit) {
        setShowProfileEdit(true);
      }
    },
    allowProfileEdit: allowProfileEdit,
    renderIconButton: function () {
      return /*#__PURE__*/React__default.createElement(AddChannel, null);
    }
  })), showProfileEdit && /*#__PURE__*/React__default.createElement(EditProfile, {
    onThemeChange: onThemeChange,
    onCancel: function () {
      setShowProfileEdit(false);
    },
    onEditProfile: function () {
      setShowProfileEdit(false);
    }
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-channel-list__body",
    onScroll: function (e) {
      var target = e === null || e === void 0 ? void 0 : e.target;
      if (isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 10)) {
        fetchChannelList();
      }
    }
  }, sdkError && !loading && (renderPlaceHolderError && typeof renderPlaceHolderError === 'function' ? renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError() : /*#__PURE__*/React__default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.WRONG
  })), /*#__PURE__*/React__default.createElement("div", null, allChannels && allChannels.map(function (channel, idx) {
    // todo: Refactor and move this inside channel - preview
    var onLeaveChannel = function (c, cb) {
      logger.info('ChannelList: Leaving channel', c);
      c.leave().then(function (res) {
        logger.info('ChannelList: Leaving channel success', res);
        if (cb && typeof cb === 'function') {
          cb(res, null);
        }
        channelListDispatcher({
          type: LEAVE_CHANNEL_SUCCESS,
          payload: channel === null || channel === void 0 ? void 0 : channel.url
        });
      }).catch(function (err) {
        logger.error('ChannelList: Leaving channel failed', err);
        if (cb && typeof cb === 'function') {
          cb(null, err);
        }
      });
    };
    var onClick = function () {
      if (!isOnline) {
        return;
      }
      logger.info('ChannelList: Clicked on channel:', channel);
      channelListDispatcher({
        type: SET_CURRENT_CHANNEL,
        payload: channel
      });
    };
    return renderChannelPreview ?
    /*#__PURE__*/
    // eslint-disable-next-line
    React__default.createElement("div", {
      key: channel === null || channel === void 0 ? void 0 : channel.url,
      onClick: onClick
    }, renderChannelPreview({
      channel: channel,
      onLeaveChannel: onLeaveChannel
    })) : /*#__PURE__*/React__default.createElement(ChannelPreview, {
      key: channel === null || channel === void 0 ? void 0 : channel.url,
      tabIndex: idx,
      onClick: onClick,
      channel: channel,
      onLeaveChannel: function () {
        return onLeaveChannel(channel, null);
      },
      isActive: (channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url),
      isTyping: typingChannels === null || typingChannels === void 0 ? void 0 : typingChannels.some(function (_a) {
        var url = _a.url;
        return url === (channel === null || channel === void 0 ? void 0 : channel.url);
      }),
      renderChannelAction: function () {
        return /*#__PURE__*/React__default.createElement(ChannelPreviewAction, {
          channel: channel,
          disabled: !isOnline,
          onLeaveChannel: function () {
            return onLeaveChannel(channel, null);
          }
        });
      }
    });
  })), !initialized && loading && (renderPlaceHolderLoading && typeof renderPlaceHolderLoading === 'function' ? renderPlaceHolderLoading === null || renderPlaceHolderLoading === void 0 ? void 0 : renderPlaceHolderLoading() : /*#__PURE__*/React__default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.LOADING
  })), initialized && (allChannels === null || allChannels === void 0 ? void 0 : allChannels.length) === 0 && (renderPlaceHolderEmptyList && typeof renderPlaceHolderEmptyList === 'function' ? renderPlaceHolderEmptyList === null || renderPlaceHolderEmptyList === void 0 ? void 0 : renderPlaceHolderEmptyList() : /*#__PURE__*/React__default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.NO_CHANNELS
  }))));
};

export { ChannelListUI as default };
//# sourceMappingURL=ChannelListUI.js.map
