{"version":3,"file":"utils-aa4086dc.js","sources":["../src/modules/Channel/context/utils.ts"],"sourcesContent":["import React from 'react';\nimport { EmojiContainer } from '@sendbird/chat';\nimport { GroupChannel, Member } from '@sendbird/chat/groupChannel';\nimport format from 'date-fns/format';\n\nimport { CoreMessageType, isReadMessage, SendableMessageType } from '../../../utils';\nimport { BaseMessage, SendingStatus } from '@sendbird/chat/message';\n\nexport const scrollToRenderedMessage = (\n  scrollRef: React.MutableRefObject<HTMLElement>,\n  initialTimeStamp: number,\n  setIsScrolled?: (val: boolean) => void,\n) => {\n  try {\n    const container = scrollRef.current;\n    // scroll into the message with initialTimeStamp\n    const element = container.querySelectorAll(`[data-sb-created-at=\"${initialTimeStamp}\"]`)?.[0];\n    if (element instanceof HTMLElement) {\n      // Calculate the offset of the element from the top of the container\n      const containerHeight = container.offsetHeight;\n      const elementHeight = element.offsetHeight;\n      const elementOffset = (containerHeight - elementHeight) / 2;\n      // Set the scroll position of the container to bring the element to the middle\n      container.scrollTop = element.offsetTop - elementOffset;\n    }\n  } catch {\n    // do nothing\n  } finally {\n    setIsScrolled?.(true);\n  }\n};\n\n/* eslint-disable default-param-last */\nexport const scrollIntoLast = (\n  initialTry = 0,\n  scrollRef: React.MutableRefObject<HTMLElement>,\n  setIsScrolled?: (val: boolean) => void,\n) => {\n  const MAX_TRIES = 10;\n  const currentTry = initialTry;\n  if (currentTry > MAX_TRIES) {\n    setIsScrolled?.(true);\n    return;\n  }\n  try {\n    const scrollDOM = scrollRef?.current || document.querySelector('.sendbird-conversation__messages-padding');\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n    setIsScrolled?.(true);\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1, scrollRef, setIsScrolled);\n    }, 500 * currentTry);\n  }\n};\n\nexport const isOperator = (groupChannel?: GroupChannel) => {\n  const myRole = groupChannel?.myRole;\n  return myRole === 'operator';\n};\n\nexport const isDisabledBecauseFrozen = (groupChannel?: GroupChannel) => {\n  const isFrozen = groupChannel?.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nexport const isDisabledBecauseMuted = (groupChannel?: GroupChannel) => {\n  const myMutedState = groupChannel?.myMutedState;\n  return myMutedState === 'muted';\n};\n\nexport const getAllEmojisMapFromEmojiContainer = (emojiContainer: EmojiContainer) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojisMap = new Map();\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      const { key, url } = emojis[emojiIndex];\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\n\nexport const getNicknamesMapFromMembers = (members: Member[] = []) => {\n  const nicknamesMap = new Map<string, string>();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nconst getUniqueListBy = <T>(arr: T[], key: keyof T): T[] => {\n  const entries = arr.map((item) => [item[key], item] as [T[keyof T], T]);\n  return Array.from(new Map(entries).values());\n};\nconst getUniqueListByMessageId = (arr: BaseMessage[]) => {\n  return getUniqueListBy(arr, 'messageId');\n};\nconst sortByCreatedAt = (messages: BaseMessage[]) => {\n  return messages.sort((a, b) => a.createdAt - b.createdAt);\n};\n\nexport const mergeAndSortMessages = (oldMessages: BaseMessage[], newMessages: BaseMessage[]) => {\n  const lastOldMessage = oldMessages[oldMessages.length - 1];\n  const firstNewMessage = newMessages[0];\n  // If the last message of oldMessages is older than the first message of newMessages,\n  // then we can safely append newMessages to oldMessages.\n  if (lastOldMessage?.createdAt < firstNewMessage?.createdAt) {\n    return [...oldMessages, ...newMessages];\n  }\n\n  // todo: optimize this\n  // If the last message of oldMessages is newer than the first message of newMessages,\n  // then we need to merge the two arrays and sort them by createdAt.\n  const mergedMessages = [...oldMessages, ...newMessages];\n  const unique = getUniqueListByMessageId(mergedMessages);\n  return sortByCreatedAt(unique);\n};\n\nexport const getMessageCreatedAt = (message: BaseMessage) => format(message.createdAt, 'p');\n\nexport const isSameGroup = (\n  message: SendableMessageType | BaseMessage,\n  comparingMessage: SendableMessageType | BaseMessage,\n  currentChannel: GroupChannel,\n) => {\n  if (\n    !(\n      message\n      && comparingMessage\n      && message.messageType\n      && message.messageType !== 'admin'\n      && comparingMessage.messageType\n      && comparingMessage?.messageType !== 'admin'\n      && 'sender' in message\n      && 'sender' in comparingMessage\n      && message.createdAt\n      && comparingMessage.createdAt\n      && message.sender.userId\n      && comparingMessage.sender.userId\n    )\n  ) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const passUnsuccessfullMessages = (\n  allMessages: (CoreMessageType | SendableMessageType)[],\n  newMessage: CoreMessageType | SendableMessageType,\n) => {\n  if (\n    'sendingStatus' in newMessage\n    && (newMessage.sendingStatus === SendingStatus.SUCCEEDED || newMessage.sendingStatus === SendingStatus.PENDING)\n  ) {\n    const lastIndexOfSucceededMessage = allMessages\n      .map((message) => {\n        if ('sendingStatus' in message && message.sendingStatus) return message.sendingStatus;\n        return message.isAdminMessage() ? SendingStatus.SUCCEEDED : null;\n      })\n      .lastIndexOf(SendingStatus.SUCCEEDED);\n\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      const messages = [...allMessages];\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [...allMessages, newMessage];\n};\n\nexport const pxToNumber = (px: string | number) => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport const isAboutSame = (a: number, b: number, px: number) => {\n  return Math.abs(a - b) <= px;\n};\n"],"names":["scrollToRenderedMessage","scrollRef","initialTimeStamp","setIsScrolled","container","current","element","_a","querySelectorAll","concat","HTMLElement","containerHeight","offsetHeight","elementHeight","elementOffset","scrollTop","offsetTop","_b","scrollIntoLast","initialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollHeight","error","setTimeout","isOperator","groupChannel","myRole","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","myMutedState","getAllEmojisMapFromEmojiContainer","emojiContainer","emojiCategories","allEmojisMap","Map","categoryIndex","length","emojis","emojiIndex","key","url","set","getNicknamesMapFromMembers","members","nicknamesMap","memberIndex","userId","nickname","getUniqueListBy","arr","entries","map","item","Array","from","values","getUniqueListByMessageId","sortByCreatedAt","messages","sort","a","b","createdAt","mergeAndSortMessages","oldMessages","newMessages","lastOldMessage","firstNewMessage","__spreadArray","mergedMessages","unique","getMessageCreatedAt","message","format","isSameGroup","comparingMessage","currentChannel","messageType","sender","sendingStatus","isReadMessage","passUnsuccessfullMessages","allMessages","newMessage","SendingStatus","SUCCEEDED","PENDING","lastIndexOfSucceededMessage","isAdminMessage","lastIndexOf","splice","pxToNumber","px","parsed","Number","parseFloat","isNaN","isAboutSame","Math","abs"],"mappings":"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"}