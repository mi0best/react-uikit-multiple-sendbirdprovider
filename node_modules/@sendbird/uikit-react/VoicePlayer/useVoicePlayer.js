import { useState, useEffect } from 'react';
import { u as useVoicePlayerContext, b as AudioUnitDefaultValue } from '../index-e04159fe.js';
import { h as VOICE_PLAYER_AUDIO_ID } from '../consts-d9c5f25a.js';
import { useVoiceRecorderContext } from '../VoiceRecorder/context.js';
import '../tslib.es6-c2fb729e.js';
import '../useSendbirdStateContext.js';
import '../withSendbird.js';
import '../LocalizationContext-287ee149.js';
import '../stringSet-6422c6b9.js';
import '../index-e4277f9c.js';
import '../ui/Modal.js';
import 'react-dom';
import '../utils-6c50a6d1.js';
import '../index-09847c0f.js';
import '../index-04bd1a59.js';
import '../MediaQueryContext-114ca049.js';
import '../ui/IconButton.js';
import '../ui/Button.js';
import '../index-92741c7e.js';
import 'prop-types';
import '../types-9d43ac6e.js';
import '../ui/Icon.js';

var generateGroupKey = function (channelUrl, key) {
  if (channelUrl === void 0) {
    channelUrl = '';
  }
  if (key === void 0) {
    key = '';
  }
  return "".concat(channelUrl, "-").concat(key);
};

var useVoicePlayer = function (_a) {
  var _b;
  var _c = _a.key,
    key = _c === void 0 ? '' : _c,
    _d = _a.channelUrl,
    channelUrl = _d === void 0 ? '' : _d,
    _e = _a.audioFile,
    audioFile = _e === void 0 ? null : _e,
    _f = _a.audioFileUrl,
    audioFileUrl = _f === void 0 ? '' : _f;
  var groupKey = useState(generateGroupKey(channelUrl, key))[0];
  var _g = useVoicePlayerContext(),
    play = _g.play,
    pause = _g.pause,
    stop = _g.stop,
    voicePlayerStore = _g.voicePlayerStore;
  var isRecordable = useVoiceRecorderContext().isRecordable;
  var currentAudioUnit = ((_b = voicePlayerStore === null || voicePlayerStore === void 0 ? void 0 : voicePlayerStore.audioStorage) === null || _b === void 0 ? void 0 : _b[groupKey]) || AudioUnitDefaultValue();
  var playVoicePlayer = function () {
    if (!isRecordable) {
      play === null || play === void 0 ? void 0 : play({
        groupKey: groupKey,
        audioFile: audioFile,
        audioFileUrl: audioFileUrl
      });
    }
  };
  var pauseVoicePlayer = function () {
    pause === null || pause === void 0 ? void 0 : pause(groupKey);
  };
  var stopVoicePlayer = function (text) {
    if (text === void 0) {
      text = '';
    }
    stop === null || stop === void 0 ? void 0 : stop(text);
  };
  useEffect(function () {
    return function () {
      var _a;
      if (audioFile || audioFileUrl) {
        // Can't get the current AudioPlayer through the React hooks(useReducer or useState) in this scope
        var voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);
        (_a = voiceAudioPlayerElement === null || voiceAudioPlayerElement === void 0 ? void 0 : voiceAudioPlayerElement.pause) === null || _a === void 0 ? void 0 : _a.call(voiceAudioPlayerElement);
      }
    };
  }, []);
  return {
    play: playVoicePlayer,
    pause: pauseVoicePlayer,
    stop: stopVoicePlayer,
    playbackTime: currentAudioUnit.playbackTime * 1000,
    duration: currentAudioUnit.duration * 1000,
    // the unit of playbackTime and duration should be millisecond
    playingStatus: currentAudioUnit.playingStatus
  };
};

export { useVoicePlayer };
//# sourceMappingURL=useVoicePlayer.js.map
