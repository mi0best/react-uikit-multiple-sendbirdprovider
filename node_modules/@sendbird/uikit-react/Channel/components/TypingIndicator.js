import React__default, { useContext, useState, useEffect } from 'react';
import { GroupChannelHandler } from '@sendbird/chat/groupChannel';
import { a as LocalizationContext } from '../../LocalizationContext-287ee149.js';
import { u as uuidv4 } from '../../uuid-c15b8b3b.js';
import { L as Label, a as LabelTypography, b as LabelColors } from '../../index-92741c7e.js';
import { u as useChannelContext } from '../../ChannelProvider-9ba5893a.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import '../../stringSet-6422c6b9.js';
import '../../index-e4277f9c.js';
import 'prop-types';
import '../../UserProfileContext-2001a468.js';
import '../../const-73db0277.js';
import '../../utils-aa4086dc.js';
import '../../tslib.es6-c2fb729e.js';
import '../../index-2d27aeef.js';
import '../../index-776554c0.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../index-09847c0f.js';
import '@sendbird/chat/message';
import '../../useSendMultipleFilesMessage-b8256698.js';
import '../../pubSub/topics.js';
import '../../compareIds-7e517404.js';
import '../../_rollupPluginBabelHelpers-e92eb032.js';
import '../../consts-d9c5f25a.js';
import '../../resolvedReplyType-fb987595.js';
import '../../withSendbird.js';

var TypingIndicatorText = function (_a) {
  var members = _a.members;
  var stringSet = useContext(LocalizationContext).stringSet;
  if (!members || members.length === 0) {
    return '';
  }
  if (members && members.length === 1) {
    return "".concat(members[0].nickname, " ").concat(stringSet.TYPING_INDICATOR__IS_TYPING);
  }
  if (members && members.length === 2) {
    return "".concat(members[0].nickname, " ").concat(stringSet.TYPING_INDICATOR__AND, " ").concat(members[1].nickname, " ").concat(stringSet.TYPING_INDICATOR__ARE_TYPING);
  }
  return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;
};
var TypingIndicator = function () {
  var _a, _b, _c;
  var channelUrl = useChannelContext().channelUrl;
  var globalStore = useSendbirdStateContext();
  var sb = (_b = (_a = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;
  var logger = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _c === void 0 ? void 0 : _c.logger;
  var _d = useState(uuidv4()),
    handlerId = _d[0],
    setHandlerId = _d[1];
  var _e = useState([]),
    typingMembers = _e[0],
    setTypingMembers = _e[1];
  useEffect(function () {
    var _a;
    if ((_a = sb === null || sb === void 0 ? void 0 : sb.groupChannel) === null || _a === void 0 ? void 0 : _a.addGroupChannelHandler) {
      sb.groupChannel.removeGroupChannelHandler(handlerId);
      var newHandlerId = uuidv4();
      var handler = new GroupChannelHandler({
        onTypingStatusUpdated: function (groupChannel) {
          // there is a possible warning in here - setState called after unmount
          logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);
          if (groupChannel.url === channelUrl) {
            var members = groupChannel.getTypingUsers();
            setTypingMembers(members);
          }
        }
      });
      sb.groupChannel.addGroupChannelHandler(newHandlerId, handler);
      setHandlerId(newHandlerId);
    }
    return function () {
      var _a;
      setTypingMembers([]);
      if ((_a = sb === null || sb === void 0 ? void 0 : sb.groupChannel) === null || _a === void 0 ? void 0 : _a.removeGroupChannelHandler) {
        sb.groupChannel.removeGroupChannelHandler(handlerId);
      }
    };
  }, [channelUrl]);
  return /*#__PURE__*/React__default.createElement(Label, {
    className: "sendbird-conversation__footer__typing-indicator__text",
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_2
  }, /*#__PURE__*/React__default.createElement(TypingIndicatorText, {
    members: typingMembers
  }));
};

export { TypingIndicatorText, TypingIndicator as default };
//# sourceMappingURL=TypingIndicator.js.map
