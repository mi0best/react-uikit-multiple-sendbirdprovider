import { c as __spreadArray } from '../../tslib.es6-c2fb729e.js';
import React__default, { useContext, useState, useEffect } from 'react';
import { d as isDisabledBecauseFrozen, e as isDisabledBecauseMuted, f as isOperator } from '../../utils-aa4086dc.js';
import MessageInput from '../../ui/MessageInput.js';
import QuoteMessageInput from '../../ui/QuoteMessageInput.js';
import { a as LocalizationContext } from '../../LocalizationContext-287ee149.js';
import { u as useChannelContext } from '../../ChannelProvider-9ba5893a.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import SuggestedMentionList from './SuggestedMentionList.js';
import { M as MessageInputKeys } from '../../const-93731a4c.js';
import { u as useHandleUploadFiles, V as VoiceMessageInputWrapper } from '../../useHandleUploadFiles-5ede1bfe.js';
import { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';
import { u as useMediaQueryContext } from '../../MediaQueryContext-114ca049.js';
import '../../index-2d27aeef.js';
import '../../index-e4277f9c.js';
import '../../index-776554c0.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../index-09847c0f.js';
import '@sendbird/chat/message';
import '../../_rollupPluginBabelHelpers-e92eb032.js';
import 'prop-types';
import '../../const-73db0277.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../index-92741c7e.js';
import '../../stringSet-6422c6b9.js';
import '../../types-9d43ac6e.js';
import '../../index-6b3b1eca.js';
import 'dompurify';
import '../../consts-57c888b9.js';
import '../../consts-4ec7d640.js';
import '../../consts-be37687e.js';
import '../../ui/Icon.js';
import '../../tokenize-eae44765.js';
import '../../ui/ImageRenderer.js';
import '../../utils-bfc0ab3b.js';
import '../../UserProfileContext-2001a468.js';
import '../../useSendMultipleFilesMessage-b8256698.js';
import '../../pubSub/topics.js';
import '../../compareIds-7e517404.js';
import '@sendbird/chat/groupChannel';
import '../../uuid-c15b8b3b.js';
import '../../consts-d9c5f25a.js';
import '../../resolvedReplyType-fb987595.js';
import '../../withSendbird.js';
import '../../ui/Avatar.js';
import '../../Thread/context.js';
import '../../Thread/context/types.js';
import '@sendbird/chat';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../index-e04159fe.js';
import '../../VoiceRecorder/context.js';
import '../../ui/Modal.js';
import 'react-dom';
import '../../utils-6c50a6d1.js';
import '../../index-04bd1a59.js';
import '../../VoiceRecorder/useVoiceRecorder.js';
import '../../index-493689bd.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ProgressBar.js';
import '../../ui/TextButton.js';
import '../../color-57373b4c.js';
import '../../hooks/useModal.js';

var MessageInputWrapper = function (props, ref) {
  var _a;
  var value = props.value,
    renderFileUploadIcon = props.renderFileUploadIcon,
    renderVoiceMessageIcon = props.renderVoiceMessageIcon,
    renderSendMessageIcon = props.renderSendMessageIcon;
  var propDisabled = props.disabled;
  var channelContext = useChannelContext();
  var currentGroupChannel = channelContext.currentGroupChannel,
    initialized = channelContext.initialized,
    quoteMessage = channelContext.quoteMessage,
    sendMessage = channelContext.sendMessage,
    sendFileMessage = channelContext.sendFileMessage,
    sendVoiceMessage = channelContext.sendVoiceMessage,
    sendMultipleFilesMessage = channelContext.sendMultipleFilesMessage,
    setQuoteMessage = channelContext.setQuoteMessage,
    messageInputRef = channelContext.messageInputRef,
    renderUserMentionItem = channelContext.renderUserMentionItem;
  var globalStore = useSendbirdStateContext();
  var isMobile = useMediaQueryContext().isMobile;
  var channel = currentGroupChannel;
  var _b = globalStore.config,
    isOnline = _b.isOnline,
    isMentionEnabled = _b.isMentionEnabled,
    userMention = _b.userMention,
    isVoiceMessageEnabled = _b.isVoiceMessageEnabled,
    logger = _b.logger;
  var isMultipleFilesMessageEnabled = (_a = channelContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : globalStore.config.isMultipleFilesMessageEnabled;
  var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10;
  var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15;
  var stringSet = useContext(LocalizationContext).stringSet;
  var _c = useState(''),
    mentionNickname = _c[0],
    setMentionNickname = _c[1];
  // todo: set type
  var _d = useState([]),
    mentionedUsers = _d[0],
    setMentionedUsers = _d[1];
  var _e = useState([]),
    mentionedUserIds = _e[0],
    setMentionedUserIds = _e[1];
  var _f = useState(null),
    selectedUser = _f[0],
    setSelectedUser = _f[1];
  var _g = useState([]),
    mentionSuggestedUsers = _g[0],
    setMentionSuggestedUsers = _g[1];
  var _h = useState(null),
    messageInputEvent = _h[0],
    setMessageInputEvent = _h[1];
  var _j = useState(false),
    showVoiceMessageInput = _j[0],
    setShowVoiceMessageInput = _j[1];
  var disabled = propDisabled || !initialized || isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel) || !isOnline;
  var isOperator$1 = isOperator(channel);
  var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isDisabledBecauseFrozen(channel) && !isDisabledBecauseMuted(channel) && !isBroadcast;
  // Reset when channel changes
  useEffect(function () {
    setMentionNickname('');
    setMentionedUsers([]);
    setMentionedUserIds([]);
    setSelectedUser(null);
    setMentionSuggestedUsers([]);
    setMessageInputEvent(null);
    setShowVoiceMessageInput(false);
  }, [channel === null || channel === void 0 ? void 0 : channel.url]);
  var mentionNodes = useDirtyGetMentions({
    ref: ref || messageInputRef
  }, {
    logger: logger
  });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
  useEffect(function () {
    setMentionedUsers(mentionedUsers.filter(function (_a) {
      var userId = _a.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  // MFM
  var handleUploadFiles = useHandleUploadFiles({
    sendFileMessage: sendFileMessage,
    sendMultipleFilesMessage: sendMultipleFilesMessage,
    quoteMessage: quoteMessage
  }, {
    logger: logger
  })[0];
  // broadcast channel + not operator
  if (isBroadcast && !isOperator$1) {
    return null;
  }
  // other conditions
  return /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-message-input-wrapper".concat(showVoiceMessageInput ? '--voice-message' : '')
  }, displaySuggestedMentionList && /*#__PURE__*/React__default.createElement(SuggestedMentionList, {
    targetNickname: mentionNickname,
    inputEvent: messageInputEvent,
    renderUserMentionItem: renderUserMentionItem,
    onUserItemClick: function (user) {
      if (user) {
        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
      }
      setMentionNickname('');
      setSelectedUser(user);
      setMessageInputEvent(null);
    },
    onFocusItemChange: function () {
      setMessageInputEvent(null);
    },
    onFetchUsers: function (users) {
      setMentionSuggestedUsers(users);
    },
    ableAddMention: ableMention,
    maxMentionCount: maxUserMentionCount,
    maxSuggestionCount: maxUserSuggestionCount
  }), quoteMessage && /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-message-input-wrapper__quote-message-input"
  }, /*#__PURE__*/React__default.createElement(QuoteMessageInput, {
    replyingMessage: quoteMessage,
    onClose: function () {
      return setQuoteMessage(null);
    }
  })), showVoiceMessageInput ? /*#__PURE__*/React__default.createElement(VoiceMessageInputWrapper, {
    channel: channel,
    onSubmitClick: function (recordedFile, duration) {
      sendVoiceMessage(recordedFile, duration, quoteMessage);
      setQuoteMessage(null);
      setShowVoiceMessageInput(false);
    },
    onCancelClick: function () {
      setShowVoiceMessageInput(false);
    }
  }) : /*#__PURE__*/React__default.createElement(MessageInput, {
    className: "sendbird-message-input-wrapper__message-input",
    value: value,
    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,
    mentionSelectedUser: selectedUser,
    isMentionEnabled: isMentionEnabled,
    isVoiceMessageEnabled: isVoiceMessageEnabled,
    isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled,
    onVoiceMessageIconClick: function () {
      setShowVoiceMessageInput(true);
    },
    setMentionedUsers: setMentionedUsers,
    channel: channel,
    placeholder: quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER || isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || isDisabledBecauseMuted(channel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED),
    ref: ref || messageInputRef,
    disabled: disabled,
    renderFileUploadIcon: renderFileUploadIcon,
    renderSendMessageIcon: renderSendMessageIcon,
    renderVoiceMessageIcon: renderVoiceMessageIcon,
    onStartTyping: function () {
      channel === null || channel === void 0 ? void 0 : channel.startTyping();
    },
    onSendMessage: function (_a) {
      var _b;
      var message = _a.message,
        mentionTemplate = _a.mentionTemplate;
      sendMessage({
        message: message,
        quoteMessage: quoteMessage,
        mentionedUsers: mentionedUsers,
        mentionTemplate: mentionTemplate
      });
      setMentionNickname('');
      setMentionedUsers([]);
      setQuoteMessage(null);
      (_b = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b === void 0 ? void 0 : _b.call(channel);
    },
    onFileUpload: function (fileList) {
      handleUploadFiles(fileList);
      setQuoteMessage(null);
    },
    onUserMentioned: function (user) {
      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
        setSelectedUser(null);
        setMentionNickname('');
      }
    },
    onMentionStringChange: function (mentionText) {
      setMentionNickname(mentionText);
    },
    onMentionedUserIdsUpdated: function (userIds) {
      setMentionedUserIds(userIds);
    },
    onKeyDown: function (e) {
      if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
        setMessageInputEvent(e);
        return true;
      }
      return false;
    }
  }));
};
var MessageInputWrapper$1 = /*#__PURE__*/React__default.forwardRef(MessageInputWrapper);

export { MessageInputWrapper$1 as default };
//# sourceMappingURL=MessageInput.js.map
