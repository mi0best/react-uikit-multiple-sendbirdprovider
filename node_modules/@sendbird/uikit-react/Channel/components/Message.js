import { c as __spreadArray } from '../../tslib.es6-c2fb729e.js';
import React__default, { useState, useEffect, useRef, useLayoutEffect, useMemo } from 'react';
import { f as format } from '../../index-2d27aeef.js';
import SuggestedMentionList from './SuggestedMentionList.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { u as useChannelContext } from '../../ChannelProvider-9ba5893a.js';
import { o as getClassName } from '../../index-776554c0.js';
import { d as isDisabledBecauseFrozen, e as isDisabledBecauseMuted } from '../../utils-aa4086dc.js';
import { M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from '../../const-73db0277.js';
import DateSeparator from '../../ui/DateSeparator.js';
import { L as Label, a as LabelTypography, b as LabelColors } from '../../index-92741c7e.js';
import MessageInput from '../../ui/MessageInput.js';
import MessageContent from '../../ui/MessageContent.js';
import FileViewer from './FileViewer.js';
import RemoveMessage from './RemoveMessageModal.js';
import { M as MessageInputKeys } from '../../const-93731a4c.js';
import { u as useLocalization } from '../../LocalizationContext-287ee149.js';
import { a as useHandleOnScrollCallback } from '../../index-494f9e79.js';
import { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';
import '../../index-e4277f9c.js';
import '../../ui/Icon.js';
import 'prop-types';
import '../../ui/Avatar.js';
import '../../ui/ImageRenderer.js';
import '../../uuid-c15b8b3b.js';
import '../../Thread/context.js';
import '../../useSendMultipleFilesMessage-b8256698.js';
import '../../pubSub/topics.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../UserProfileContext-2001a468.js';
import '../../Thread/context/types.js';
import '@sendbird/chat';
import '@sendbird/chat/message';
import '@sendbird/chat/groupChannel';
import '../../consts-d9c5f25a.js';
import '../../withSendbird.js';
import '../../index-09847c0f.js';
import '../../compareIds-7e517404.js';
import '../../_rollupPluginBabelHelpers-e92eb032.js';
import '../../resolvedReplyType-fb987595.js';
import '../../color-57373b4c.js';
import '../../stringSet-6422c6b9.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../types-9d43ac6e.js';
import '../../index-6b3b1eca.js';
import 'dompurify';
import '../../consts-57c888b9.js';
import '../../consts-4ec7d640.js';
import '../../consts-be37687e.js';
import '../../tokenize-eae44765.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../utils-6c50a6d1.js';
import '../../index-4b4e9682.js';
import '../../ui/Loader.js';
import '../../index-f8a9cb51.js';
import '../../index-682a192c.js';
import '../../ui/MessageItemMenu.js';
import '../../ui/ContextMenu.js';
import 'react-dom';
import '../../ui/SortByRow.js';
import '../../types-781e0bab.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ReactionButton.js';
import '../../useLongPress-f8655a14.js';
import '../../MediaQueryContext-114ca049.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../index-04bd1a59.js';
import '../../ui/UserListItem.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../Message/context.js';
import '../../ui/AdminMessage.js';
import '../../ui/TextMessageItemBody.js';
import '../../index-a0638563.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../utils-bfc0ab3b.js';
import '../../ui/OGMessageItemBody.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../ui/QuoteMessage.js';
import '../../index-c22e4772.js';
import '../../ui/ThreadReplies.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../index-e04159fe.js';
import '../../VoiceRecorder/context.js';
import '../../ui/Modal.js';
import '../../ui/PlaybackTime.js';
import '../../useStatefulFileInfoList-5e68b93f.js';
import '../../index-0f017704.js';
import '../../stringFormatterUtils-abbe70ba.js';

var useDidMountEffect = function (func, deps) {
  var _a = useState(false),
    didMount = _a[0],
    setDidmount = _a[1];
  useEffect(function () {
    if (didMount) {
      func();
    } else {
      setDidmount(true);
    }
  }, deps);
};

// todo: Refactor this component, is too complex now
var Message = function (_a) {
  var _b, _c;
  var message = _a.message,
    hasSeparator = _a.hasSeparator,
    chainTop = _a.chainTop,
    chainBottom = _a.chainBottom,
    handleScroll = _a.handleScroll,
    renderCustomSeparator = _a.renderCustomSeparator,
    renderEditInput = _a.renderEditInput,
    renderMessage = _a.renderMessage,
    renderMessageContent = _a.renderMessageContent;
  var dateLocale = useLocalization().dateLocale;
  var globalStore = useSendbirdStateContext();
  var _d = globalStore.config,
    userId = _d.userId,
    isOnline = _d.isOnline,
    isMentionEnabled = _d.isMentionEnabled,
    userMention = _d.userMention,
    logger = _d.logger;
  var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || MAX_USER_MENTION_COUNT;
  var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || MAX_USER_SUGGESTION_COUNT;
  var _e = useChannelContext(),
    initialized = _e.initialized,
    currentGroupChannel = _e.currentGroupChannel,
    highLightedMessageId = _e.highLightedMessageId,
    setHighLightedMessageId = _e.setHighLightedMessageId,
    animatedMessageId = _e.animatedMessageId,
    setAnimatedMessageId = _e.setAnimatedMessageId,
    updateMessage = _e.updateMessage,
    scrollToMessage = _e.scrollToMessage,
    replyType = _e.replyType,
    threadReplySelectType = _e.threadReplySelectType,
    isReactionEnabled = _e.isReactionEnabled,
    toggleReaction = _e.toggleReaction,
    emojiContainer = _e.emojiContainer,
    nicknamesMap = _e.nicknamesMap,
    setQuoteMessage = _e.setQuoteMessage,
    resendMessage = _e.resendMessage,
    deleteMessage = _e.deleteMessage,
    renderUserMentionItem = _e.renderUserMentionItem,
    onReplyInThread = _e.onReplyInThread,
    onQuoteMessageClick = _e.onQuoteMessageClick,
    onMessageAnimated = _e.onMessageAnimated,
    onMessageHighlighted = _e.onMessageHighlighted,
    onScrollCallback = _e.onScrollCallback,
    setIsScrolled = _e.setIsScrolled;
  var _f = useState(false),
    showEdit = _f[0],
    setShowEdit = _f[1];
  var _g = useState(false),
    showRemove = _g[0],
    setShowRemove = _g[1];
  var _h = useState(false),
    showFileViewer = _h[0],
    setShowFileViewer = _h[1];
  var _j = useState(false),
    isAnimated = _j[0],
    setIsAnimated = _j[1];
  var _k = useState(false),
    isHighlighted = _k[0],
    setIsHighlighted = _k[1];
  var _l = useState(''),
    mentionNickname = _l[0],
    setMentionNickname = _l[1];
  var _m = useState([]),
    mentionedUsers = _m[0],
    setMentionedUsers = _m[1];
  var _o = useState([]),
    mentionedUserIds = _o[0],
    setMentionedUserIds = _o[1];
  var _p = useState(null),
    messageInputEvent = _p[0],
    setMessageInputEvent = _p[1];
  var _q = useState(null),
    selectedUser = _q[0],
    setSelectedUser = _q[1];
  var _r = useState([]),
    mentionSuggestedUsers = _r[0],
    setMentionSuggestedUsers = _r[1];
  var editMessageInputRef = useRef(null);
  var messageScrollRef = useRef(null);
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isDisabledBecauseFrozen(currentGroupChannel) && !isDisabledBecauseMuted(currentGroupChannel);
  var disabled = !initialized || isDisabledBecauseFrozen(currentGroupChannel) || isDisabledBecauseMuted(currentGroupChannel) || !isOnline;
  var handleOnScroll = useHandleOnScrollCallback({
    hasMore: false,
    onScroll: onScrollCallback,
    scrollRef: messageScrollRef,
    setIsScrolled: setIsScrolled
  });
  var mentionNodes = useDirtyGetMentions({
    ref: editMessageInputRef
  }, {
    logger: logger
  });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
  useEffect(function () {
    setMentionedUsers(mentionedUsers.filter(function (_a) {
      var userId = _a.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  useLayoutEffect(function () {
    // Keep the scrollBottom value after fetching new message list
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
  }, []);
  /**
   * Move the messsage list scroll
   * when the message's height is changed by `showEdit` OR `message.reactions`
   */
  useDidMountEffect(function () {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
  }, [showEdit, (_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length]);
  useDidMountEffect(function () {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
  }, [message === null || message === void 0 ? void 0 : message.updatedAt]);
  useLayoutEffect(function () {
    var animationTimeout = null;
    var messageHighlightedTimeout = null;
    if (highLightedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
      handleOnScroll();
      setIsAnimated(false);
      animationTimeout = setTimeout(function () {
        setIsHighlighted(true);
      }, 500);
      messageHighlightedTimeout = setTimeout(function () {
        setHighLightedMessageId(0);
        onMessageHighlighted === null || onMessageHighlighted === void 0 ? void 0 : onMessageHighlighted();
      }, 1600);
    } else {
      setIsHighlighted(false);
    }
    return function () {
      clearTimeout(animationTimeout);
      clearTimeout(messageHighlightedTimeout);
    };
  }, [highLightedMessageId, messageScrollRef.current, message.messageId]);
  useLayoutEffect(function () {
    var animationTimeout = null;
    var messageAnimatedTimeout = null;
    if (animatedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
      handleOnScroll();
      setIsHighlighted(false);
      animationTimeout = setTimeout(function () {
        setIsAnimated(true);
      }, 500);
      messageAnimatedTimeout = setTimeout(function () {
        setAnimatedMessageId(0);
        onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();
      }, 1600);
    } else {
      setIsAnimated(false);
    }
    return function () {
      clearTimeout(animationTimeout);
      clearTimeout(messageAnimatedTimeout);
    };
  }, [animatedMessageId, messageScrollRef.current, message.messageId, onMessageAnimated]);
  var renderedMessage = useMemo(function () {
    return renderMessage === null || renderMessage === void 0 ? void 0 : renderMessage({
      message: message,
      chainTop: chainTop,
      chainBottom: chainBottom
    });
  }, [message, renderMessage]);
  var renderedCustomSeparator = useMemo(function () {
    if (renderCustomSeparator) {
      return renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({
        message: message
      });
    }
    return null;
  }, [message, renderCustomSeparator]);
  if (renderedMessage) {
    return /*#__PURE__*/React__default.createElement("div", {
      // do not delete this data attribute, used for scroll to given message
      // and also for testing
      "data-sb-message-id": message.messageId,
      "data-sb-created-at": message.createdAt,
      ref: messageScrollRef,
      className: getClassName(['sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated ? 'sendbird-msg-hoc__animated' : '', isHighlighted ? 'sendbird-msg-hoc__highlighted' : ''])
    },
    // TODO: Add message instance as a function parameter
    hasSeparator && (renderedCustomSeparator || /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {
      type: LabelTypography.CAPTION_2,
      color: LabelColors.ONBACKGROUND_2
    }, format(message.createdAt, 'MMMM dd, yyyy', {
      locale: dateLocale
    })))), renderedMessage);
  }
  if (showEdit && ((_c = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _c === void 0 ? void 0 : _c.call(message))) {
    return (renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || /*#__PURE__*/React__default.createElement(React__default.Fragment, null, displaySuggestedMentionList && /*#__PURE__*/React__default.createElement(SuggestedMentionList, {
      targetNickname: mentionNickname,
      inputEvent: messageInputEvent,
      renderUserMentionItem: renderUserMentionItem,
      onUserItemClick: function (user) {
        if (user) {
          setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
        }
        setMentionNickname('');
        setSelectedUser(user);
        setMessageInputEvent(null);
      },
      onFocusItemChange: function () {
        setMessageInputEvent(null);
      },
      onFetchUsers: function (users) {
        setMentionSuggestedUsers(users);
      },
      ableAddMention: ableMention,
      maxMentionCount: maxUserMentionCount,
      maxSuggestionCount: maxUserSuggestionCount
    }), /*#__PURE__*/React__default.createElement(MessageInput, {
      isEdit: true,
      channel: currentGroupChannel,
      disabled: disabled,
      ref: editMessageInputRef,
      mentionSelectedUser: selectedUser,
      isMentionEnabled: isMentionEnabled,
      message: message,
      onStartTyping: function () {
        var _a;
        (_a = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentGroupChannel);
      },
      onUpdateMessage: function (_a) {
        var _b;
        var messageId = _a.messageId,
          message = _a.message,
          mentionTemplate = _a.mentionTemplate;
        updateMessage({
          messageId: messageId,
          message: message,
          mentionedUsers: mentionedUsers,
          mentionTemplate: mentionTemplate
        });
        setShowEdit(false);
        (_b = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentGroupChannel);
      },
      onCancelEdit: function () {
        var _a;
        setMentionNickname('');
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setMentionSuggestedUsers([]);
        setShowEdit(false);
        (_a = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.endTyping) === null || _a === void 0 ? void 0 : _a.call(currentGroupChannel);
      },
      onUserMentioned: function (user) {
        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
          setSelectedUser(null);
          setMentionNickname('');
        }
      },
      onMentionStringChange: function (mentionText) {
        setMentionNickname(mentionText);
      },
      onMentionedUserIdsUpdated: function (userIds) {
        setMentionedUserIds(userIds);
      },
      onKeyDown: function (e) {
        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
          setMessageInputEvent(e);
          return true;
        }
        return false;
      }
    }));
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: getClassName(['sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated ? 'sendbird-msg-hoc__animated' : '', isHighlighted ? 'sendbird-msg-hoc__highlighted' : '']),
    style: {
      marginBottom: '2px'
    },
    "data-sb-message-id": message.messageId,
    "data-sb-created-at": message.createdAt,
    ref: messageScrollRef
  }, hasSeparator && (renderedCustomSeparator || /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_2
  }, format(message.createdAt, 'MMMM dd, yyyy', {
    locale: dateLocale
  })))), (renderMessageContent === null || renderMessageContent === void 0 ? void 0 : renderMessageContent()) || /*#__PURE__*/React__default.createElement(MessageContent, {
    className: "sendbird-message-hoc__message-content",
    userId: userId,
    scrollToMessage: scrollToMessage,
    channel: currentGroupChannel,
    message: message,
    disabled: !isOnline,
    chainTop: chainTop,
    chainBottom: chainBottom,
    isReactionEnabled: isReactionEnabled,
    replyType: replyType,
    threadReplySelectType: threadReplySelectType,
    nicknamesMap: nicknamesMap,
    emojiContainer: emojiContainer,
    showEdit: setShowEdit,
    showRemove: setShowRemove,
    showFileViewer: setShowFileViewer,
    resendMessage: resendMessage,
    deleteMessage: deleteMessage,
    toggleReaction: toggleReaction,
    setQuoteMessage: setQuoteMessage,
    onReplyInThread: onReplyInThread,
    onQuoteMessageClick: onQuoteMessageClick,
    onMessageHeightChange: handleScroll
  }), showRemove && /*#__PURE__*/React__default.createElement(RemoveMessage, {
    message: message,
    onCancel: function () {
      return setShowRemove(false);
    }
  }), showFileViewer && /*#__PURE__*/React__default.createElement(FileViewer, {
    message: message,
    onCancel: function () {
      return setShowFileViewer(false);
    }
  }));
};

export { Message as default };
//# sourceMappingURL=Message.js.map
