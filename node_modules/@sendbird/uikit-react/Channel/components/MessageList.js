import React__default, { useState, useEffect } from 'react';
import { u as useChannelContext } from '../../ChannelProvider-9ba5893a.js';
import PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';
import Icon, { IconTypes, IconColors } from '../../ui/Icon.js';
import Message from './Message.js';
import { i as isAboutSame, s as scrollIntoLast } from '../../utils-aa4086dc.js';
import { getMessagePartsInfo } from '../utils/getMessagePartsInfo.js';
import UnreadCount from './UnreadCount.js';
import FrozenNotification from './FrozenNotification.js';
import { S as SCROLL_BUFFER } from '../../consts-d9c5f25a.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { MessageProvider } from '../../Message/context.js';
import { u as useDebounce, a as useHandleOnScrollCallback } from '../../index-494f9e79.js';
import '../../UserProfileContext-2001a468.js';
import '../../const-73db0277.js';
import '../../tslib.es6-c2fb729e.js';
import '../../index-2d27aeef.js';
import '../../index-e4277f9c.js';
import '@sendbird/chat/message';
import '../../index-09847c0f.js';
import '../../useSendMultipleFilesMessage-b8256698.js';
import '../../pubSub/topics.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../compareIds-7e517404.js';
import '../../index-776554c0.js';
import '@sendbird/chat/groupChannel';
import '../../uuid-c15b8b3b.js';
import '../../_rollupPluginBabelHelpers-e92eb032.js';
import '../../resolvedReplyType-fb987595.js';
import '../../LocalizationContext-287ee149.js';
import '../../stringSet-6422c6b9.js';
import '../../index-92741c7e.js';
import 'prop-types';
import '../../ui/Loader.js';
import './SuggestedMentionList.js';
import '../../ui/Avatar.js';
import '../../ui/ImageRenderer.js';
import '../../const-93731a4c.js';
import '../../Thread/context.js';
import '../../Thread/context/types.js';
import '@sendbird/chat';
import '../../ui/DateSeparator.js';
import '../../color-57373b4c.js';
import '../../ui/MessageInput.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../types-9d43ac6e.js';
import '../../index-6b3b1eca.js';
import 'dompurify';
import '../../consts-57c888b9.js';
import '../../consts-4ec7d640.js';
import '../../consts-be37687e.js';
import '../../tokenize-eae44765.js';
import '../../ui/MessageContent.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../utils-6c50a6d1.js';
import '../../index-4b4e9682.js';
import '../../index-f8a9cb51.js';
import '../../index-682a192c.js';
import '../../ui/MessageItemMenu.js';
import '../../ui/ContextMenu.js';
import 'react-dom';
import '../../ui/SortByRow.js';
import '../../types-781e0bab.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ReactionButton.js';
import '../../useLongPress-f8655a14.js';
import '../../MediaQueryContext-114ca049.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../index-04bd1a59.js';
import '../../ui/UserListItem.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../ui/AdminMessage.js';
import '../../ui/TextMessageItemBody.js';
import '../../index-a0638563.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../utils-bfc0ab3b.js';
import '../../ui/OGMessageItemBody.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../ui/QuoteMessage.js';
import '../../index-c22e4772.js';
import '../../ui/ThreadReplies.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../index-e04159fe.js';
import '../../VoiceRecorder/context.js';
import '../../ui/Modal.js';
import '../../withSendbird.js';
import '../../ui/PlaybackTime.js';
import '../../useStatefulFileInfoList-5e68b93f.js';
import '../../index-0f017704.js';
import './FileViewer.js';
import './RemoveMessageModal.js';
import '../../stringFormatterUtils-abbe70ba.js';
import '../../Message/hooks/useDirtyGetMentions.js';
import '../utils/compareMessagesForGrouping.js';

var DELAY = 500;
function useSetScrollToBottom(_a) {
  var loading = _a.loading;
  var _b = useState(0),
    scrollBottom = _b[0],
    setScrollBottom = _b[1];
  useEffect(function () {
    if (loading) {
      setScrollBottom(0);
    }
  }, [loading]);
  var scrollCb = function (e) {
    var element = e.target;
    try {
      setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);
    } catch (_a) {
      //
    }
  };
  return {
    scrollBottom: scrollBottom,
    scrollToBottomHandler: useDebounce(scrollCb, DELAY)
  };
}

function useScrollBehavior() {
  var _a = useChannelContext(),
    scrollRef = _a.scrollRef,
    _b = _a.scrollBehavior,
    scrollBehavior = _b === void 0 ? 'auto' : _b;
  useEffect(function () {
    if (scrollRef.current) {
      scrollRef.current.style.scrollBehavior = scrollBehavior;
    }
  }, [scrollRef.current]);
  return null;
}

var SCROLL_BOTTOM_PADDING = 50;
var MessageList = function (_a) {
  var _b = _a.className,
    className = _b === void 0 ? '' : _b,
    renderMessage = _a.renderMessage,
    renderPlaceholderEmpty = _a.renderPlaceholderEmpty,
    renderCustomSeparator = _a.renderCustomSeparator,
    renderPlaceholderLoader = _a.renderPlaceholderLoader;
  var _c = useChannelContext(),
    allMessages = _c.allMessages,
    localMessages = _c.localMessages,
    hasMorePrev = _c.hasMorePrev,
    hasMoreNext = _c.hasMoreNext,
    setInitialTimeStamp = _c.setInitialTimeStamp,
    setAnimatedMessageId = _c.setAnimatedMessageId,
    setHighLightedMessageId = _c.setHighLightedMessageId,
    isMessageGroupingEnabled = _c.isMessageGroupingEnabled,
    scrollRef = _c.scrollRef,
    onScrollCallback = _c.onScrollCallback,
    onScrollDownCallback = _c.onScrollDownCallback,
    messagesDispatcher = _c.messagesDispatcher,
    messageActionTypes = _c.messageActionTypes,
    currentGroupChannel = _c.currentGroupChannel,
    disableMarkAsRead = _c.disableMarkAsRead,
    filterMessageList = _c.filterMessageList,
    replyType = _c.replyType,
    loading = _c.loading,
    isScrolled = _c.isScrolled,
    unreadSince = _c.unreadSince;
  var store = useSendbirdStateContext();
  var allMessagesFiltered = typeof filterMessageList === 'function' ? allMessages.filter(filterMessageList) : allMessages;
  var markAsReadScheduler = store.config.markAsReadScheduler;
  useScrollBehavior();
  var onScroll = function () {
    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (element == null) {
      return;
    }
    var scrollTop = element.scrollTop,
      clientHeight = element.clientHeight,
      scrollHeight = element.scrollHeight;
    if (isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
      onScrollCallback();
    }
    if (isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && hasMoreNext) {
      onScrollDownCallback(function (_a) {
        var messages = _a[0];
        if (messages) {
          try {
            setTimeout(function () {
              return scrollIntoLast(0, scrollRef);
            },
            /**
             * Rendering MFM takes long time so we need this.
             * But later we should find better solution.
             */
            1000);
            // element.scrollTop = scrollHeight - clientHeight;
            // scrollRef.current.scrollTop = scrollHeight - clientHeight;
          } catch (error) {
            //
          }
        }
      });
    }
    if (!disableMarkAsRead && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && !!currentGroupChannel) {
      messagesDispatcher({
        type: messageActionTypes.MARK_AS_READ,
        payload: {
          channel: currentGroupChannel
        }
      });
      markAsReadScheduler.push(currentGroupChannel);
    }
  };
  var onClickScrollBot = function () {
    var _a, _b, _c, _d, _e;
    setInitialTimeStamp === null || setInitialTimeStamp === void 0 ? void 0 : setInitialTimeStamp(null);
    setAnimatedMessageId === null || setAnimatedMessageId === void 0 ? void 0 : setAnimatedMessageId(null);
    setHighLightedMessageId === null || setHighLightedMessageId === void 0 ? void 0 : setHighLightedMessageId(null);
    if (((_a = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _a === void 0 ? void 0 : _a.scrollTop) > -1) {
      scrollRef.current.scrollTop = ((_c = (_b = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _b === void 0 ? void 0 : _b.scrollHeight) !== null && _c !== void 0 ? _c : 0) - ((_e = (_d = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0);
    }
  };
  /**
   * 1. Move the messsage list scroll
   *    when each message's height is changed by `reactions` OR `showEdit`
   * 2. Keep the scrollBottom value after fetching new message list
   */
  var moveScroll = function (isBottomMessageAffected) {
    if (isBottomMessageAffected === void 0) {
      isBottomMessageAffected = false;
    }
    var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (current) {
      var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
      if (scrollBottom < bottom && (!isBottomMessageAffected || scrollBottom < SCROLL_BUFFER)) {
        // Move the scroll as much as the height of the message has changed
        current.scrollTop += bottom - scrollBottom;
      }
    }
  };
  var handleOnScroll = useHandleOnScrollCallback({
    hasMore: hasMorePrev,
    hasNext: hasMoreNext,
    onScroll: onScroll,
    scrollRef: scrollRef
  });
  var _d = useSetScrollToBottom({
      loading: loading
    }),
    scrollToBottomHandler = _d.scrollToBottomHandler,
    scrollBottom = _d.scrollBottom;
  if (loading) {
    return typeof renderPlaceholderLoader === 'function' ? renderPlaceholderLoader() : /*#__PURE__*/React__default.createElement(PlaceHolder, {
      type: PlaceHolderTypes.LOADING
    });
  }
  if (allMessagesFiltered.length < 1) {
    if (renderPlaceholderEmpty && typeof renderPlaceholderEmpty === 'function') {
      return renderPlaceholderEmpty();
    }
    return /*#__PURE__*/React__default.createElement(PlaceHolder, {
      className: "sendbird-conversation__no-messages",
      type: PlaceHolderTypes.NO_MESSAGES
    });
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, !isScrolled && /*#__PURE__*/React__default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.LOADING
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-conversation__messages ".concat(className)
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-conversation__scroll-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-conversation__padding"
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-conversation__messages-padding",
    ref: scrollRef,
    onScroll: function (e) {
      handleOnScroll();
      scrollToBottomHandler(e);
    }
  }, allMessagesFiltered.map(function (m, idx) {
    var _a, _b;
    var _c = getMessagePartsInfo({
        allMessages: allMessagesFiltered,
        replyType: replyType,
        isMessageGroupingEnabled: isMessageGroupingEnabled,
        currentIndex: idx,
        currentMessage: m,
        currentChannel: currentGroupChannel
      }),
      chainTop = _c.chainTop,
      chainBottom = _c.chainBottom,
      hasSeparator = _c.hasSeparator;
    var isByMe = ((_a = m === null || m === void 0 ? void 0 : m.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.userId);
    return /*#__PURE__*/React__default.createElement(MessageProvider, {
      message: m,
      key: m === null || m === void 0 ? void 0 : m.messageId,
      isByMe: isByMe
    }, /*#__PURE__*/React__default.createElement(Message, {
      handleScroll: moveScroll,
      renderMessage: renderMessage,
      message: m,
      hasSeparator: hasSeparator,
      chainTop: chainTop,
      chainBottom: chainBottom,
      renderCustomSeparator: renderCustomSeparator
    }));
  }), localMessages.map(function (m, idx) {
    var _a, _b;
    var _c = getMessagePartsInfo({
        allMessages: allMessagesFiltered,
        replyType: replyType,
        isMessageGroupingEnabled: isMessageGroupingEnabled,
        currentIndex: idx,
        currentMessage: m,
        currentChannel: currentGroupChannel
      }),
      chainTop = _c.chainTop,
      chainBottom = _c.chainBottom;
    var isByMe = ((_a = m === null || m === void 0 ? void 0 : m.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.userId);
    return /*#__PURE__*/React__default.createElement(MessageProvider, {
      message: m,
      key: m === null || m === void 0 ? void 0 : m.messageId,
      isByMe: isByMe
    }, /*#__PURE__*/React__default.createElement(Message, {
      handleScroll: moveScroll,
      renderMessage: renderMessage,
      message: m,
      chainTop: chainTop,
      chainBottom: chainBottom,
      renderCustomSeparator: renderCustomSeparator
    }));
  }))), (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isFrozen) && /*#__PURE__*/React__default.createElement(FrozenNotification, {
    className: "sendbird-conversation__messages__notification"
  }), unreadSince && /*#__PURE__*/React__default.createElement(UnreadCount, {
    className: "sendbird-conversation__messages__notification",
    count: currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.unreadMessageCount,
    time: unreadSince,
    onClick: function () {
      var _a, _b, _c, _d, _e;
      if ((_a = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _a === void 0 ? void 0 : _a.scrollTop) {
        scrollRef.current.scrollTop = ((_c = (_b = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _b === void 0 ? void 0 : _b.scrollHeight) !== null && _c !== void 0 ? _c : 0) - ((_e = (_d = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0);
      }
      if (!disableMarkAsRead && !!currentGroupChannel) {
        markAsReadScheduler.push(currentGroupChannel);
        messagesDispatcher({
          type: messageActionTypes.MARK_AS_READ,
          payload: {
            channel: currentGroupChannel
          }
        });
      }
      setInitialTimeStamp(null);
      setAnimatedMessageId(null);
      setHighLightedMessageId(null);
    }
  }),
  // This flag is an unmatched variable
  scrollBottom > SCROLL_BOTTOM_PADDING && /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-conversation__scroll-bottom-button",
    onClick: onClickScrollBot,
    onKeyDown: onClickScrollBot,
    tabIndex: 0,
    role: "button"
  }, /*#__PURE__*/React__default.createElement(Icon, {
    width: "24px",
    height: "24px",
    type: IconTypes.CHEVRON_DOWN,
    fillColor: IconColors.PRIMARY
  }))));
};

export { MessageList as default };
//# sourceMappingURL=MessageList.js.map
