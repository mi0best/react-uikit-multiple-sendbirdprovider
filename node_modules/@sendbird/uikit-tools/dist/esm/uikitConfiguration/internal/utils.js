import { isSameType } from '../../utils/isSameType.js';
/**
 * @param localConfigs Set directly in code level. It has higher priority than remote ones
 * @param remoteConfigs Set by Feature Config setting in Dashboard
 * @returns
 */
export function getConfigsByPriority(localConfigs, remoteConfigs) {
    // copy remoteConfigs to prevent mutation
    const prioritizedConfigs = Object.assign({}, remoteConfigs);
    Object.keys(localConfigs).forEach((key) => {
        if (Object.prototype.hasOwnProperty.call(prioritizedConfigs, key) &&
            isSameType(localConfigs[key], prioritizedConfigs[key])) {
            if (typeof localConfigs[key] === 'object') {
                // Recursively call getConfigsByPriority only when the value of the key is Object
                prioritizedConfigs[key] = getConfigsByPriority(localConfigs[key], prioritizedConfigs[key]);
            }
            else {
                prioritizedConfigs[key] = localConfigs[key];
            }
        }
    });
    return prioritizedConfigs;
}
/**
 * @param json UIKitConfiguration's json
 * @returns boolean
 * */
export function isRawSBUConfigPayload(json) {
    return typeof json === 'object' && 'configuration' in json && 'updated_at' in json;
}
