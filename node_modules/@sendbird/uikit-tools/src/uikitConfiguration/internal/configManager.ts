import type { PartialDeep } from 'type-fest';

import type { SBUConfigPayload } from '../types.js';
import { initialConfig } from './initialConfig.js';
import { getConfigsByPriority } from './utils.js';

export interface SBUConfigStorage {
  getItem(key: string): Promise<null | string>;
  setItem(key: string, value: string): Promise<void>;
}

export const MemoryStorage = {
  items: {} as Record<string, string>,
  async getItem(key: string): Promise<string | null> {
    return MemoryStorage.items[key] ?? null;
  },
  async setItem(key: string, value: string): Promise<void> {
    MemoryStorage.items[key] = value;
  },
};

export class UIKitConfigManager {
  private key?: string;
  private storage: SBUConfigStorage;

  constructor(storage?: SBUConfigStorage) {
    this.storage = storage ?? MemoryStorage;
  }

  init(appId: string) {
    this.key = `sbu@${appId}.uikitConfiguration`;
    return this.get();
  }

  public get safeKey() {
    if (!this.key) throw new Error('Please UIKitConfigManager.init() first');
    return this.key;
  }

  async update(remoteConfigPayload: {
    updatedAt: SBUConfigPayload['updatedAt'];
    configuration: PartialDeep<SBUConfigPayload['configuration']>;
  }): Promise<SBUConfigPayload> {
    const storedConfigPayload = await this.get();
    const mergedConfigPayload: SBUConfigPayload = {
      updatedAt: remoteConfigPayload.updatedAt,
      configuration: getConfigsByPriority(remoteConfigPayload.configuration, storedConfigPayload.configuration),
    };
    await this.storage.setItem(this.safeKey, JSON.stringify(mergedConfigPayload));
    return mergedConfigPayload;
  }

  async get(): Promise<SBUConfigPayload> {
    const initialPayload: SBUConfigPayload = {
      updatedAt: 0,
      configuration: initialConfig,
    };

    try {
      const storedConfig = await this.storage.getItem(this.safeKey);

      if (storedConfig) {
        // TODO: Validation
        return JSON.parse(storedConfig);
      } else {
        return initialPayload;
      }
    } catch {
      return initialPayload;
    }
  }
}
