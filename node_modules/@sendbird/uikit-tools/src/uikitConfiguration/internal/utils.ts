import type { PartialDeep } from 'type-fest';

import type { UIKitConfiguration } from '@sendbird/chat/lib/__definition';

import { isSameType } from '../../utils/isSameType.js';
import type { SBUConfigPayloadRaw } from '../types.js';

/**
 * @param localConfigs Set directly in code level. It has higher priority than remote ones
 * @param remoteConfigs Set by Feature Config setting in Dashboard
 * @returns
 */
export function getConfigsByPriority<T extends Record<string, any>, L extends PartialDeep<T>>(
  localConfigs: L,
  remoteConfigs: T,
): T {
  // copy remoteConfigs to prevent mutation
  const prioritizedConfigs = { ...remoteConfigs };

  Object.keys(localConfigs).forEach((key) => {
    if (
      Object.prototype.hasOwnProperty.call(prioritizedConfigs, key) &&
      isSameType(localConfigs[key], prioritizedConfigs[key])
    ) {
      if (typeof localConfigs[key] === 'object') {
        // Recursively call getConfigsByPriority only when the value of the key is Object
        prioritizedConfigs[key as keyof T] = getConfigsByPriority(localConfigs[key], prioritizedConfigs[key]);
      } else {
        prioritizedConfigs[key as keyof T] = localConfigs[key];
      }
    }
  });

  return prioritizedConfigs;
}

/**
 * @param json UIKitConfiguration's json
 * @returns boolean
 * */
export function isRawSBUConfigPayload(json: UIKitConfiguration['json']): json is SBUConfigPayloadRaw {
  return typeof json === 'object' && 'configuration' in json && 'updated_at' in json;
}
